{
  "address": "0x2490DcD38583095e227C7bF0d79452ab958239AF",
  "abi": [
    {
      "inputs": [],
      "name": "RoyaltyFeeManager__InvalidRoyaltyFeeRegistryV2",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeManager__RoyaltyFeeRegistryV2AlreadyInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyFeeRegistryV2",
          "type": "address"
        }
      ],
      "name": "RoyaltyFeeRegistryV2Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC2981",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRoyaltyFeeAmountParts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct RoyaltyFeeTypes.FeeAmountPart[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRoyaltyFeeAndGetRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistryV2",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistryV2",
          "type": "address"
        }
      ],
      "name": "initializeRoyaltyFeeRegistryV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistryV2",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeRegistryV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x696333bcc07d362465af6f4c2fa652e833fb67da8b6709bcbf3523c205c5e6ac",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0x2490DcD38583095e227C7bF0d79452ab958239AF",
    "transactionIndex": 0,
    "gasUsed": "691781",
    "logsBloom": "0x
    "blockHash": "0xe75bcf0aba43d372772433dfbdfa3ef59aa4391860e259444b3e2550baf0aa2c",
    "transactionHash": "0x696333bcc07d362465af6f4c2fa652e833fb67da8b6709bcbf3523c205c5e6ac",
    "logs": [],
    "blockNumber": 13140567,
    "cumulativeGasUsed": "691781",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "49b0d8996df154bee842ffc0a83a09e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"RoyaltyFeeManager__InvalidRoyaltyFeeRegistryV2\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeManager__RoyaltyFeeRegistryV2AlreadyInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyFeeRegistryV2\",\"type\":\"address\"}],\"name\":\"RoyaltyFeeRegistryV2Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC2981\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRoyaltyFeeAmountParts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RoyaltyFeeTypes.FeeAmountPart[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRoyaltyFeeAndGetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistryV2\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistryV2\",\"type\":\"address\"}],\"name\":\"initializeRoyaltyFeeRegistryV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistryV2\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateRoyaltyFeeAmountParts(address,uint256,uint256)\":{\"params\":{\"_amount\":\"amount to transfer\",\"_collection\":\"address of the NFT contract\",\"_tokenId\":\"tokenId\"}},\"calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount to transfer\",\"collection\":\"address of the NFT contract\",\"tokenId\":\"tokenId\"}},\"initialize(address,address)\":{\"params\":{\"_royaltyFeeRegistry\":\"address of the RoyaltyFeeRegistry\",\"_royaltyFeeRegistryV2\":\"address of the RoyaltyFeeRegistryV2\"}},\"initializeRoyaltyFeeRegistryV2(address)\":{\"details\":\"We have this method because `royaltyFeeRegistryV2` was added after the initial deploy of this contract.\",\"params\":{\"_royaltyFeeRegistryV2\":\"address of royalty fee registry V2\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"RoyaltyFeeManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateRoyaltyFeeAmountParts(address,uint256,uint256)\":{\"notice\":\"Calculate royalty fee amount parts\"},\"calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)\":{\"notice\":\"Calculate royalty fee and get recipient\"},\"initialize(address,address)\":{\"notice\":\"Initializer\"},\"initializeRoyaltyFeeRegistryV2(address)\":{\"notice\":\"Initialize `royaltyFeeRegistryV2` if not already set.\"}},\"notice\":\"Handles the logic to check and transfer royalty fees (if any).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeManager.sol\":\"RoyaltyFeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// JoepegAuctionHouse\\nerror JoepegAuctionHouse__AuctionAlreadyExists();\\nerror JoepegAuctionHouse__CurrencyMismatch();\\nerror JoepegAuctionHouse__ExpectedNonNullAddress();\\nerror JoepegAuctionHouse__ExpectedNonZeroFinalSellerAmount();\\nerror JoepegAuctionHouse__FeesHigherThanExpected();\\nerror JoepegAuctionHouse__InvalidDropInterval();\\nerror JoepegAuctionHouse__InvalidDuration();\\nerror JoepegAuctionHouse__InvalidMinPercentageToAsk();\\nerror JoepegAuctionHouse__InvalidStartTime();\\nerror JoepegAuctionHouse__NoAuctionExists();\\nerror JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\nerror JoepegAuctionHouse__UnsupportedCurrency();\\n\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnUnstartedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleUnstartedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid();\\nerror JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid();\\nerror JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime();\\nerror JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime();\\n\\nerror JoepegAuctionHouse__DutchAuctionCannotSettleUnstartedAuction();\\nerror JoepegAuctionHouse__DutchAuctionCreatorCannotSettle();\\nerror JoepegAuctionHouse__DutchAuctionInsufficientAmountToSettle();\\nerror JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice();\\n\\n// RoyaltyFeeManager\\nerror RoyaltyFeeManager__InvalidRoyaltyFeeRegistryV2();\\nerror RoyaltyFeeManager__RoyaltyFeeRegistryV2AlreadyInitialized();\\n\\n// RoyaltyFeeRegistryV2\\nerror RoyaltyFeeRegistryV2__InvalidMaxNumRecipients();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeCannotBeZero();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeLimitTooHigh();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeRecipientCannotBeNullAddr();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeSetterCannotBeNullAddr();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeTooHigh();\\nerror RoyaltyFeeRegistryV2__TooManyFeeRecipients();\\n\\n// RoyaltyFeeSetterV2\\nerror RoyaltyFeeSetterV2__CollectionCannotSupportERC2981();\\nerror RoyaltyFeeSetterV2__CollectionIsNotNFT();\\nerror RoyaltyFeeSetterV2__NotCollectionAdmin();\\nerror RoyaltyFeeSetterV2__NotCollectionOwner();\\nerror RoyaltyFeeSetterV2__NotCollectionSetter();\\nerror RoyaltyFeeSetterV2__SetterAlreadySet();\\n\\n// PendingOwnable\\nerror PendingOwnable__NotOwner();\\nerror PendingOwnable__NotPendingOwner();\\nerror PendingOwnable__PendingOwnerAlreadySet();\\nerror PendingOwnable__NoPendingOwner();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerable\\nerror SafeAccessControlEnumerable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerable__RoleIsDefaultAdmin();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafePausable\\nerror SafePausable__AlreadyPaused();\\nerror SafePausable__AlreadyUnpaused();\\n\\n// SafePausableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\",\"keccak256\":\"0x336b3da736a68a5b533dc922bde1df092a610d2f150681fc0c3911389c0ff0ad\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC165, IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {IRoyaltyFeeRegistryV2} from \\\"./interfaces/IRoyaltyFeeRegistryV2.sol\\\";\\nimport {RoyaltyFeeTypes} from \\\"./libraries/RoyaltyFeeTypes.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeManager\\n * @notice Handles the logic to check and transfer royalty fees (if any).\\n */\\ncontract RoyaltyFeeManager is\\n    IRoyaltyFeeManager,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    using RoyaltyFeeTypes for RoyaltyFeeTypes.FeeInfoPart;\\n\\n    // https://eips.ethereum.org/EIPS/eip-2981\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    IRoyaltyFeeRegistry public royaltyFeeRegistry;\\n    IRoyaltyFeeRegistryV2 public royaltyFeeRegistryV2;\\n\\n    event RoyaltyFeeRegistryV2Initialized(\\n        address indexed newRoyaltyFeeRegistryV2\\n    );\\n\\n    /**\\n     * @notice Initializer\\n     * @param _royaltyFeeRegistry address of the RoyaltyFeeRegistry\\n     * @param _royaltyFeeRegistryV2 address of the RoyaltyFeeRegistryV2\\n     */\\n    function initialize(\\n        address _royaltyFeeRegistry,\\n        address _royaltyFeeRegistryV2\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\\n        _initializeRoyaltyFeeRegistryV2(_royaltyFeeRegistryV2);\\n    }\\n\\n    /**\\n     * @notice Initialize `royaltyFeeRegistryV2` if not already set.\\n     * @dev We have this method because `royaltyFeeRegistryV2` was added\\n     * after the initial deploy of this contract.\\n     * @param _royaltyFeeRegistryV2 address of royalty fee registry V2\\n     */\\n    function initializeRoyaltyFeeRegistryV2(address _royaltyFeeRegistryV2)\\n        external\\n        onlyOwner\\n    {\\n        _initializeRoyaltyFeeRegistryV2(_royaltyFeeRegistryV2);\\n    }\\n\\n    /**\\n     * @notice Initialize `royaltyFeeRegistryV2` if not already set.\\n     * @param _royaltyFeeRegistryV2 address of royalty fee registry V2\\n     */\\n    function _initializeRoyaltyFeeRegistryV2(address _royaltyFeeRegistryV2)\\n        internal\\n    {\\n        if (address(royaltyFeeRegistryV2) != address(0)) {\\n            revert RoyaltyFeeManager__RoyaltyFeeRegistryV2AlreadyInitialized();\\n        }\\n        if (_royaltyFeeRegistryV2 == address(0)) {\\n            revert RoyaltyFeeManager__InvalidRoyaltyFeeRegistryV2();\\n        }\\n\\n        royaltyFeeRegistryV2 = IRoyaltyFeeRegistryV2(_royaltyFeeRegistryV2);\\n\\n        emit RoyaltyFeeRegistryV2Initialized(_royaltyFeeRegistryV2);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty fee and get recipient\\n     * @param collection address of the NFT contract\\n     * @param tokenId tokenId\\n     * @param amount amount to transfer\\n     */\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view override returns (address, uint256) {\\n        return _calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty fee amount parts\\n     * @param _collection address of the NFT contract\\n     * @param _tokenId tokenId\\n     * @param _amount amount to transfer\\n     */\\n    function calculateRoyaltyFeeAmountParts(\\n        address _collection,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external view override returns (RoyaltyFeeTypes.FeeAmountPart[] memory) {\\n        // If royaltyFeeRegistryV2 has been initialized, check to see if there is\\n        // royalty info set\\n        if (address(royaltyFeeRegistryV2) != address(0)) {\\n            RoyaltyFeeTypes.FeeAmountPart[]\\n                memory registryFeeAmountParts = royaltyFeeRegistryV2\\n                    .royaltyAmountParts(_collection, _amount);\\n\\n            if (registryFeeAmountParts.length > 0) {\\n                return registryFeeAmountParts;\\n            }\\n        }\\n\\n        // Otherwise, fallback to v1 royalty fee calculation\\n        (\\n            address receiver,\\n            uint256 royaltyAmount\\n        ) = _calculateRoyaltyFeeAndGetRecipient(_collection, _tokenId, _amount);\\n\\n        if (receiver == address(0) || royaltyAmount == 0) {\\n            return new RoyaltyFeeTypes.FeeAmountPart[](0);\\n        }\\n\\n        RoyaltyFeeTypes.FeeAmountPart[]\\n            memory feeAmountParts = new RoyaltyFeeTypes.FeeAmountPart[](1);\\n        feeAmountParts[0] = RoyaltyFeeTypes.FeeAmountPart({\\n            receiver: receiver,\\n            amount: royaltyAmount\\n        });\\n        return feeAmountParts;\\n    }\\n\\n    /**\\n     * @notice Calculate royalty fee and get recipient\\n     * @param _collection address of the NFT contract\\n     * @param _tokenId tokenId\\n     * @param _amount amount to transfer\\n     */\\n    function _calculateRoyaltyFeeAndGetRecipient(\\n        address _collection,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal view returns (address, uint256) {\\n        // 1. Check if there is a royalty info in the system\\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry\\n            .royaltyInfo(_collection, _amount);\\n\\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\\n            if (IERC165(_collection).supportsInterface(INTERFACE_ID_ERC2981)) {\\n                (receiver, royaltyAmount) = IERC2981(_collection).royaltyInfo(\\n                    _tokenId,\\n                    _amount\\n                );\\n            }\\n        }\\n        return (receiver, royaltyAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x43c7065332d2421a2c07d3b23c2f724a8dba4c4c41250f27af134cca33a549ed\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RoyaltyFeeTypes} from \\\"../libraries/RoyaltyFeeTypes.sol\\\";\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n\\n    function calculateRoyaltyFeeAmountParts(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (RoyaltyFeeTypes.FeeAmountPart[] memory);\\n}\\n\",\"keccak256\":\"0x3dfd64cbce55578ecc85659134c16cc4529cccf81a0d9a1773079d54aae184df\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x26ee0d6a50c317b22494ad09ff62d8469b24a51252be563dfb63512ff377c41d\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RoyaltyFeeTypes} from \\\"../libraries/RoyaltyFeeTypes.sol\\\";\\n\\ninterface IRoyaltyFeeRegistryV2 {\\n    function updateRoyaltyInfoPartsForCollection(\\n        address collection,\\n        address setter,\\n        RoyaltyFeeTypes.FeeInfoPart[] memory feeInfoParts\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function updateMaxNumRecipients(uint8 _maxNumRecipients) external;\\n\\n    function royaltyAmountParts(address _collection, uint256 _amount)\\n        external\\n        view\\n        returns (RoyaltyFeeTypes.FeeAmountPart[] memory);\\n\\n    function royaltyFeeInfoPartsCollectionSetter(address collection)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x49c24c244391eb8294824ce971911dc9d2aefe02504146e86e94cb172bd68e45\",\"license\":\"MIT\"},\"contracts/libraries/RoyaltyFeeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RoyaltyFeeTypes\\n * @notice This library contains types related to royalty fees\\n */\\nlibrary RoyaltyFeeTypes {\\n    struct FeeInfoPart {\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    struct FeeAmountPart {\\n        address receiver;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0x5934513c2554cb3a7e3f0102cb25761307b26ec03bdf6dd187416db009162f11\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b8d806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c16f515611610066578063c16f515614610124578063c235c88914610137578063e340b7521461014a578063f2fde38b1461016a578063f4f635fa1461017d57600080fd5b806304b0f1c3146100a3578063485cc955146100b8578063715018a6146100cb5780638da5cb5b146100d3578063b060dd86146100fd575b600080fd5b6100b66100b1366004610848565b6101af565b005b6100b66100c6366004610865565b6101ee565b6100b66102d5565b6033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61010b63152a902d60e11b81565b6040516001600160e01b031990911681526020016100f4565b6065546100e0906001600160a01b031681565b6066546100e0906001600160a01b031681565b61015d61015836600461089e565b61030b565b6040516100f491906108d3565b6100b6610178366004610848565b6104a7565b61019061018b36600461089e565b61053f565b604080516001600160a01b0390931683526020830191909152016100f4565b6033546001600160a01b031633146101e25760405162461bcd60e51b81526004016101d99061092b565b60405180910390fd5b6101eb81610559565b50565b600054610100900460ff166102095760005460ff161561020d565b303b155b6102705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101d9565b600054610100900460ff16158015610292576000805461ffff19166101011790555b61029a6105f4565b606580546001600160a01b0319166001600160a01b0385161790556102be82610559565b80156102d0576000805461ff00191690555b505050565b6033546001600160a01b031633146102ff5760405162461bcd60e51b81526004016101d99061092b565b6103096000610623565b565b6066546060906001600160a01b0316156103ac57606654604051637dfaf43360e11b81526001600160a01b03868116600483015260248201859052600092169063fbf5e86690604401600060405180830381865afa158015610371573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039991908101906109d0565b8051909150156103aa5790506104a0565b505b6000806103ba868686610675565b90925090506001600160a01b03821615806103d3575080155b1561041f576040805160008082526020820190925290610415565b60408051808201909152600080825260208201528152602001906001900390816103ee5790505b50925050506104a0565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816104365790505090506040518060400160405280846001600160a01b03168152602001838152508160008151811061049057610490610aa6565b6020908102919091010152925050505b9392505050565b6033546001600160a01b031633146104d15760405162461bcd60e51b81526004016101d99061092b565b6001600160a01b0381166105365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d9565b6101eb81610623565b60008061054d858585610675565b91509150935093915050565b6066546001600160a01b0316156105835760405163e28450f560e01b815260040160405180910390fd5b6001600160a01b0381166105aa57604051631196b00d60e31b815260040160405180910390fd5b606680546001600160a01b0319166001600160a01b0383169081179091556040517fcb141030124020a1d341cdabcaa89e3c8c5da5a051e150f8be79d76cd27457df90600090a250565b600054610100900460ff1661061b5760405162461bcd60e51b81526004016101d990610abc565b610309610803565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606554604051632782d6c760e01b81526001600160a01b038581166004830152602482018490526000928392839283921690632782d6c7906044016040805180830381865afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f09190610b07565b90925090506001600160a01b0382161580610709575080155b156107f7576040516301ffc9a760e01b815263152a902d60e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190610b35565b156107f75760405163152a902d60e11b815260048101879052602481018690526001600160a01b03881690632a55205a906044016040805180830381865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610b07565b90925090505b90969095509350505050565b600054610100900460ff1661082a5760405162461bcd60e51b81526004016101d990610abc565b61030933610623565b6001600160a01b03811681146101eb57600080fd5b60006020828403121561085a57600080fd5b81356104a081610833565b6000806040838503121561087857600080fd5b823561088381610833565b9150602083013561089381610833565b809150509250929050565b6000806000606084860312156108b357600080fd5b83356108be81610833565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b8281101561091e57815180516001600160a01b031685528601518685015292840192908501906001016108f0565b5091979650505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561099957610999610960565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109c8576109c8610960565b604052919050565b600060208083850312156109e357600080fd5b825167ffffffffffffffff808211156109fb57600080fd5b818501915085601f830112610a0f57600080fd5b815181811115610a2157610a21610960565b610a2f848260051b0161099f565b818152848101925060069190911b830184019087821115610a4f57600080fd5b928401925b81841015610a9b5760408489031215610a6d5760008081fd5b610a75610976565b8451610a8081610833565b81528486015186820152835260409093019291840191610a54565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008060408385031215610b1a57600080fd5b8251610b2581610833565b6020939093015192949293505050565b600060208284031215610b4757600080fd5b815180151581146104a057600080fdfea2646970667358221220eb9af28a2de228b11061a38e48f667079db7748dacffac0fcacbe6280accac6264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c16f515611610066578063c16f515614610124578063c235c88914610137578063e340b7521461014a578063f2fde38b1461016a578063f4f635fa1461017d57600080fd5b806304b0f1c3146100a3578063485cc955146100b8578063715018a6146100cb5780638da5cb5b146100d3578063b060dd86146100fd575b600080fd5b6100b66100b1366004610848565b6101af565b005b6100b66100c6366004610865565b6101ee565b6100b66102d5565b6033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61010b63152a902d60e11b81565b6040516001600160e01b031990911681526020016100f4565b6065546100e0906001600160a01b031681565b6066546100e0906001600160a01b031681565b61015d61015836600461089e565b61030b565b6040516100f491906108d3565b6100b6610178366004610848565b6104a7565b61019061018b36600461089e565b61053f565b604080516001600160a01b0390931683526020830191909152016100f4565b6033546001600160a01b031633146101e25760405162461bcd60e51b81526004016101d99061092b565b60405180910390fd5b6101eb81610559565b50565b600054610100900460ff166102095760005460ff161561020d565b303b155b6102705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101d9565b600054610100900460ff16158015610292576000805461ffff19166101011790555b61029a6105f4565b606580546001600160a01b0319166001600160a01b0385161790556102be82610559565b80156102d0576000805461ff00191690555b505050565b6033546001600160a01b031633146102ff5760405162461bcd60e51b81526004016101d99061092b565b6103096000610623565b565b6066546060906001600160a01b0316156103ac57606654604051637dfaf43360e11b81526001600160a01b03868116600483015260248201859052600092169063fbf5e86690604401600060405180830381865afa158015610371573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039991908101906109d0565b8051909150156103aa5790506104a0565b505b6000806103ba868686610675565b90925090506001600160a01b03821615806103d3575080155b1561041f576040805160008082526020820190925290610415565b60408051808201909152600080825260208201528152602001906001900390816103ee5790505b50925050506104a0565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816104365790505090506040518060400160405280846001600160a01b03168152602001838152508160008151811061049057610490610aa6565b6020908102919091010152925050505b9392505050565b6033546001600160a01b031633146104d15760405162461bcd60e51b81526004016101d99061092b565b6001600160a01b0381166105365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d9565b6101eb81610623565b60008061054d858585610675565b91509150935093915050565b6066546001600160a01b0316156105835760405163e28450f560e01b815260040160405180910390fd5b6001600160a01b0381166105aa57604051631196b00d60e31b815260040160405180910390fd5b606680546001600160a01b0319166001600160a01b0383169081179091556040517fcb141030124020a1d341cdabcaa89e3c8c5da5a051e150f8be79d76cd27457df90600090a250565b600054610100900460ff1661061b5760405162461bcd60e51b81526004016101d990610abc565b610309610803565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606554604051632782d6c760e01b81526001600160a01b038581166004830152602482018490526000928392839283921690632782d6c7906044016040805180830381865afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f09190610b07565b90925090506001600160a01b0382161580610709575080155b156107f7576040516301ffc9a760e01b815263152a902d60e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190610b35565b156107f75760405163152a902d60e11b815260048101879052602481018690526001600160a01b03881690632a55205a906044016040805180830381865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610b07565b90925090505b90969095509350505050565b600054610100900460ff1661082a5760405162461bcd60e51b81526004016101d990610abc565b61030933610623565b6001600160a01b03811681146101eb57600080fd5b60006020828403121561085a57600080fd5b81356104a081610833565b6000806040838503121561087857600080fd5b823561088381610833565b9150602083013561089381610833565b809150509250929050565b6000806000606084860312156108b357600080fd5b83356108be81610833565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b8281101561091e57815180516001600160a01b031685528601518685015292840192908501906001016108f0565b5091979650505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561099957610999610960565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109c8576109c8610960565b604052919050565b600060208083850312156109e357600080fd5b825167ffffffffffffffff808211156109fb57600080fd5b818501915085601f830112610a0f57600080fd5b815181811115610a2157610a21610960565b610a2f848260051b0161099f565b818152848101925060069190911b830184019087821115610a4f57600080fd5b928401925b81841015610a9b5760408489031215610a6d5760008081fd5b610a75610976565b8451610a8081610833565b81528486015186820152835260409093019291840191610a54565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008060408385031215610b1a57600080fd5b8251610b2581610833565b6020939093015192949293505050565b600060208284031215610b4757600080fd5b815180151581146104a057600080fdfea2646970667358221220eb9af28a2de228b11061a38e48f667079db7748dacffac0fcacbe6280accac6264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateRoyaltyFeeAmountParts(address,uint256,uint256)": {
        "params": {
          "_amount": "amount to transfer",
          "_collection": "address of the NFT contract",
          "_tokenId": "tokenId"
        }
      },
      "calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)": {
        "params": {
          "amount": "amount to transfer",
          "collection": "address of the NFT contract",
          "tokenId": "tokenId"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_royaltyFeeRegistry": "address of the RoyaltyFeeRegistry",
          "_royaltyFeeRegistryV2": "address of the RoyaltyFeeRegistryV2"
        }
      },
      "initializeRoyaltyFeeRegistryV2(address)": {
        "details": "We have this method because `royaltyFeeRegistryV2` was added after the initial deploy of this contract.",
        "params": {
          "_royaltyFeeRegistryV2": "address of royalty fee registry V2"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "RoyaltyFeeManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateRoyaltyFeeAmountParts(address,uint256,uint256)": {
        "notice": "Calculate royalty fee amount parts"
      },
      "calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)": {
        "notice": "Calculate royalty fee and get recipient"
      },
      "initialize(address,address)": {
        "notice": "Initializer"
      },
      "initializeRoyaltyFeeRegistryV2(address)": {
        "notice": "Initialize `royaltyFeeRegistryV2` if not already set."
      }
    },
    "notice": "Handles the logic to check and transfer royalty fees (if any).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1223,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 582,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11853,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "royaltyFeeRegistry",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRoyaltyFeeRegistry)14458"
      },
      {
        "astId": 11856,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "royaltyFeeRegistryV2",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IRoyaltyFeeRegistryV2)14502"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoyaltyFeeRegistry)14458": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyFeeRegistryV2)14502": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeRegistryV2",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}