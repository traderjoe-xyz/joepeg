{
  "address": "0x063c8b1C24F8fE577b2c91B87C62F846eBc5863d",
  "abi": [
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__InvalidMaxNumRecipients",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__RoyaltyFeeCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__RoyaltyFeeLimitTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__RoyaltyFeeRecipientCannotBeNullAddr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__RoyaltyFeeSetterCannotBeNullAddr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__RoyaltyFeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistryV2__TooManyFeeRecipients",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxNumRecipients",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxNumRecipients",
          "type": "uint256"
        }
      ],
      "name": "MaxNumRecipientsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct RoyaltyFeeTypes.FeeInfoPart[]",
          "name": "feeInfoParts",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltyFeeInfoSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRoyaltyFeeLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyFeeLimitSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_maxNumRecipients",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumRecipients",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "royaltyAmountParts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct RoyaltyFeeTypes.FeeAmountPart[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "royaltyFeeInfoPartsCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltyFeeInfoPartsCollectionSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxNumRecipients",
          "type": "uint8"
        }
      ],
      "name": "updateMaxNumRecipients",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct RoyaltyFeeTypes.FeeInfoPart[]",
          "name": "_feeInfoParts",
          "type": "tuple[]"
        }
      ],
      "name": "updateRoyaltyInfoPartsForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec234de18a0b2c18fb811b27f13e1f7313fe05db6eb7b24cb432ddba5bba2d12",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0x063c8b1C24F8fE577b2c91B87C62F846eBc5863d",
    "transactionIndex": 0,
    "gasUsed": "846662",
    "logsBloom": "0x
    "blockHash": "0x6786b63d5497f8e7a4f168b9a298facbb8899918b748f436e2d50e2c187b07a0",
    "transactionHash": "0xec234de18a0b2c18fb811b27f13e1f7313fe05db6eb7b24cb432ddba5bba2d12",
    "logs": [],
    "blockNumber": 13140264,
    "cumulativeGasUsed": "846662",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b66ebae1842d3df35bca7053de0fa675",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__InvalidMaxNumRecipients\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__RoyaltyFeeCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__RoyaltyFeeLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__RoyaltyFeeRecipientCannotBeNullAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__RoyaltyFeeSetterCannotBeNullAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__RoyaltyFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeRegistryV2__TooManyFeeRecipients\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxNumRecipients\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxNumRecipients\",\"type\":\"uint256\"}],\"name\":\"MaxNumRecipientsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RoyaltyFeeTypes.FeeInfoPart[]\",\"name\":\"feeInfoParts\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltyFeeInfoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRoyaltyFeeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeLimitSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxNumRecipients\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumRecipients\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"royaltyAmountParts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RoyaltyFeeTypes.FeeAmountPart[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyFeeInfoPartsCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltyFeeInfoPartsCollectionSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxNumRecipients\",\"type\":\"uint8\"}],\"name\":\"updateMaxNumRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct RoyaltyFeeTypes.FeeInfoPart[]\",\"name\":\"_feeInfoParts\",\"type\":\"tuple[]\"}],\"name\":\"updateRoyaltyInfoPartsForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(uint256,uint8)\":{\"params\":{\"_maxNumRecipients\":\"new maximum number of royalty fee recipients allowed\",\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyAmountParts(address,uint256)\":{\"params\":{\"_amount\":\"contains receiver and fee information\",\"_collection\":\"address of the NFT contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaxNumRecipients(uint8)\":{\"params\":{\"_maxNumRecipients\":\"new max number of recipients allowed\"}},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoPartsForCollection(address,address,(address,uint256)[])\":{\"params\":{\"_collection\":\"address of the NFT contract\",\"_feeInfoParts\":\"contains receiver and fee information\",\"_setter\":\"address that sets the receivers\"}}},\"title\":\"RoyaltyFeeRegistryV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(uint256,uint8)\":{\"notice\":\"Initializer\"},\"maxNumRecipients()\":{\"notice\":\"Max number of royalty fee recipients allowed\"},\"royaltyAmountParts(address,uint256)\":{\"notice\":\"Get royalty info for collection\"},\"royaltyFeeInfoPartsCollection(address,uint256)\":{\"notice\":\"Stores royalty fee information for collections\"},\"royaltyFeeInfoPartsCollectionSetter(address)\":{\"notice\":\"Stores setter address for collections whose royalty fee information are overridden\"},\"royaltyFeeLimit()\":{\"notice\":\"Max royalty fee bp allowed (10,000 = 100%)\"},\"updateMaxNumRecipients(uint8)\":{\"notice\":\"Update `maxNumRecipients`\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty fee limit\"},\"updateRoyaltyInfoPartsForCollection(address,address,(address,uint256)[])\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"It is a royalty fee registry for the Joepeg exchange and auction house.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeRegistryV2.sol\":\"RoyaltyFeeRegistryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// JoepegAuctionHouse\\nerror JoepegAuctionHouse__AuctionAlreadyExists();\\nerror JoepegAuctionHouse__CurrencyMismatch();\\nerror JoepegAuctionHouse__ExpectedNonNullAddress();\\nerror JoepegAuctionHouse__ExpectedNonZeroFinalSellerAmount();\\nerror JoepegAuctionHouse__FeesHigherThanExpected();\\nerror JoepegAuctionHouse__InvalidDropInterval();\\nerror JoepegAuctionHouse__InvalidDuration();\\nerror JoepegAuctionHouse__InvalidMinPercentageToAsk();\\nerror JoepegAuctionHouse__InvalidStartTime();\\nerror JoepegAuctionHouse__NoAuctionExists();\\nerror JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\nerror JoepegAuctionHouse__UnsupportedCurrency();\\n\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnUnstartedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleUnstartedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid();\\nerror JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid();\\nerror JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime();\\nerror JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime();\\n\\nerror JoepegAuctionHouse__DutchAuctionCannotSettleUnstartedAuction();\\nerror JoepegAuctionHouse__DutchAuctionCreatorCannotSettle();\\nerror JoepegAuctionHouse__DutchAuctionInsufficientAmountToSettle();\\nerror JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice();\\n\\n// RoyaltyFeeManager\\nerror RoyaltyFeeManager__InvalidRoyaltyFeeRegistryV2();\\nerror RoyaltyFeeManager__RoyaltyFeeRegistryV2AlreadyInitialized();\\n\\n// RoyaltyFeeRegistryV2\\nerror RoyaltyFeeRegistryV2__InvalidMaxNumRecipients();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeCannotBeZero();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeLimitTooHigh();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeRecipientCannotBeNullAddr();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeSetterCannotBeNullAddr();\\nerror RoyaltyFeeRegistryV2__RoyaltyFeeTooHigh();\\nerror RoyaltyFeeRegistryV2__TooManyFeeRecipients();\\n\\n// RoyaltyFeeSetterV2\\nerror RoyaltyFeeSetterV2__CollectionCannotSupportERC2981();\\nerror RoyaltyFeeSetterV2__CollectionIsNotNFT();\\nerror RoyaltyFeeSetterV2__NotCollectionAdmin();\\nerror RoyaltyFeeSetterV2__NotCollectionOwner();\\nerror RoyaltyFeeSetterV2__NotCollectionSetter();\\nerror RoyaltyFeeSetterV2__SetterAlreadySet();\\n\\n// PendingOwnable\\nerror PendingOwnable__NotOwner();\\nerror PendingOwnable__NotPendingOwner();\\nerror PendingOwnable__PendingOwnerAlreadySet();\\nerror PendingOwnable__NoPendingOwner();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerable\\nerror SafeAccessControlEnumerable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerable__RoleIsDefaultAdmin();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafePausable\\nerror SafePausable__AlreadyPaused();\\nerror SafePausable__AlreadyUnpaused();\\n\\n// SafePausableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\",\"keccak256\":\"0x336b3da736a68a5b533dc922bde1df092a610d2f150681fc0c3911389c0ff0ad\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeRegistryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\nimport {IRoyaltyFeeRegistryV2} from \\\"./interfaces/IRoyaltyFeeRegistryV2.sol\\\";\\nimport {RoyaltyFeeTypes} from \\\"./libraries/RoyaltyFeeTypes.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeRegistryV2\\n * @notice It is a royalty fee registry for the Joepeg exchange and auction house.\\n */\\ncontract RoyaltyFeeRegistryV2 is\\n    IRoyaltyFeeRegistryV2,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    using RoyaltyFeeTypes for RoyaltyFeeTypes.FeeInfoPart;\\n\\n    /// @notice Max royalty fee bp allowed (10,000 = 100%)\\n    uint256 public royaltyFeeLimit;\\n\\n    /// @notice Max number of royalty fee recipients allowed\\n    uint8 public maxNumRecipients;\\n\\n    /// @notice Stores royalty fee information for collections\\n    mapping(address => RoyaltyFeeTypes.FeeInfoPart[])\\n        public royaltyFeeInfoPartsCollection;\\n\\n    /// @notice Stores setter address for collections whose royalty fee information\\n    /// are overridden\\n    mapping(address => address) public royaltyFeeInfoPartsCollectionSetter;\\n\\n    event RoyaltyFeeLimitSet(\\n        uint256 oldRoyaltyFeeLimit,\\n        uint256 newRoyaltyFeeLimit\\n    );\\n    event MaxNumRecipientsSet(\\n        uint256 oldMaxNumRecipients,\\n        uint256 newMaxNumRecipients\\n    );\\n    event RoyaltyFeeInfoSet(\\n        address indexed collection,\\n        address indexed setter,\\n        RoyaltyFeeTypes.FeeInfoPart[] feeInfoParts\\n    );\\n\\n    modifier isValidRoyaltyFeeLimit(uint256 _royaltyFeeLimit) {\\n        if (_royaltyFeeLimit > 9500) {\\n            revert RoyaltyFeeRegistryV2__RoyaltyFeeLimitTooHigh();\\n        }\\n        _;\\n    }\\n\\n    modifier isValidMaxNumRecipients(uint256 _maxNumRecipients) {\\n        if (_maxNumRecipients == 0) {\\n            revert RoyaltyFeeRegistryV2__InvalidMaxNumRecipients();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializer\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     * @param _maxNumRecipients new maximum number of royalty fee recipients allowed\\n     */\\n    function initialize(uint256 _royaltyFeeLimit, uint8 _maxNumRecipients)\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n\\n        _updateRoyaltyFeeLimit(_royaltyFeeLimit);\\n        _updateMaxNumRecipients(_maxNumRecipients);\\n    }\\n\\n    /**\\n     * @notice Update royalty fee limit\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _updateRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update royalty fee limit\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function _updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        internal\\n        isValidRoyaltyFeeLimit(_royaltyFeeLimit)\\n    {\\n        uint256 oldRoyaltyFeeLimit = royaltyFeeLimit;\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n\\n        emit RoyaltyFeeLimitSet(oldRoyaltyFeeLimit, _royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update `maxNumRecipients`\\n     * @param _maxNumRecipients new max number of recipients allowed\\n     */\\n    function updateMaxNumRecipients(uint8 _maxNumRecipients)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _updateMaxNumRecipients(_maxNumRecipients);\\n    }\\n\\n    /**\\n     * @notice Update `maxNumRecipients`\\n     * @param _maxNumRecipients new max number of recipients allowed\\n     */\\n    function _updateMaxNumRecipients(uint8 _maxNumRecipients)\\n        internal\\n        isValidMaxNumRecipients(_maxNumRecipients)\\n        onlyOwner\\n    {\\n        uint8 oldMaxNumRecipients = maxNumRecipients;\\n        maxNumRecipients = _maxNumRecipients;\\n\\n        emit MaxNumRecipientsSet(oldMaxNumRecipients, _maxNumRecipients);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _collection address of the NFT contract\\n     * @param _setter address that sets the receivers\\n     * @param _feeInfoParts contains receiver and fee information\\n     */\\n    function updateRoyaltyInfoPartsForCollection(\\n        address _collection,\\n        address _setter,\\n        RoyaltyFeeTypes.FeeInfoPart[] memory _feeInfoParts\\n    ) external override onlyOwner {\\n        uint256 numFeeInfoParts = _feeInfoParts.length;\\n        if (numFeeInfoParts > maxNumRecipients) {\\n            revert RoyaltyFeeRegistryV2__TooManyFeeRecipients();\\n        }\\n        if (_setter == address(0)) {\\n            revert RoyaltyFeeRegistryV2__RoyaltyFeeSetterCannotBeNullAddr();\\n        }\\n\\n        delete royaltyFeeInfoPartsCollection[_collection];\\n        RoyaltyFeeTypes.FeeInfoPart[]\\n            storage feeInfoPartsForCollection = royaltyFeeInfoPartsCollection[\\n                _collection\\n            ];\\n\\n        uint256 totalFees;\\n\\n        for (uint256 i; i < numFeeInfoParts; i++) {\\n            RoyaltyFeeTypes.FeeInfoPart memory feeInfoPart = _feeInfoParts[i];\\n            if (feeInfoPart.receiver == address(0)) {\\n                revert RoyaltyFeeRegistryV2__RoyaltyFeeRecipientCannotBeNullAddr();\\n            }\\n            if (feeInfoPart.fee == 0) {\\n                revert RoyaltyFeeRegistryV2__RoyaltyFeeCannotBeZero();\\n            }\\n            totalFees += feeInfoPart.fee;\\n            feeInfoPartsForCollection.push(feeInfoPart);\\n        }\\n\\n        if (totalFees > royaltyFeeLimit) {\\n            revert RoyaltyFeeRegistryV2__RoyaltyFeeTooHigh();\\n        }\\n\\n        royaltyFeeInfoPartsCollectionSetter[_collection] = _setter;\\n\\n        emit RoyaltyFeeInfoSet(_collection, _setter, _feeInfoParts);\\n    }\\n\\n    /**\\n     * @notice Get royalty info for collection\\n     * @param _collection address of the NFT contract\\n     * @param _amount contains receiver and fee information\\n     */\\n    function royaltyAmountParts(address _collection, uint256 _amount)\\n        external\\n        view\\n        override\\n        returns (RoyaltyFeeTypes.FeeAmountPart[] memory)\\n    {\\n        RoyaltyFeeTypes.FeeInfoPart[]\\n            memory feeInfoParts = royaltyFeeInfoPartsCollection[_collection];\\n        uint256 numFeeInfoParts = feeInfoParts.length;\\n        RoyaltyFeeTypes.FeeAmountPart[]\\n            memory feeAmountParts = new RoyaltyFeeTypes.FeeAmountPart[](\\n                numFeeInfoParts\\n            );\\n        for (uint256 i; i < numFeeInfoParts; i++) {\\n            RoyaltyFeeTypes.FeeInfoPart memory feeInfoPart = feeInfoParts[i];\\n            feeAmountParts[i] = RoyaltyFeeTypes.FeeAmountPart({\\n                receiver: feeInfoPart.receiver,\\n                amount: (_amount * feeInfoPart.fee) / 10_000\\n            });\\n        }\\n        return feeAmountParts;\\n    }\\n}\\n\",\"keccak256\":\"0x3ac73c8e8409a553e9f59e091264639a343de50a9f08837761a74e5d25b83a62\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RoyaltyFeeTypes} from \\\"../libraries/RoyaltyFeeTypes.sol\\\";\\n\\ninterface IRoyaltyFeeRegistryV2 {\\n    function updateRoyaltyInfoPartsForCollection(\\n        address collection,\\n        address setter,\\n        RoyaltyFeeTypes.FeeInfoPart[] memory feeInfoParts\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function updateMaxNumRecipients(uint8 _maxNumRecipients) external;\\n\\n    function royaltyAmountParts(address _collection, uint256 _amount)\\n        external\\n        view\\n        returns (RoyaltyFeeTypes.FeeAmountPart[] memory);\\n\\n    function royaltyFeeInfoPartsCollectionSetter(address collection)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x49c24c244391eb8294824ce971911dc9d2aefe02504146e86e94cb172bd68e45\",\"license\":\"MIT\"},\"contracts/libraries/RoyaltyFeeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RoyaltyFeeTypes\\n * @notice This library contains types related to royalty fees\\n */\\nlibrary RoyaltyFeeTypes {\\n    struct FeeInfoPart {\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    struct FeeAmountPart {\\n        address receiver;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0x5934513c2554cb3a7e3f0102cb25761307b26ec03bdf6dd187416db009162f11\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e5a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b14610159578063b9223c9d1461016a578063d0aeb6941461017d578063dd6d3e08146101af578063f2fde38b146101ce578063fbf5e866146101e157600080fd5b80632a943b78146100b95780633c621db0146100ce5780633d11d095146101145780634782604c146101275780634fb7d3f91461013a578063715018a614610151575b600080fd5b6100cc6100c7366004610a9e565b610201565b005b6100f76100dc366004610b94565b6068602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc610122366004610bc7565b610436565b6100cc610135366004610bf3565b61050b565b61014360655481565b60405190815260200161010b565b6100cc610541565b6033546001600160a01b03166100f7565b6100cc610178366004610c0e565b610577565b61019061018b366004610c27565b6105aa565b604080516001600160a01b03909316835260208301919091520161010b565b6066546101bc9060ff1681565b60405160ff909116815260200161010b565b6100cc6101dc366004610b94565b6105f0565b6101f46101ef366004610c27565b610688565b60405161010b9190610c51565b6033546001600160a01b031633146102345760405162461bcd60e51b815260040161022b90610cb1565b60405180910390fd5b805160665460ff1681111561025b5760405162f1a97f60e11b815260040160405180910390fd5b6001600160a01b0383166102825760405163f9afc7a360e01b815260040160405180910390fd5b6001600160a01b03841660009081526067602052604081206102a3916109cc565b6001600160a01b038416600090815260676020526040812090805b838110156103a55760008582815181106102da576102da610ce6565b6020026020010151905060006001600160a01b031681600001516001600160a01b0316141561031c576040516326790dbd60e01b815260040160405180910390fd5b602081015161033e57604051633364c36360e01b815260040160405180910390fd5b602081015161034d9084610d12565b8454600180820187556000878152602090819020855160029094020180546001600160a01b0319166001600160a01b03909416939093178355939093015192019190915591508061039d81610d2a565b9150506102be565b506065548111156103c95760405163511e8d7d60e01b815260040160405180910390fd5b6001600160a01b038681166000818152606860205260409081902080546001600160a01b0319169389169384179055517f2d1cbbe4385e2fcabbfc2d9cce0e95cc5435a5cad090861684ef9cdd2b36decc90610426908890610d45565b60405180910390a3505050505050565b600054610100900460ff166104515760005460ff1615610455565b303b155b6104b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161022b565b600054610100900460ff161580156104da576000805461ffff19166101011790555b6104e2610816565b6104eb83610845565b6104f4826108b0565b8015610506576000805461ff00191690555b505050565b6033546001600160a01b031633146105355760405162461bcd60e51b815260040161022b90610cb1565b61053e816108b0565b50565b6033546001600160a01b0316331461056b5760405162461bcd60e51b815260040161022b90610cb1565b610575600061094a565b565b6033546001600160a01b031633146105a15760405162461bcd60e51b815260040161022b90610cb1565b61053e81610845565b606760205281600052604060002081815481106105c657600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6033546001600160a01b0316331461061a5760405162461bcd60e51b815260040161022b90610cb1565b6001600160a01b03811661067f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022b565b61053e8161094a565b6001600160a01b0382166000908152606760209081526040808320805482518185028101850190935280835260609493849084015b82821015610705576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016106bd565b50505050905060008151905060008167ffffffffffffffff81111561072c5761072c610a2e565b60405190808252806020026020018201604052801561077157816020015b604080518082019091526000808252602082015281526020019060019003908161074a5790505b50905060005b8281101561080c57600084828151811061079357610793610ce6565b60200260200101519050604051806040016040528082600001516001600160a01b0316815260200161271083602001518a6107ce9190610d98565b6107d89190610db7565b8152508383815181106107ed576107ed610ce6565b602002602001018190525050808061080490610d2a565b915050610777565b5095945050505050565b600054610100900460ff1661083d5760405162461bcd60e51b815260040161022b90610dd9565b61057561099c565b8061251c81111561086957604051631402383b60e21b815260040160405180910390fd5b606580549083905560408051828152602081018590527f27bd9083102b6ab2bda029f107eca1bec551287e7c79cc789ce99380f3bdd57891015b60405180910390a1505050565b60ff8116806108d257604051631246de1560e01b815260040160405180910390fd5b6033546001600160a01b031633146108fc5760405162461bcd60e51b815260040161022b90610cb1565b6066805460ff84811660ff1983168117909355604080519190921680825260208201939093527f398f772e88899131718c56efba53d685c784f35fb053da7dfbea747f1924759b91016108a3565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166109c35760405162461bcd60e51b815260040161022b90610dd9565b6105753361094a565b508054600082556002029060005260206000209081019061053e91905b80821115610a0e5780546001600160a01b0319168155600060018201556002016109e9565b5090565b80356001600160a01b0381168114610a2957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610a6757610a67610a2e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a9657610a96610a2e565b604052919050565b600080600060608486031215610ab357600080fd5b610abc84610a12565b92506020610acb818601610a12565b925060408086013567ffffffffffffffff80821115610ae957600080fd5b818801915088601f830112610afd57600080fd5b813581811115610b0f57610b0f610a2e565b610b1d858260051b01610a6d565b818152858101925060069190911b83018501908a821115610b3d57600080fd5b928501925b81841015610b845784848c031215610b5a5760008081fd5b610b62610a44565b610b6b85610a12565b8152848701358782015283529284019291850191610b42565b8096505050505050509250925092565b600060208284031215610ba657600080fd5b610baf82610a12565b9392505050565b803560ff81168114610a2957600080fd5b60008060408385031215610bda57600080fd5b82359150610bea60208401610bb6565b90509250929050565b600060208284031215610c0557600080fd5b610baf82610bb6565b600060208284031215610c2057600080fd5b5035919050565b60008060408385031215610c3a57600080fd5b610c4383610a12565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015610ca457610c9484835180516001600160a01b03168252602090810151910152565b9284019290850190600101610c6e565b5091979650505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610d2557610d25610cfc565b500190565b6000600019821415610d3e57610d3e610cfc565b5060010190565b602080825282518282018190526000919060409081850190868401855b82811015610ca457610d8884835180516001600160a01b03168252602090810151910152565b9284019290850190600101610d62565b6000816000190483118215151615610db257610db2610cfc565b500290565b600082610dd457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220f63decec3024be28f135d754bfd37ce193af9ef79eee355d8d94aabefb0602ac64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b14610159578063b9223c9d1461016a578063d0aeb6941461017d578063dd6d3e08146101af578063f2fde38b146101ce578063fbf5e866146101e157600080fd5b80632a943b78146100b95780633c621db0146100ce5780633d11d095146101145780634782604c146101275780634fb7d3f91461013a578063715018a614610151575b600080fd5b6100cc6100c7366004610a9e565b610201565b005b6100f76100dc366004610b94565b6068602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc610122366004610bc7565b610436565b6100cc610135366004610bf3565b61050b565b61014360655481565b60405190815260200161010b565b6100cc610541565b6033546001600160a01b03166100f7565b6100cc610178366004610c0e565b610577565b61019061018b366004610c27565b6105aa565b604080516001600160a01b03909316835260208301919091520161010b565b6066546101bc9060ff1681565b60405160ff909116815260200161010b565b6100cc6101dc366004610b94565b6105f0565b6101f46101ef366004610c27565b610688565b60405161010b9190610c51565b6033546001600160a01b031633146102345760405162461bcd60e51b815260040161022b90610cb1565b60405180910390fd5b805160665460ff1681111561025b5760405162f1a97f60e11b815260040160405180910390fd5b6001600160a01b0383166102825760405163f9afc7a360e01b815260040160405180910390fd5b6001600160a01b03841660009081526067602052604081206102a3916109cc565b6001600160a01b038416600090815260676020526040812090805b838110156103a55760008582815181106102da576102da610ce6565b6020026020010151905060006001600160a01b031681600001516001600160a01b0316141561031c576040516326790dbd60e01b815260040160405180910390fd5b602081015161033e57604051633364c36360e01b815260040160405180910390fd5b602081015161034d9084610d12565b8454600180820187556000878152602090819020855160029094020180546001600160a01b0319166001600160a01b03909416939093178355939093015192019190915591508061039d81610d2a565b9150506102be565b506065548111156103c95760405163511e8d7d60e01b815260040160405180910390fd5b6001600160a01b038681166000818152606860205260409081902080546001600160a01b0319169389169384179055517f2d1cbbe4385e2fcabbfc2d9cce0e95cc5435a5cad090861684ef9cdd2b36decc90610426908890610d45565b60405180910390a3505050505050565b600054610100900460ff166104515760005460ff1615610455565b303b155b6104b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161022b565b600054610100900460ff161580156104da576000805461ffff19166101011790555b6104e2610816565b6104eb83610845565b6104f4826108b0565b8015610506576000805461ff00191690555b505050565b6033546001600160a01b031633146105355760405162461bcd60e51b815260040161022b90610cb1565b61053e816108b0565b50565b6033546001600160a01b0316331461056b5760405162461bcd60e51b815260040161022b90610cb1565b610575600061094a565b565b6033546001600160a01b031633146105a15760405162461bcd60e51b815260040161022b90610cb1565b61053e81610845565b606760205281600052604060002081815481106105c657600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6033546001600160a01b0316331461061a5760405162461bcd60e51b815260040161022b90610cb1565b6001600160a01b03811661067f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022b565b61053e8161094a565b6001600160a01b0382166000908152606760209081526040808320805482518185028101850190935280835260609493849084015b82821015610705576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016106bd565b50505050905060008151905060008167ffffffffffffffff81111561072c5761072c610a2e565b60405190808252806020026020018201604052801561077157816020015b604080518082019091526000808252602082015281526020019060019003908161074a5790505b50905060005b8281101561080c57600084828151811061079357610793610ce6565b60200260200101519050604051806040016040528082600001516001600160a01b0316815260200161271083602001518a6107ce9190610d98565b6107d89190610db7565b8152508383815181106107ed576107ed610ce6565b602002602001018190525050808061080490610d2a565b915050610777565b5095945050505050565b600054610100900460ff1661083d5760405162461bcd60e51b815260040161022b90610dd9565b61057561099c565b8061251c81111561086957604051631402383b60e21b815260040160405180910390fd5b606580549083905560408051828152602081018590527f27bd9083102b6ab2bda029f107eca1bec551287e7c79cc789ce99380f3bdd57891015b60405180910390a1505050565b60ff8116806108d257604051631246de1560e01b815260040160405180910390fd5b6033546001600160a01b031633146108fc5760405162461bcd60e51b815260040161022b90610cb1565b6066805460ff84811660ff1983168117909355604080519190921680825260208201939093527f398f772e88899131718c56efba53d685c784f35fb053da7dfbea747f1924759b91016108a3565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166109c35760405162461bcd60e51b815260040161022b90610dd9565b6105753361094a565b508054600082556002029060005260206000209081019061053e91905b80821115610a0e5780546001600160a01b0319168155600060018201556002016109e9565b5090565b80356001600160a01b0381168114610a2957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610a6757610a67610a2e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a9657610a96610a2e565b604052919050565b600080600060608486031215610ab357600080fd5b610abc84610a12565b92506020610acb818601610a12565b925060408086013567ffffffffffffffff80821115610ae957600080fd5b818801915088601f830112610afd57600080fd5b813581811115610b0f57610b0f610a2e565b610b1d858260051b01610a6d565b818152858101925060069190911b83018501908a821115610b3d57600080fd5b928501925b81841015610b845784848c031215610b5a5760008081fd5b610b62610a44565b610b6b85610a12565b8152848701358782015283529284019291850191610b42565b8096505050505050509250925092565b600060208284031215610ba657600080fd5b610baf82610a12565b9392505050565b803560ff81168114610a2957600080fd5b60008060408385031215610bda57600080fd5b82359150610bea60208401610bb6565b90509250929050565b600060208284031215610c0557600080fd5b610baf82610bb6565b600060208284031215610c2057600080fd5b5035919050565b60008060408385031215610c3a57600080fd5b610c4383610a12565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015610ca457610c9484835180516001600160a01b03168252602090810151910152565b9284019290850190600101610c6e565b5091979650505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610d2557610d25610cfc565b500190565b6000600019821415610d3e57610d3e610cfc565b5060010190565b602080825282518282018190526000919060409081850190868401855b82811015610ca457610d8884835180516001600160a01b03168252602090810151910152565b9284019290850190600101610d62565b6000816000190483118215151615610db257610db2610cfc565b500290565b600082610dd457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220f63decec3024be28f135d754bfd37ce193af9ef79eee355d8d94aabefb0602ac64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(uint256,uint8)": {
        "params": {
          "_maxNumRecipients": "new maximum number of royalty fee recipients allowed",
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyAmountParts(address,uint256)": {
        "params": {
          "_amount": "contains receiver and fee information",
          "_collection": "address of the NFT contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMaxNumRecipients(uint8)": {
        "params": {
          "_maxNumRecipients": "new max number of recipients allowed"
        }
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoPartsForCollection(address,address,(address,uint256)[])": {
        "params": {
          "_collection": "address of the NFT contract",
          "_feeInfoParts": "contains receiver and fee information",
          "_setter": "address that sets the receivers"
        }
      }
    },
    "title": "RoyaltyFeeRegistryV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(uint256,uint8)": {
        "notice": "Initializer"
      },
      "maxNumRecipients()": {
        "notice": "Max number of royalty fee recipients allowed"
      },
      "royaltyAmountParts(address,uint256)": {
        "notice": "Get royalty info for collection"
      },
      "royaltyFeeInfoPartsCollection(address,uint256)": {
        "notice": "Stores royalty fee information for collections"
      },
      "royaltyFeeInfoPartsCollectionSetter(address)": {
        "notice": "Stores setter address for collections whose royalty fee information are overridden"
      },
      "royaltyFeeLimit()": {
        "notice": "Max royalty fee bp allowed (10,000 = 100%)"
      },
      "updateMaxNumRecipients(uint8)": {
        "notice": "Update `maxNumRecipients`"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty fee limit"
      },
      "updateRoyaltyInfoPartsForCollection(address,address,(address,uint256)[])": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "It is a royalty fee registry for the Joepeg exchange and auction house.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1223,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 582,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12348,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "royaltyFeeLimit",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 12351,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "maxNumRecipients",
        "offset": 0,
        "slot": "102",
        "type": "t_uint8"
      },
      {
        "astId": 12358,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "royaltyFeeInfoPartsCollection",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_array(t_struct(FeeInfoPart)14739_storage)dyn_storage)"
      },
      {
        "astId": 12363,
        "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
        "label": "royaltyFeeInfoPartsCollectionSetter",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FeeInfoPart)14739_storage)dyn_storage": {
        "base": "t_struct(FeeInfoPart)14739_storage",
        "encoding": "dynamic_array",
        "label": "struct RoyaltyFeeTypes.FeeInfoPart[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(FeeInfoPart)14739_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltyFeeTypes.FeeInfoPart[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(FeeInfoPart)14739_storage)dyn_storage"
      },
      "t_struct(FeeInfoPart)14739_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyFeeTypes.FeeInfoPart",
        "members": [
          {
            "astId": 14736,
            "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14738,
            "contract": "contracts/RoyaltyFeeRegistryV2.sol:RoyaltyFeeRegistryV2",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}