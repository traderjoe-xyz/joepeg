{
  "address": "0x366B7DF361bF7fe5C9164B4CE26E1a1191E2D1c4",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerAsk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerBid",
          "type": "tuple"
        }
      ],
      "name": "canExecuteTakerAsk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "canExecuteTakerBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9aa70f91f5d01aa8acfcd9fa045c9ee77b0ea64cfe6bec87aeca15967f4057f",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0x366B7DF361bF7fe5C9164B4CE26E1a1191E2D1c4",
    "transactionIndex": 0,
    "gasUsed": "133579",
    "logsBloom": "0x
    "blockHash": "0xf4cd690a80f41e1afaea58286102ce0b3675574dc7554343a0e4d204ce3443ff",
    "transactionHash": "0xf9aa70f91f5d01aa8acfcd9fa045c9ee77b0ea64cfe6bec87aeca15967f4057f",
    "logs": [],
    "blockNumber": 8620801,
    "cumulativeGasUsed": "133579",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1f2df6fff78a7d04e1d58a9a2e894c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"canExecuteTakerAsk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"canExecuteTakerBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerBid\":\"maker bid order\",\"takerAsk\":\"taker ask order\"},\"returns\":{\"_0\":\"(whether strategy can be executed, tokenId to execute, amount of tokens to execute)\"}},\"canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"details\":\"It cannot execute but it is left for compatibility purposes with the interface.\",\"returns\":{\"_0\":\"(whether strategy can be executed, tokenId to execute, amount of tokens to execute)\"}}},\"title\":\"StrategyAnyItemFromCollectionForFixedPrice\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check whether a taker ask order can be executed against a maker bid\"},\"canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Check whether a taker bid order can be executed against a maker ask\"}},\"notice\":\"Strategy to send an order at a fixed price that can be matched by any tokenId for the collection.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyAnyItemFromCollectionForFixedPrice.sol\":\"StrategyAnyItemFromCollectionForFixedPrice\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StrategyAnyItemFromCollectionForFixedPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"./libraries/OrderTypes.sol\\\";\\nimport {IExecutionStrategy} from \\\"./interfaces/IExecutionStrategy.sol\\\";\\nimport {IProtocolFeeManager} from \\\"./interfaces/IProtocolFeeManager.sol\\\";\\n\\n/**\\n * @title StrategyAnyItemFromCollectionForFixedPrice\\n * @notice Strategy to send an order at a fixed price that can be\\n * matched by any tokenId for the collection.\\n */\\ncontract StrategyAnyItemFromCollectionForFixedPrice is IExecutionStrategy {\\n    /**\\n     * @notice Check whether a taker ask order can be executed against a maker bid\\n     * @param takerAsk taker ask order\\n     * @param makerBid maker bid order\\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\\n     */\\n    function canExecuteTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            ((makerBid.price == takerAsk.price) &&\\n                (makerBid.endTime >= block.timestamp) &&\\n                (makerBid.startTime <= block.timestamp)),\\n            takerAsk.tokenId,\\n            makerBid.amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Check whether a taker bid order can be executed against a maker ask\\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\\n     * @dev It cannot execute but it is left for compatibility purposes with the interface.\\n     */\\n    function canExecuteTakerBid(\\n        OrderTypes.TakerOrder calldata,\\n        OrderTypes.MakerOrder calldata\\n    )\\n        external\\n        pure\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (false, 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x69403f0afcb2ce73a6c26f3980475b3b700a8fc1326dacb63dd58d39ac523d24\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IExecutionStrategy {\\n    function canExecuteTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function canExecuteTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x82ccc1351e6257f2e532503aa5d600ca490a7e97082cb31f4e5537219b1cba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProtocolFeeManager {\\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee) external;\\n\\n    function setProtocolFeeForCollection(\\n        address _collection,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    function unsetProtocolFeeForCollection(address _collection) external;\\n\\n    function protocolFeeForCollection(address _collection)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function defaultProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c23934d4de891c89d2d799459704750c5d02970ab2476878bf7c5f459941f6a\",\"license\":\"MIT\"},\"contracts/libraries/OrderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the Joepeg exchange.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH =\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WAVAX)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf4455a33b288aced9cf2065be5051a7e370ef8b2a55e816e28f5e7f0d3a664c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610174806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063865781ca1461003b578063ad2390ac14610075575b600080fd5b6100546100493660046100ca565b600080809250925092565b60408051931515845260208401929092529082015260600160405180910390f35b6100546100833660046100ca565b6000806000846040013584606001351480156100a457504284610140013510155b80156100b557504284610120013511155b92505050606083013560a08301359250925092565b600080604083850312156100dd57600080fd5b823567ffffffffffffffff808211156100f557600080fd5b9084019060c0828703121561010957600080fd5b9092506020840135908082111561011f57600080fd5b508301610200818603121561013357600080fd5b80915050925092905056fea2646970667358221220567727f3df9fd0e225355a3fbd09160497150881af4d852a734da73876c473ce64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063865781ca1461003b578063ad2390ac14610075575b600080fd5b6100546100493660046100ca565b600080809250925092565b60408051931515845260208401929092529082015260600160405180910390f35b6100546100833660046100ca565b6000806000846040013584606001351480156100a457504284610140013510155b80156100b557504284610120013511155b92505050606083013560a08301359250925092565b600080604083850312156100dd57600080fd5b823567ffffffffffffffff808211156100f557600080fd5b9084019060c0828703121561010957600080fd5b9092506020840135908082111561011f57600080fd5b508301610200818603121561013357600080fd5b80915050925092905056fea2646970667358221220567727f3df9fd0e225355a3fbd09160497150881af4d852a734da73876c473ce64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerBid": "maker bid order",
          "takerAsk": "taker ask order"
        },
        "returns": {
          "_0": "(whether strategy can be executed, tokenId to execute, amount of tokens to execute)"
        }
      },
      "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "details": "It cannot execute but it is left for compatibility purposes with the interface.",
        "returns": {
          "_0": "(whether strategy can be executed, tokenId to execute, amount of tokens to execute)"
        }
      }
    },
    "title": "StrategyAnyItemFromCollectionForFixedPrice",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check whether a taker ask order can be executed against a maker bid"
      },
      "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Check whether a taker bid order can be executed against a maker ask"
      }
    },
    "notice": "Strategy to send an order at a fixed price that can be matched by any tokenId for the collection.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}