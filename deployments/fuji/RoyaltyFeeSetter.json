{
  "address": "0xf227E0880E4cD0Ca807a9A47FBf8FdaAB1c8AB31",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC2981",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "checkForCollectionSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "updateOwnerOfRoyaltyFeeRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ba633bbc12fc3b64d7631de74fde40f151ecd08162ff6407c7fe8cba12df097",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0xf227E0880E4cD0Ca807a9A47FBf8FdaAB1c8AB31",
    "transactionIndex": 0,
    "gasUsed": "982229",
    "logsBloom": "0x
    "blockHash": "0x1d97553a864f2ac3c636a4b99561f4e4f87710bbc57b6baf21c4ed4f55dc170a",
    "transactionHash": "0x7ba633bbc12fc3b64d7631de74fde40f151ecd08162ff6407c7fe8cba12df097",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8620886,
        "transactionHash": "0x7ba633bbc12fc3b64d7631de74fde40f151ecd08162ff6407c7fe8cba12df097",
        "address": "0xf227E0880E4cD0Ca807a9A47FBf8FdaAB1c8AB31",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c2d38178069757648fefb5440737c2ae1671f19d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1d97553a864f2ac3c636a4b99561f4e4f87710bbc57b6baf21c4ed4f55dc170a"
      }
    ],
    "blockNumber": 8620886,
    "cumulativeGasUsed": "982229",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd5888605FFab7A0f522f1A6Cd57FC35F5d5a7F00"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1f2df6fff78a7d04e1d58a9a2e894c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC2981\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"checkForCollectionSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwnerOfRoyaltyFeeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkForCollectionSetter(address)\":{\"params\":{\"collection\":\"collection address\"},\"returns\":{\"_0\":\"(whether there is a setter (address(0 if not)), Position 0: Royalty setter is set in the registry 1: ERC2981 and no setter 2: setter can be set using owner() 3: setter can be set using admin() 4: setter cannot be set, nor support for ERC2981\"}},\"constructor\":{\"params\":{\"_royaltyFeeRegistry\":\"address of the royalty fee registry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwnerOfRoyaltyFeeRegistry(address)\":{\"details\":\"Can be used for migration of this royalty fee setter contract\",\"params\":{\"_owner\":\"new owner address\"}},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"details\":\"Can only be called by contract owner (of this)\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)\":{\"details\":\"Only to be called if there is no setter address\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)\":{\"details\":\"Only to be called if there is no setter address\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)\":{\"details\":\"Only to be called if there msg.sender is the setter\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}}},\"title\":\"RoyaltyFeeSetter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkForCollectionSetter(address)\":{\"notice\":\"Check royalty info for collection\"},\"constructor\":{\"notice\":\"Constructor\"},\"updateOwnerOfRoyaltyFeeRegistry(address)\":{\"notice\":\"Update owner of royalty fee registry\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection if admin\"},\"updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection if owner\"},\"updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeSetter.sol\":\"RoyaltyFeeSetter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeSetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeSetter\\n * @notice Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\\n */\\ncontract RoyaltyFeeSetter is Ownable {\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    // ERC2981 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    address public immutable royaltyFeeRegistry;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeRegistry address of the royalty fee registry\\n     */\\n    constructor(address _royaltyFeeRegistry) {\\n        royaltyFeeRegistry = _royaltyFeeRegistry;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if admin\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(\\n            !IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981),\\n            \\\"Admin: Must not be ERC2981\\\"\\n        );\\n        require(\\n            msg.sender == IOwnable(collection).admin(),\\n            \\\"Admin: Not the admin\\\"\\n        );\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if owner\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfOwner(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(\\n            !IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981),\\n            \\\"Owner: Must not be ERC2981\\\"\\n        );\\n        require(\\n            msg.sender == IOwnable(collection).owner(),\\n            \\\"Owner: Not the owner\\\"\\n        );\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Only to be called if there msg.sender is the setter\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfSetter(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n        require(msg.sender == currentSetter, \\\"Setter: Not the setter\\\");\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Can only be called by contract owner (of this)\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external onlyOwner {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update owner of royalty fee registry\\n     * @dev Can be used for migration of this royalty fee setter contract\\n     * @param _owner new owner address\\n     */\\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner)\\n        external\\n        onlyOwner\\n    {\\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        onlyOwner\\n    {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(\\n            _royaltyFeeLimit\\n        );\\n    }\\n\\n    /**\\n     * @notice Check royalty info for collection\\n     * @param collection collection address\\n     * @return (whether there is a setter (address(0 if not)),\\n     * Position\\n     * 0: Royalty setter is set in the registry\\n     * 1: ERC2981 and no setter\\n     * 2: setter can be set using owner()\\n     * 3: setter can be set using admin()\\n     * 4: setter cannot be set, nor support for ERC2981\\n     */\\n    function checkForCollectionSetter(address collection)\\n        external\\n        view\\n        returns (address, uint8)\\n    {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n\\n        if (currentSetter != address(0)) {\\n            return (currentSetter, 0);\\n        }\\n\\n        try\\n            IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)\\n        returns (bool interfaceSupport) {\\n            if (interfaceSupport) {\\n                return (address(0), 1);\\n            }\\n        } catch {}\\n\\n        try IOwnable(collection).owner() returns (address setter) {\\n            return (setter, 2);\\n        } catch {\\n            try IOwnable(collection).admin() returns (address setter) {\\n                return (setter, 3);\\n            } catch {\\n                return (address(0), 4);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update information and perform checks before updating royalty fee registry\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) internal {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n        require(currentSetter == address(0), \\\"Setter: Already set\\\");\\n\\n        require(\\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\\n            \\\"Setter: Not ERC721/ERC1155\\\"\\n        );\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb990224102399b619d40c7c6fd869c6abb14dd6b74c56e73e85f3ba560a3140f\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function admin() external view returns (address);\\n}\\n\",\"keccak256\":\"0x18db62f701321954e63206b2ed92cf07a762720b7563514fdb68cc4f5af2f52c\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x26ee0d6a50c317b22494ad09ff62d8469b24a51252be563dfb63512ff377c41d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161117538038061117583398101604081905261002f9161009d565b6100383361004d565b60601b6001600160601b0319166080526100cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100af57600080fd5b81516001600160a01b03811681146100c657600080fd5b9392505050565b60805160601c61105961011c600039600081816101c2015281816102600152818161036d0152818161078801528181610850015281816108d801528181610b520152610c3e01526110596000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b9223c9d1161008c578063c16f515611610066578063c16f5156146101bd578063c54e5497146101e4578063e72ba45614610218578063f2fde38b1461022b57600080fd5b8063b9223c9d14610189578063bbdf9b681461019c578063bc6bc0cd146101af57600080fd5b8063715018a6116100c8578063715018a61461013b5780638da5cb5b14610143578063ab01667014610168578063b060dd861461017b57600080fd5b8063275da5ef146100ef57806333bf6156146101045780633755fa8014610128575b600080fd5b6101026100fd366004610ef5565b61023e565b005b610112636cdb3d1360e11b81565b60405161011f9190610fc4565b60405180910390f35b610102610136366004610ef5565b6103d0565b61010261057a565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161011f565b610102610176366004610ef5565b6105b0565b61011263152a902d60e11b81565b610102610197366004610fab565b610748565b6101026101aa366004610ef5565b6107f0565b6101126380ac58cd60e01b81565b6101507f000000000000000000000000000000000000000000000000000000000000000081565b6101f76101f2366004610eb4565b6108b2565b604080516001600160a01b03909316835260ff90911660208301520161011f565b610102610226366004610eb4565b610b09565b610102610239366004610eb4565b610b81565b6040516338c7be4760e21b81526001600160a01b0385811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e31ef91c9060240160606040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610f46565b5090915050336001600160a01b038216146103375760405162461bcd60e51b815260206004820152601660248201527529b2ba3a32b91d102737ba103a34329039b2ba3a32b960511b60448201526064015b60405180910390fd5b60405163177bf36d60e31b81526001600160a01b03868116600483015285811660248301528481166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063bbdf9b6890608401600060405180830381600087803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b505050505050505050565b6040516301ffc9a760e01b81526001600160a01b038516906301ffc9a7906104039063152a902d60e11b90600401610fc4565b60206040518083038186803b15801561041b57600080fd5b505afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104539190610f89565b156104a05760405162461bcd60e51b815260206004820152601a60248201527f4f776e65723a204d757374206e6f742062652045524332393831000000000000604482015260640161032e565b836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d957600080fd5b505afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190610ed8565b6001600160a01b0316336001600160a01b0316146105685760405162461bcd60e51b815260206004820152601460248201527327bbb732b91d102737ba103a34329037bbb732b960611b604482015260640161032e565b61057484848484610c1c565b50505050565b6000546001600160a01b031633146105a45760405162461bcd60e51b815260040161032e90610fd9565b6105ae6000610e64565b565b6040516301ffc9a760e01b81526001600160a01b038516906301ffc9a7906105e39063152a902d60e11b90600401610fc4565b60206040518083038186803b1580156105fb57600080fd5b505afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106339190610f89565b156106805760405162461bcd60e51b815260206004820152601a60248201527f41646d696e3a204d757374206e6f742062652045524332393831000000000000604482015260640161032e565b836001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b957600080fd5b505afa1580156106cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f19190610ed8565b6001600160a01b0316336001600160a01b0316146105685760405162461bcd60e51b815260206004820152601460248201527320b236b4b71d102737ba103a34329030b236b4b760611b604482015260640161032e565b6000546001600160a01b031633146107725760405162461bcd60e51b815260040161032e90610fd9565b60405163b9223c9d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b9223c9d906024015b600060405180830381600087803b1580156107d557600080fd5b505af11580156107e9573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461081a5760405162461bcd60e51b815260040161032e90610fd9565b60405163177bf36d60e31b81526001600160a01b03858116600483015284811660248301528381166044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063bbdf9b6890608401600060405180830381600087803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b5050505050505050565b6040516338c7be4760e21b81526001600160a01b038281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e31ef91c9060240160606040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190610f46565b50909150506001600160a01b03811615610972579360009350915050565b6040516301ffc9a760e01b81526001600160a01b038516906301ffc9a7906109a59063152a902d60e11b90600401610fc4565b60206040518083038186803b1580156109bd57600080fd5b505afa9250505080156109ed575060408051601f3d908101601f191682019092526109ea91810190610f89565b60015b6109f657610a0c565b8015610a0a57506000946001945092505050565b505b836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4557600080fd5b505afa925050508015610a75575060408051601f3d908101601f19168201909252610a7291810190610ed8565b60015b610afe57836001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab257600080fd5b505afa925050508015610ae2575060408051601f3d908101601f19168201909252610adf91810190610ed8565b60015b610af3575060009360049350915050565b946003945092505050565b946002945092505050565b6000546001600160a01b03163314610b335760405162461bcd60e51b815260040161032e90610fd9565b60405163f2fde38b60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f2fde38b906024016107bb565b6000546001600160a01b03163314610bab5760405162461bcd60e51b815260040161032e90610fd9565b6001600160a01b038116610c105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032e565b610c1981610e64565b50565b6040516338c7be4760e21b81526001600160a01b0385811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e31ef91c9060240160606040518083038186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190610f46565b50909150506001600160a01b03811615610d0c5760405162461bcd60e51b815260206004820152601360248201527214d95d1d195c8e88105b1c9958591e481cd95d606a1b604482015260640161032e565b6040516301ffc9a760e01b81526001600160a01b038616906301ffc9a790610d3f906380ac58cd60e01b90600401610fc4565b60206040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190610f89565b80610e1857506040516301ffc9a760e01b81526001600160a01b038616906301ffc9a790610dc890636cdb3d1360e11b90600401610fc4565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190610f89565b6103375760405162461bcd60e51b815260206004820152601a60248201527f5365747465723a204e6f74204552433732312f45524331313535000000000000604482015260640161032e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610ec657600080fd5b8135610ed18161100e565b9392505050565b600060208284031215610eea57600080fd5b8151610ed18161100e565b60008060008060808587031215610f0b57600080fd5b8435610f168161100e565b93506020850135610f268161100e565b92506040850135610f368161100e565b9396929550929360600135925050565b600080600060608486031215610f5b57600080fd5b8351610f668161100e565b6020850151909350610f778161100e565b80925050604084015190509250925092565b600060208284031215610f9b57600080fd5b81518015158114610ed157600080fd5b600060208284031215610fbd57600080fd5b5035919050565b6001600160e01b031991909116815260200190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0381168114610c1957600080fdfea2646970667358221220f7b77a880ffd731407dd8e84f83635e43d23f94c794a729b9b69bac9a513fc1364736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkForCollectionSetter(address)": {
        "params": {
          "collection": "collection address"
        },
        "returns": {
          "_0": "(whether there is a setter (address(0 if not)), Position 0: Royalty setter is set in the registry 1: ERC2981 and no setter 2: setter can be set using owner() 3: setter can be set using admin() 4: setter cannot be set, nor support for ERC2981"
        }
      },
      "constructor": {
        "params": {
          "_royaltyFeeRegistry": "address of the royalty fee registry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwnerOfRoyaltyFeeRegistry(address)": {
        "details": "Can be used for migration of this royalty fee setter contract",
        "params": {
          "_owner": "new owner address"
        }
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "details": "Can only be called by contract owner (of this)",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)": {
        "details": "Only to be called if there is no setter address",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)": {
        "details": "Only to be called if there is no setter address",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)": {
        "details": "Only to be called if there msg.sender is the setter",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      }
    },
    "title": "RoyaltyFeeSetter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkForCollectionSetter(address)": {
        "notice": "Check royalty info for collection"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "updateOwnerOfRoyaltyFeeRegistry(address)": {
        "notice": "Update owner of royalty fee registry"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)": {
        "notice": "Update royalty info for collection if admin"
      },
      "updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)": {
        "notice": "Update royalty info for collection if owner"
      },
      "updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}