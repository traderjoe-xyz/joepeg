{
  "address": "0xf70B9A0B9B02e4733D5db5b6c2F7905F21191498",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wavax",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__AuctionAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__CurrencyMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__DutchAuctionCreatorCannotSettle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__ExpectedNonNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__FeesHigherThanExpected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__InvalidMinPercentageToAsk",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__NoAuctionExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__OnlyAuctionCreatorCanCancel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__UnsupportedCurrency",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCurrencyManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCurrencyManager",
          "type": "address"
        }
      ],
      "name": "CurrencyManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "DutchAuctionCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "DutchAuctionSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dropInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "DutchAuctionStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldEnglishAuctionMinBidIncrementPct",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEnglishAuctionMinBidIncrementPct",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionMinBidIncrementPctSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "endTimeExtension",
          "type": "uint96"
        }
      ],
      "name": "EnglishAuctionPlaceBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "oldEnglishAuctionRefreshTime",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "newEnglishAuctionRefreshTime",
          "type": "uint96"
        }
      ],
      "name": "EnglishAuctionRefreshTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProtocolFeeManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newProtocolFeeManager",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProtocolFeeRecipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newProtocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldRoyaltyFeeManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "RoyaltyFeeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyManager",
      "outputs": [
        {
          "internalType": "contract ICurrencyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dutchAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dropInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "emergencyCancelDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "emergencyCancelEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionMinBidIncrementPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionRefreshTime",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "englishAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lastBidder",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBidPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDutchAuctionSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_englishAuctionMinBidIncrementPct",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_englishAuctionRefreshTime",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "placeEnglishAuctionBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wavaxAmount",
          "type": "uint256"
        }
      ],
      "name": "placeEnglishAuctionBidWithAVAXAndWAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeManager",
      "outputs": [
        {
          "internalType": "contract IProtocolFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleDutchAuctionWithAVAXAndWAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_duration",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_dropInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "startDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_duration",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "startEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        }
      ],
      "name": "updateCurrencyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_englishAuctionMinBidIncrementPct",
          "type": "uint256"
        }
      ],
      "name": "updateEnglishAuctionMinBidIncrementPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_englishAuctionRefreshTime",
          "type": "uint96"
        }
      ],
      "name": "updateEnglishAuctionRefreshTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeManager",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLatestAuctionNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x45cacb8099f3d693f09ee4cafb7f17aaa5f60b5f217bec14d6a269a49a44b144",
  "receipt": {
    "to": null,
    "from": "0x1D09E2D88e6E79eD9467C25316c8376c91AE64A4",
    "contractAddress": "0xf70B9A0B9B02e4733D5db5b6c2F7905F21191498",
    "transactionIndex": 0,
    "gasUsed": "3441760",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x55da94d99aec539ce27e5a44349d8d1ee7d8c171d24626003313e69f23c32bcd",
    "transactionHash": "0x45cacb8099f3d693f09ee4cafb7f17aaa5f60b5f217bec14d6a269a49a44b144",
    "logs": [],
    "blockNumber": 12561314,
    "cumulativeGasUsed": "3441760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd00ae08403B9bbb9124bB305C09058E32C39A48c"
  ],
  "numDeployments": 1,
  "solcInputHash": "c71e8ea5edefafb940a8a0a1dd53e90f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__AuctionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__CurrencyMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__DutchAuctionCreatorCannotSettle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__ExpectedNonNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__FeesHigherThanExpected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__InvalidMinPercentageToAsk\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__NoAuctionExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__OnlyAuctionCreatorCanCancel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__UnsupportedCurrency\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCurrencyManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCurrencyManager\",\"type\":\"address\"}],\"name\":\"CurrencyManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldEnglishAuctionMinBidIncrementPct\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEnglishAuctionMinBidIncrementPct\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionMinBidIncrementPctSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"endTimeExtension\",\"type\":\"uint96\"}],\"name\":\"EnglishAuctionPlaceBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"oldEnglishAuctionRefreshTime\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"newEnglishAuctionRefreshTime\",\"type\":\"uint96\"}],\"name\":\"EnglishAuctionRefreshTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProtocolFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolFeeManager\",\"type\":\"address\"}],\"name\":\"ProtocolFeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProtocolFeeRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRoyaltyFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyFeeManager\",\"type\":\"address\"}],\"name\":\"RoyaltyFeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dutchAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyCancelDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyCancelEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionMinBidIncrementPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionRefreshTime\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"englishAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastBidder\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDutchAuctionSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_englishAuctionMinBidIncrementPct\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_englishAuctionRefreshTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeEnglishAuctionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wavaxAmount\",\"type\":\"uint256\"}],\"name\":\"placeEnglishAuctionBidWithAVAXAndWAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeManager\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleDutchAuctionWithAVAXAndWAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_duration\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_dropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"startDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_duration\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"startEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_englishAuctionMinBidIncrementPct\",\"type\":\"uint256\"}],\"name\":\"updateEnglishAuctionMinBidIncrementPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_englishAuctionRefreshTime\",\"type\":\"uint96\"}],\"name\":\"updateEnglishAuctionRefreshTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeManager\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLatestAuctionNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelDutchAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"cancelEnglishAuction(address,uint256)\":{\"details\":\"Note: - Can only be called by auction creator - Can only be cancelled if no bids have been placed\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"constructor\":{\"params\":{\"_wavax\":\"address of WAVAX\"}},\"emergencyCancelDutchAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"emergencyCancelEnglishAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"getDutchAuctionSalePrice(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"},\"returns\":{\"_0\":\"current Dutch Auction sale price for specified ERC721 token\"}},\"initialize(uint256,uint96,address,address,address,address)\":{\"params\":{\"_currencyManager\":\"currency manager address\",\"_englishAuctionMinBidIncrementPct\":\"minimum bid increment percentage for English Auctions\",\"_englishAuctionRefreshTime\":\"refresh time for English auctions\",\"_protocolFeeManager\":\"protocol fee manager address\",\"_protocolFeeRecipient\":\"protocol fee recipient\",\"_royaltyFeeManager\":\"royalty fee manager address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only callable by owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"placeEnglishAuctionBid(address,uint256,uint256)\":{\"params\":{\"_amount\":\"amount of currency to bid\",\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\",\"_wavaxAmount\":\"amount of WAVAX to bid\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"settleDutchAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"settleDutchAuctionWithAVAXAndWAVAX(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"settleEnglishAuction(address,uint256)\":{\"details\":\"Note: - Can be called by creator at any time (including before the auction's end time to accept the   current latest bid) - Can be called by anyone after the auction ends - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient - Transfers ERC721 token to last highest bidder\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)\":{\"details\":\"Note: - Requires the auction house to hold the ERC721 token in escrow - Drops in price every `dutchAuctionDropInterval` seconds in equal   amounts\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_currency\":\"address of currency to sell ERC721 token for\",\"_dropInterval\":\"number of seconds between each drop in price\",\"_duration\":\"number of seconds for Dutch Auction to run\",\"_endPrice\":\"ending sell price\",\"_minPercentageToAsk\":\"minimum percentage of the gross amount that goes to ask\",\"_startPrice\":\"starting sell price\",\"_tokenId\":\"token id of ERC721 token\"}},\"startEnglishAuction(address,uint256,address,uint96,uint256,uint256)\":{\"details\":\"Note this requires the auction house to hold the ERC721 token in escrow\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_currency\":\"address of currency to sell ERC721 token for\",\"_duration\":\"number of seconds for English Auction to run\",\"_minPercentageToAsk\":\"minimum percentage of the gross amount that goes to ask\",\"_startPrice\":\"minimum starting bid price\",\"_tokenId\":\"token id of ERC721 token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only callable by owner\"},\"updateCurrencyManager(address)\":{\"params\":{\"_currencyManager\":\"new currency manager address\"}},\"updateEnglishAuctionMinBidIncrementPct(uint256)\":{\"params\":{\"_englishAuctionMinBidIncrementPct\":\"new minimum bid increment percetange for English auctions\"}},\"updateEnglishAuctionRefreshTime(uint96)\":{\"params\":{\"_englishAuctionRefreshTime\":\"new refresh time for English auctions\"}},\"updateProtocolFeeManager(address)\":{\"params\":{\"_protocolFeeManager\":\"new protocol fee manager address\"}},\"updateProtocolFeeRecipient(address)\":{\"params\":{\"_protocolFeeRecipient\":\"new recipient for protocol fees\"}},\"updateRoyaltyFeeManager(address)\":{\"params\":{\"_royaltyFeeManager\":\"new fee manager address\"}}},\"stateVariables\":{\"dutchAuctions\":{\"details\":\"(collection address => token id => dutch auction)\"},\"englishAuctions\":{\"details\":\"(collection address => token id => english auction)\"},\"userLatestAuctionNonce\":{\"details\":\"(user address => latest nonce)\"}},\"title\":\"JoepegAuctionHouse\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelDutchAuction(address,uint256)\":{\"notice\":\"Cancels a running Dutch Auction\"},\"cancelEnglishAuction(address,uint256)\":{\"notice\":\"Cancels an English Auction\"},\"constructor\":{\"notice\":\"Constructor\"},\"dutchAuctions(address,uint256)\":{\"notice\":\"Stores Dutch Auction data for NFTs\"},\"emergencyCancelDutchAuction(address,uint256)\":{\"notice\":\"Only owner function to cancel a Dutch Auction in case of emergencies\"},\"emergencyCancelEnglishAuction(address,uint256)\":{\"notice\":\"Only owner function to cancel an English Auction in case of emergencies\"},\"englishAuctionMinBidIncrementPct()\":{\"notice\":\"Required minimum percent increase from last bid in order to place a new bid on an English Auction\"},\"englishAuctionRefreshTime()\":{\"notice\":\"Represents both: - Number of seconds before an English Auction ends where any new   bid will extend the auction's end time - Number of seconds to extend an English Auction's end time by\"},\"englishAuctions(address,uint256)\":{\"notice\":\"Stores English Auction data for NFTs\"},\"getDutchAuctionSalePrice(address,uint256)\":{\"notice\":\"Calculates current Dutch Auction sale price for an ERC721 token\"},\"initialize(uint256,uint96,address,address,address,address)\":{\"notice\":\"Initializer\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Required implementation for IERC721Receiver\"},\"pause()\":{\"notice\":\"Function to pause the contract\"},\"placeEnglishAuctionBid(address,uint256,uint256)\":{\"notice\":\"Place bid on a running English Auction\"},\"placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)\":{\"notice\":\"Place bid on a running English Auction using AVAX and/or WAVAX\"},\"settleDutchAuction(address,uint256)\":{\"notice\":\"Settles a Dutch Auction\"},\"settleDutchAuctionWithAVAXAndWAVAX(address,uint256)\":{\"notice\":\"Settles a Dutch Auction with AVAX and/or WAVAX\"},\"settleEnglishAuction(address,uint256)\":{\"notice\":\"Settles an English Auction\"},\"startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)\":{\"notice\":\"Starts a Dutch Auction for an ERC721 token\"},\"startEnglishAuction(address,uint256,address,uint96,uint256,uint256)\":{\"notice\":\"Starts an English Auction for an ERC721 token\"},\"unpause()\":{\"notice\":\"Function to unpause the contract\"},\"updateCurrencyManager(address)\":{\"notice\":\"Update currency manager\"},\"updateEnglishAuctionMinBidIncrementPct(uint256)\":{\"notice\":\"Update `englishAuctionMinBidIncrementPct`\"},\"updateEnglishAuctionRefreshTime(uint96)\":{\"notice\":\"Update `englishAuctionRefreshTime`\"},\"updateProtocolFeeManager(address)\":{\"notice\":\"Update protocol fee manager\"},\"updateProtocolFeeRecipient(address)\":{\"notice\":\"Update protocol fee recipient\"},\"updateRoyaltyFeeManager(address)\":{\"notice\":\"Update royalty fee manager\"},\"userLatestAuctionNonce(address)\":{\"notice\":\"Stores latest auction nonce per user\"}},\"notice\":\"An auction house that supports running English and Dutch auctions on ERC721 tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JoepegAuctionHouse.sol\":\"JoepegAuctionHouse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/JoepegAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport {IProtocolFeeManager} from \\\"./interfaces/IProtocolFeeManager.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {IWAVAX} from \\\"./interfaces/IWAVAX.sol\\\";\\n\\nerror JoepegAuctionHouse__AuctionAlreadyExists();\\nerror JoepegAuctionHouse__CurrencyMismatch();\\nerror JoepegAuctionHouse__ExpectedNonNullAddress();\\nerror JoepegAuctionHouse__ExpectedNonZeroFinalSellerAmount();\\nerror JoepegAuctionHouse__FeesHigherThanExpected();\\nerror JoepegAuctionHouse__InvalidDuration();\\nerror JoepegAuctionHouse__InvalidMinPercentageToAsk();\\nerror JoepegAuctionHouse__NoAuctionExists();\\nerror JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\nerror JoepegAuctionHouse__UnsupportedCurrency();\\n\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid();\\nerror JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid();\\nerror JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime();\\nerror JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime();\\n\\nerror JoepegAuctionHouse__DutchAuctionCreatorCannotSettle();\\nerror JoepegAuctionHouse__DutchAuctionInsufficientAmountToSettle();\\nerror JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice();\\n\\n/**\\n * @title JoepegAuctionHouse\\n * @notice An auction house that supports running English and Dutch auctions on ERC721 tokens\\n */\\ncontract JoepegAuctionHouse is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IERC721Receiver\\n{\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct DutchAuction {\\n        address creator;\\n        uint96 startTime;\\n        address currency;\\n        uint96 endTime;\\n        uint256 nonce;\\n        uint256 startPrice;\\n        uint256 endPrice;\\n        uint256 dropInterval;\\n        uint256 minPercentageToAsk;\\n    }\\n\\n    struct EnglishAuction {\\n        address creator;\\n        address currency;\\n        address lastBidder;\\n        uint96 endTime;\\n        uint256 nonce;\\n        uint256 lastBidPrice;\\n        uint256 startPrice;\\n        uint256 minPercentageToAsk;\\n    }\\n\\n    uint256 public constant PERCENTAGE_PRECISION = 10000;\\n\\n    address public immutable WAVAX;\\n\\n    ICurrencyManager public currencyManager;\\n    IProtocolFeeManager public protocolFeeManager;\\n    IRoyaltyFeeManager public royaltyFeeManager;\\n\\n    address public protocolFeeRecipient;\\n\\n    /// @notice Stores latest auction nonce per user\\n    /// @dev (user address => latest nonce)\\n    mapping(address => uint256) public userLatestAuctionNonce;\\n\\n    /// @notice Stores Dutch Auction data for NFTs\\n    /// @dev (collection address => token id => dutch auction)\\n    mapping(address => mapping(uint256 => DutchAuction)) public dutchAuctions;\\n\\n    /// @notice Stores English Auction data for NFTs\\n    /// @dev (collection address => token id => english auction)\\n    mapping(address => mapping(uint256 => EnglishAuction))\\n        public englishAuctions;\\n\\n    /// @notice Required minimum percent increase from last bid in order to\\n    /// place a new bid on an English Auction\\n    uint256 public englishAuctionMinBidIncrementPct;\\n\\n    /// @notice Represents both:\\n    /// - Number of seconds before an English Auction ends where any new\\n    ///   bid will extend the auction's end time\\n    /// - Number of seconds to extend an English Auction's end time by\\n    uint96 public englishAuctionRefreshTime;\\n\\n    event DutchAuctionStart(\\n        address indexed creator,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 startPrice,\\n        uint256 endPrice,\\n        uint96 startTime,\\n        uint96 endTime,\\n        uint256 dropInterval,\\n        uint256 minPercentageToAsk\\n    );\\n    event DutchAuctionSettle(\\n        address indexed creator,\\n        address buyer,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 price\\n    );\\n    event DutchAuctionCancel(\\n        address indexed caller,\\n        address creator,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce\\n    );\\n\\n    event EnglishAuctionStart(\\n        address indexed creator,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 startPrice,\\n        uint96 startTime,\\n        uint96 endTime,\\n        uint256 minPercentageToAsk\\n    );\\n    event EnglishAuctionPlaceBid(\\n        address indexed creator,\\n        address bidder,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 bidAmount,\\n        uint96 endTimeExtension\\n    );\\n    event EnglishAuctionSettle(\\n        address indexed creator,\\n        address buyer,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 price\\n    );\\n    event EnglishAuctionCancel(\\n        address indexed caller,\\n        address creator,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce\\n    );\\n\\n    event CurrencyManagerSet(\\n        address indexed oldCurrencyManager,\\n        address indexed newCurrencyManager\\n    );\\n    event EnglishAuctionMinBidIncrementPctSet(\\n        uint256 indexed oldEnglishAuctionMinBidIncrementPct,\\n        uint256 indexed newEnglishAuctionMinBidIncrementPct\\n    );\\n    event EnglishAuctionRefreshTimeSet(\\n        uint96 indexed oldEnglishAuctionRefreshTime,\\n        uint96 indexed newEnglishAuctionRefreshTime\\n    );\\n    event ProtocolFeeManagerSet(\\n        address indexed oldProtocolFeeManager,\\n        address indexed newProtocolFeeManager\\n    );\\n    event ProtocolFeeRecipientSet(\\n        address indexed oldProtocolFeeRecipient,\\n        address indexed newProtocolFeeRecipient\\n    );\\n    event RoyaltyFeeManagerSet(\\n        address indexed oldRoyaltyFeeManager,\\n        address indexed newRoyaltyFeeManager\\n    );\\n\\n    event RoyaltyPayment(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        address indexed royaltyRecipient,\\n        address currency,\\n        uint256 amount\\n    );\\n\\n    modifier isSupportedCurrency(IERC20 _currency) {\\n        if (!currencyManager.isCurrencyWhitelisted(address(_currency))) {\\n            revert JoepegAuctionHouse__UnsupportedCurrency();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    modifier isValidMinPercentageToAsk(uint256 _minPercentageToAsk) {\\n        if (\\n            _minPercentageToAsk == 0 ||\\n            _minPercentageToAsk > PERCENTAGE_PRECISION\\n        ) {\\n            revert JoepegAuctionHouse__InvalidMinPercentageToAsk();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    ///  @notice Constructor\\n    ///  @param _wavax address of WAVAX\\n    constructor(address _wavax) {\\n        WAVAX = _wavax;\\n    }\\n\\n    ///  @notice Initializer\\n    ///  @param _englishAuctionMinBidIncrementPct minimum bid increment percentage for English Auctions\\n    ///  @param _englishAuctionRefreshTime refresh time for English auctions\\n    ///  @param _currencyManager currency manager address\\n    ///  @param _protocolFeeManager protocol fee manager address\\n    ///  @param _royaltyFeeManager royalty fee manager address\\n    ///  @param _protocolFeeRecipient protocol fee recipient\\n    function initialize(\\n        uint256 _englishAuctionMinBidIncrementPct,\\n        uint96 _englishAuctionRefreshTime,\\n        address _currencyManager,\\n        address _protocolFeeManager,\\n        address _royaltyFeeManager,\\n        address _protocolFeeRecipient\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _updateEnglishAuctionMinBidIncrementPct(\\n            _englishAuctionMinBidIncrementPct\\n        );\\n        _updateEnglishAuctionRefreshTime(_englishAuctionRefreshTime);\\n        _updateCurrencyManager(_currencyManager);\\n        _updateProtocolFeeManager(_protocolFeeManager);\\n        _updateRoyaltyFeeManager(_royaltyFeeManager);\\n        _updateProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /// @notice Required implementation for IERC721Receiver\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Starts an English Auction for an ERC721 token\\n    /// @dev Note this requires the auction house to hold the ERC721 token in escrow\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of currency to sell ERC721 token for\\n    /// @param _duration number of seconds for English Auction to run\\n    /// @param _startPrice minimum starting bid price\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function startEnglishAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _duration,\\n        uint256 _startPrice,\\n        uint256 _minPercentageToAsk\\n    )\\n        external\\n        whenNotPaused\\n        isSupportedCurrency(_currency)\\n        isValidMinPercentageToAsk(_minPercentageToAsk)\\n        nonReentrant\\n    {\\n        if (_duration == 0) {\\n            revert JoepegAuctionHouse__InvalidDuration();\\n        }\\n        address collectionAddress = address(_collection);\\n        if (\\n            englishAuctions[collectionAddress][_tokenId].creator != address(0)\\n        ) {\\n            revert JoepegAuctionHouse__AuctionAlreadyExists();\\n        }\\n\\n        uint256 nonce = userLatestAuctionNonce[msg.sender];\\n        uint96 timestamp = block.timestamp.toUint96();\\n        EnglishAuction memory auction = EnglishAuction({\\n            creator: msg.sender,\\n            nonce: nonce,\\n            currency: address(_currency),\\n            lastBidder: address(0),\\n            lastBidPrice: 0,\\n            endTime: timestamp + _duration,\\n            startPrice: _startPrice,\\n            minPercentageToAsk: _minPercentageToAsk\\n        });\\n        englishAuctions[collectionAddress][_tokenId] = auction;\\n        userLatestAuctionNonce[msg.sender] = nonce + 1;\\n\\n        // Hold ERC721 token in escrow\\n        _collection.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit EnglishAuctionStart(\\n            auction.creator,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.startPrice,\\n            timestamp,\\n            auction.endTime,\\n            auction.minPercentageToAsk\\n        );\\n    }\\n\\n    /// @notice Place bid on a running English Auction\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _amount amount of currency to bid\\n    function placeEnglishAuctionBid(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external whenNotPaused nonReentrant {\\n        EnglishAuction memory auction = englishAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        address currency = auction.currency;\\n        if (currency == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n\\n        IERC20(currency).safeTransferFrom(msg.sender, address(this), _amount);\\n        _placeEnglishAuctionBid(_collection, _tokenId, _amount, auction);\\n    }\\n\\n    /// @notice Place bid on a running English Auction using AVAX and/or WAVAX\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _wavaxAmount amount of WAVAX to bid\\n    function placeEnglishAuctionBidWithAVAXAndWAVAX(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        uint256 _wavaxAmount\\n    ) external payable whenNotPaused nonReentrant {\\n        EnglishAuction memory auction = englishAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        address currency = auction.currency;\\n        if (currency != WAVAX) {\\n            revert JoepegAuctionHouse__CurrencyMismatch();\\n        }\\n\\n        if (msg.value > 0) {\\n            // Wrap AVAX into WAVAX\\n            IWAVAX(WAVAX).deposit{value: msg.value}();\\n        }\\n        if (_wavaxAmount > 0) {\\n            IERC20(WAVAX).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _wavaxAmount\\n            );\\n        }\\n        _placeEnglishAuctionBid(\\n            _collection,\\n            _tokenId,\\n            msg.value + _wavaxAmount,\\n            auction\\n        );\\n    }\\n\\n    /// @notice Settles an English Auction\\n    /// @dev Note:\\n    /// - Can be called by creator at any time (including before the auction's end time to accept the\\n    ///   current latest bid)\\n    /// - Can be called by anyone after the auction ends\\n    /// - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient\\n    /// - Transfers ERC721 token to last highest bidder\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function settleEnglishAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address collectionAddress = address(_collection);\\n        EnglishAuction memory auction = englishAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n        if (auction.lastBidPrice == 0) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid();\\n        }\\n        if (\\n            msg.sender != auction.creator && block.timestamp < auction.endTime\\n        ) {\\n            revert JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime();\\n        }\\n\\n        delete englishAuctions[collectionAddress][_tokenId];\\n\\n        // Settle auction using latest bid\\n        _transferFeesAndFunds(\\n            collectionAddress,\\n            _tokenId,\\n            IERC20(auction.currency),\\n            address(this),\\n            auction.creator,\\n            auction.lastBidPrice,\\n            auction.minPercentageToAsk\\n        );\\n\\n        _collection.safeTransferFrom(\\n            address(this),\\n            auction.lastBidder,\\n            _tokenId\\n        );\\n\\n        emit EnglishAuctionSettle(\\n            auction.creator,\\n            auction.lastBidder,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.lastBidPrice\\n        );\\n    }\\n\\n    /// @notice Cancels an English Auction\\n    /// @dev Note:\\n    /// - Can only be called by auction creator\\n    /// - Can only be cancelled if no bids have been placed\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function cancelEnglishAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address collectionAddress = address(_collection);\\n        EnglishAuction memory auction = englishAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (msg.sender != auction.creator) {\\n            revert JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\n        }\\n        if (auction.lastBidder != address(0)) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid();\\n        }\\n\\n        delete englishAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        emit EnglishAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Only owner function to cancel an English Auction in case of emergencies\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function emergencyCancelEnglishAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId\\n    ) external nonReentrant onlyOwner {\\n        address collectionAddress = address(_collection);\\n        EnglishAuction memory auction = englishAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n\\n        address lastBidder = auction.lastBidder;\\n        uint256 lastBidPrice = auction.lastBidPrice;\\n\\n        delete englishAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        if (lastBidPrice > 0) {\\n            IERC20(auction.currency).safeTransfer(lastBidder, lastBidPrice);\\n        }\\n\\n        emit EnglishAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Starts a Dutch Auction for an ERC721 token\\n    /// @dev Note:\\n    /// - Requires the auction house to hold the ERC721 token in escrow\\n    /// - Drops in price every `dutchAuctionDropInterval` seconds in equal\\n    ///   amounts\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of currency to sell ERC721 token for\\n    /// @param _duration number of seconds for Dutch Auction to run\\n    /// @param _dropInterval number of seconds between each drop in price\\n    /// @param _startPrice starting sell price\\n    /// @param _endPrice ending sell price\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function startDutchAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _duration,\\n        uint256 _dropInterval,\\n        uint256 _startPrice,\\n        uint256 _endPrice,\\n        uint256 _minPercentageToAsk\\n    )\\n        external\\n        whenNotPaused\\n        isSupportedCurrency(_currency)\\n        isValidMinPercentageToAsk(_minPercentageToAsk)\\n        nonReentrant\\n    {\\n        if (_duration == 0 || _duration < _dropInterval) {\\n            revert JoepegAuctionHouse__InvalidDuration();\\n        }\\n        address collectionAddress = address(_collection);\\n        if (dutchAuctions[collectionAddress][_tokenId].creator != address(0)) {\\n            revert JoepegAuctionHouse__AuctionAlreadyExists();\\n        }\\n        if (_startPrice <= _endPrice || _endPrice == 0) {\\n            revert JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice();\\n        }\\n\\n        uint96 timestamp = block.timestamp.toUint96();\\n        DutchAuction memory auction = DutchAuction({\\n            creator: msg.sender,\\n            nonce: userLatestAuctionNonce[msg.sender],\\n            currency: address(_currency),\\n            startPrice: _startPrice,\\n            endPrice: _endPrice,\\n            startTime: timestamp,\\n            endTime: timestamp + _duration,\\n            dropInterval: _dropInterval,\\n            minPercentageToAsk: _minPercentageToAsk\\n        });\\n        dutchAuctions[collectionAddress][_tokenId] = auction;\\n        userLatestAuctionNonce[msg.sender] += 1;\\n\\n        _collection.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit DutchAuctionStart(\\n            auction.creator,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.startPrice,\\n            auction.endPrice,\\n            auction.startTime,\\n            auction.endTime,\\n            auction.dropInterval,\\n            auction.minPercentageToAsk\\n        );\\n    }\\n\\n    /// @notice Settles a Dutch Auction\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function settleDutchAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        DutchAuction memory auction = dutchAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        _settleDutchAuction(_collection, _tokenId, auction);\\n    }\\n\\n    /// @notice Settles a Dutch Auction with AVAX and/or WAVAX\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function settleDutchAuctionWithAVAXAndWAVAX(\\n        IERC721 _collection,\\n        uint256 _tokenId\\n    ) external payable whenNotPaused nonReentrant {\\n        DutchAuction memory auction = dutchAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        address currency = auction.currency;\\n        if (currency != WAVAX) {\\n            revert JoepegAuctionHouse__CurrencyMismatch();\\n        }\\n\\n        _settleDutchAuction(_collection, _tokenId, auction);\\n    }\\n\\n    /// @notice Calculates current Dutch Auction sale price for an ERC721 token\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @return current Dutch Auction sale price for specified ERC721 token\\n    function getDutchAuctionSalePrice(address _collection, uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        DutchAuction memory auction = dutchAuctions[_collection][_tokenId];\\n        if (block.timestamp >= auction.endTime) {\\n            return auction.endPrice;\\n        }\\n        uint256 timeElapsed = block.timestamp - auction.startTime;\\n        uint256 elapsedSteps = timeElapsed / auction.dropInterval;\\n        uint256 totalPossibleSteps = (auction.endTime - auction.startTime) /\\n            auction.dropInterval;\\n\\n        uint256 priceDifference = auction.startPrice - auction.endPrice;\\n\\n        return\\n            auction.startPrice -\\n            (elapsedSteps * priceDifference) /\\n            totalPossibleSteps;\\n    }\\n\\n    /// @notice Cancels a running Dutch Auction\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function cancelDutchAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address collectionAddress = address(_collection);\\n        DutchAuction memory auction = dutchAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (msg.sender != auction.creator) {\\n            revert JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\n        }\\n\\n        delete dutchAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        emit DutchAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Only owner function to cancel a Dutch Auction in case of emergencies\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function emergencyCancelDutchAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        nonReentrant\\n        onlyOwner\\n    {\\n        address collectionAddress = address(_collection);\\n        DutchAuction memory auction = dutchAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n\\n        delete dutchAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        emit DutchAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    ///  @notice Function to pause the contract\\n    ///  @dev Only callable by owner\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Function to unpause the contract\\n    /// @dev Only callable by owner\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Update `englishAuctionMinBidIncrementPct`\\n    /// @param _englishAuctionMinBidIncrementPct new minimum bid increment percetange for English auctions\\n    function updateEnglishAuctionMinBidIncrementPct(\\n        uint256 _englishAuctionMinBidIncrementPct\\n    ) external onlyOwner {\\n        _updateEnglishAuctionMinBidIncrementPct(\\n            _englishAuctionMinBidIncrementPct\\n        );\\n    }\\n\\n    /// @notice Update `englishAuctionMinBidIncrementPct`\\n    /// @param _englishAuctionMinBidIncrementPct new minimum bid increment percetange for English auctions\\n    function _updateEnglishAuctionMinBidIncrementPct(\\n        uint256 _englishAuctionMinBidIncrementPct\\n    ) internal {\\n        if (\\n            _englishAuctionMinBidIncrementPct == 0 ||\\n            _englishAuctionMinBidIncrementPct > PERCENTAGE_PRECISION\\n        ) {\\n            revert JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct();\\n        }\\n\\n        uint256 oldEnglishAuctionMinBidIncrementPct = englishAuctionMinBidIncrementPct;\\n        englishAuctionMinBidIncrementPct = _englishAuctionMinBidIncrementPct;\\n        emit EnglishAuctionMinBidIncrementPctSet(\\n            oldEnglishAuctionMinBidIncrementPct,\\n            _englishAuctionMinBidIncrementPct\\n        );\\n    }\\n\\n    /// @notice Update `englishAuctionRefreshTime`\\n    /// @param _englishAuctionRefreshTime new refresh time for English auctions\\n    function updateEnglishAuctionRefreshTime(uint96 _englishAuctionRefreshTime)\\n        external\\n        onlyOwner\\n    {\\n        _updateEnglishAuctionRefreshTime(_englishAuctionRefreshTime);\\n    }\\n\\n    /// @notice Update `englishAuctionRefreshTime`\\n    /// @param _englishAuctionRefreshTime new refresh time for English auctions\\n    function _updateEnglishAuctionRefreshTime(uint96 _englishAuctionRefreshTime)\\n        internal\\n    {\\n        if (_englishAuctionRefreshTime == 0) {\\n            revert JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime();\\n        }\\n        uint96 oldEnglishAuctionRefreshTime = englishAuctionRefreshTime;\\n        englishAuctionRefreshTime = _englishAuctionRefreshTime;\\n        emit EnglishAuctionRefreshTimeSet(\\n            oldEnglishAuctionRefreshTime,\\n            englishAuctionRefreshTime\\n        );\\n    }\\n\\n    /// @notice Update currency manager\\n    /// @param _currencyManager new currency manager address\\n    function updateCurrencyManager(address _currencyManager)\\n        external\\n        onlyOwner\\n    {\\n        _updateCurrencyManager(_currencyManager);\\n    }\\n\\n    /// @notice Update currency manager\\n    /// @param _currencyManager new currency manager address\\n    function _updateCurrencyManager(address _currencyManager) internal {\\n        if (_currencyManager == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldCurrencyManagerAddress = address(currencyManager);\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        emit CurrencyManagerSet(oldCurrencyManagerAddress, _currencyManager);\\n    }\\n\\n    /// @notice Update protocol fee manager\\n    /// @param _protocolFeeManager new protocol fee manager address\\n    function updateProtocolFeeManager(address _protocolFeeManager)\\n        external\\n        onlyOwner\\n    {\\n        _updateProtocolFeeManager(_protocolFeeManager);\\n    }\\n\\n    /// @notice Update protocol fee manager\\n    /// @param _protocolFeeManager new protocol fee manager address\\n    function _updateProtocolFeeManager(address _protocolFeeManager) internal {\\n        if (_protocolFeeManager == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldProtocolFeeManagerAddress = address(protocolFeeManager);\\n        protocolFeeManager = IProtocolFeeManager(_protocolFeeManager);\\n        emit ProtocolFeeManagerSet(\\n            oldProtocolFeeManagerAddress,\\n            _protocolFeeManager\\n        );\\n    }\\n\\n    /// @notice Update protocol fee recipient\\n    /// @param _protocolFeeRecipient new recipient for protocol fees\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient)\\n        external\\n        onlyOwner\\n    {\\n        _updateProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /// @notice Update protocol fee recipient\\n    /// @param _protocolFeeRecipient new recipient for protocol fees\\n    function _updateProtocolFeeRecipient(address _protocolFeeRecipient)\\n        internal\\n    {\\n        if (_protocolFeeRecipient == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldProtocolFeeRecipient = protocolFeeRecipient;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit ProtocolFeeRecipientSet(\\n            oldProtocolFeeRecipient,\\n            _protocolFeeRecipient\\n        );\\n    }\\n\\n    /// @notice Update royalty fee manager\\n    /// @param _royaltyFeeManager new fee manager address\\n    function updateRoyaltyFeeManager(address _royaltyFeeManager)\\n        external\\n        onlyOwner\\n    {\\n        _updateRoyaltyFeeManager(_royaltyFeeManager);\\n    }\\n\\n    /// @notice Update royalty fee manager\\n    /// @param _royaltyFeeManager new fee manager address\\n    function _updateRoyaltyFeeManager(address _royaltyFeeManager) internal {\\n        if (_royaltyFeeManager == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldRoyaltyFeeManagerAddress = address(royaltyFeeManager);\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        emit RoyaltyFeeManagerSet(\\n            oldRoyaltyFeeManagerAddress,\\n            _royaltyFeeManager\\n        );\\n    }\\n\\n    /// @notice Place bid on a running English Auction\\n    /// @dev Note:\\n    /// - Requires holding the bid in escrow until either a higher bid is placed\\n    ///   or the auction is settled\\n    /// - If a bid already exists, only bids at least `englishAuctionMinBidIncrementPct`\\n    ///   percent higher can be placed\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _bidAmount amount of currency to bid\\n    function _placeEnglishAuctionBid(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        uint256 _bidAmount,\\n        EnglishAuction memory auction\\n    ) internal {\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n        if (_bidAmount == 0) {\\n            revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n        }\\n        if (msg.sender == auction.creator) {\\n            revert JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid();\\n        }\\n        if (block.timestamp >= auction.endTime) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction();\\n        }\\n\\n        uint96 endTimeExtension;\\n        if (auction.endTime - block.timestamp <= englishAuctionRefreshTime) {\\n            endTimeExtension = englishAuctionRefreshTime;\\n            auction.endTime += endTimeExtension;\\n        }\\n\\n        if (auction.lastBidPrice == 0) {\\n            if (_bidAmount < auction.startPrice) {\\n                revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n            }\\n            auction.lastBidder = msg.sender;\\n            auction.lastBidPrice = _bidAmount;\\n        } else {\\n            if (msg.sender == auction.lastBidder) {\\n                // If bidder is same as last bidder, ensure their bid is at least\\n                // `englishAuctionMinBidIncrementPct` percent of their previous bid\\n                if (\\n                    _bidAmount * PERCENTAGE_PRECISION <\\n                    auction.lastBidPrice * englishAuctionMinBidIncrementPct\\n                ) {\\n                    revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n                }\\n                auction.lastBidPrice += _bidAmount;\\n            } else {\\n                // Ensure bid is at least `englishAuctionMinBidIncrementPct` percent greater\\n                // than last bid\\n                if (\\n                    _bidAmount * PERCENTAGE_PRECISION <\\n                    auction.lastBidPrice *\\n                        (PERCENTAGE_PRECISION +\\n                            englishAuctionMinBidIncrementPct)\\n                ) {\\n                    revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n                }\\n\\n                address previousBidder = auction.lastBidder;\\n                uint256 previousBidPrice = auction.lastBidPrice;\\n\\n                auction.lastBidder = msg.sender;\\n                auction.lastBidPrice = _bidAmount;\\n\\n                // Transfer previous bid back to bidder\\n                IERC20(auction.currency).safeTransfer(\\n                    previousBidder,\\n                    previousBidPrice\\n                );\\n            }\\n        }\\n\\n        address collectionAddress = address(_collection);\\n        englishAuctions[collectionAddress][_tokenId] = auction;\\n\\n        emit EnglishAuctionPlaceBid(\\n            auction.creator,\\n            auction.lastBidder,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.lastBidPrice,\\n            endTimeExtension\\n        );\\n    }\\n\\n    /// @notice Settles a Dutch Auction\\n    /// @dev Note:\\n    /// - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient\\n    /// - Transfers ERC721 token to buyer\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function _settleDutchAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        DutchAuction memory _auction\\n    ) internal {\\n        if (_auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n        if (msg.sender == _auction.creator) {\\n            revert JoepegAuctionHouse__DutchAuctionCreatorCannotSettle();\\n        }\\n\\n        // Get auction sale price\\n        address collectionAddress = address(_collection);\\n        uint256 salePrice = getDutchAuctionSalePrice(\\n            collectionAddress,\\n            _tokenId\\n        );\\n\\n        delete dutchAuctions[collectionAddress][_tokenId];\\n\\n        if (_auction.currency == WAVAX) {\\n            // Transfer WAVAX if needed\\n            if (salePrice > msg.value) {\\n                IERC20(WAVAX).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    salePrice - msg.value\\n                );\\n            }\\n\\n            // Wrap AVAX if needed\\n            if (msg.value > 0) {\\n                IWAVAX(WAVAX).deposit{value: msg.value}();\\n            }\\n\\n            // Refund excess AVAX if needed\\n            if (salePrice < msg.value) {\\n                IERC20(WAVAX).safeTransfer(msg.sender, msg.value - salePrice);\\n            }\\n\\n            _transferFeesAndFunds(\\n                collectionAddress,\\n                _tokenId,\\n                IERC20(WAVAX),\\n                address(this),\\n                _auction.creator,\\n                salePrice,\\n                _auction.minPercentageToAsk\\n            );\\n        } else {\\n            _transferFeesAndFunds(\\n                collectionAddress,\\n                _tokenId,\\n                IERC20(_auction.currency),\\n                msg.sender,\\n                _auction.creator,\\n                salePrice,\\n                _auction.minPercentageToAsk\\n            );\\n        }\\n\\n        _collection.safeTransferFrom(address(this), msg.sender, _tokenId);\\n\\n        emit DutchAuctionSettle(\\n            _auction.creator,\\n            msg.sender,\\n            _auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            _auction.nonce,\\n            salePrice\\n        );\\n    }\\n\\n    /// @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of token being used for the purchase (e.g. USDC)\\n    /// @param _from sender of the funds\\n    /// @param _to seller's recipient\\n    /// @param _amount amount being transferred (in currency)\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function _transferFeesAndFunds(\\n        address _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = _amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(\\n                _collection,\\n                _amount\\n            );\\n            address _protocolFeeRecipient = protocolFeeRecipient;\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if (\\n                (_protocolFeeRecipient != address(0)) &&\\n                (protocolFeeAmount != 0)\\n            ) {\\n                _currency.safeTransferFrom(\\n                    _from,\\n                    _protocolFeeRecipient,\\n                    protocolFeeAmount\\n                );\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    _collection,\\n                    _tokenId,\\n                    _amount\\n                );\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if (\\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\\n            ) {\\n                _currency.safeTransferFrom(\\n                    _from,\\n                    royaltyFeeRecipient,\\n                    royaltyFeeAmount\\n                );\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(\\n                    _collection,\\n                    _tokenId,\\n                    royaltyFeeRecipient,\\n                    address(_currency),\\n                    royaltyFeeAmount\\n                );\\n            }\\n        }\\n\\n        // Ensure seller gets minimum expected fees\\n        if (\\n            finalSellerAmount * PERCENTAGE_PRECISION <\\n            _minPercentageToAsk * _amount\\n        ) {\\n            revert JoepegAuctionHouse__FeesHigherThanExpected();\\n        }\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            _currency.safeTransferFrom(_from, _to, finalSellerAmount);\\n        }\\n    }\\n\\n    /// @notice Calculate protocol fee for a given collection\\n    /// @param _collection address of collection\\n    /// @param _amount amount to transfer\\n    function _calculateProtocolFee(address _collection, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 protocolFee = protocolFeeManager.protocolFeeForCollection(\\n            _collection\\n        );\\n        return (protocolFee * _amount) / PERCENTAGE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x4aa8fdcd8d1da2726f2051d87193bf58fc5cac285783fea83c02065eb55e229d\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency)\\n        external\\n        view\\n        returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\\n        external\\n        view\\n        returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20cec00e38bd01cc6c3db2e3cf623db82912098013591492bae24c6546ba962f\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProtocolFeeManager {\\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee) external;\\n\\n    function setProtocolFeeForCollection(\\n        address _collection,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    function unsetProtocolFeeForCollection(address _collection) external;\\n\\n    function protocolFeeForCollection(address _collection)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function defaultProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c23934d4de891c89d2d799459704750c5d02970ab2476878bf7c5f459941f6a\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe91c4fa5c0ae8f35521d0853efcb9e617299909032bce6e98981d11c06088bc6\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9c9ad99546d3d740022129afd27de11e95216edf9cbf2197e11f50cea6814d21\",\"license\":\"GNU\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003e1c38038062003e1c833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b608051613d49620000d36000396000818161062901528181610ed801528181612169015281816121b0015281816122360152818161297e015281816129c8015281816129f801528181612a8b0152612ab90152613d496000f3fe60806040526004361061021a5760003560e01c806373b295c211610123578063a70dbaeb116100ab578063d163a9061161006f578063d163a906146107de578063e256888f146107fe578063eeb360b714610814578063f080e0bf14610834578063f2fde38b1461085457600080fd5b8063a70dbaeb1461074b578063ad354df81461076b578063ba0385051461078b578063c5498769146107ab578063c70f852d146107cb57600080fd5b806387e4401f116100f257806387e4401f146106ad5780638da5cb5b146106cd57806390bdc087146106eb578063955b25381461070b578063a1fd34e01461072b57600080fd5b806373b295c21461061757806373c325971461064b5780638456cb591461066b578063874b5d0d1461068057600080fd5b80635c975abb116101a657806367a548891161017557806367a54889146104b75780636e41d47d146104d75780636fc4cde1146104f7578063715018a61461052f57806373918a1c1461054457600080fd5b80635c975abb146104415780635ce052d7146104645780635d28be2e1461048457806364df049e1461049757600080fd5b8063150b7a02116101ed578063150b7a02146103875780631df47f80146103cc57806327370809146103ec5780633f4ba83a1461040c578063516971a81461042157600080fd5b80630f747d741461021f5780631082eea21461025c578063127d71f71461034157806312e64f0314610363575b600080fd5b34801561022b57600080fd5b5060c95461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b506102e3610277366004613795565b60ce60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b03808716976001600160601b03600160a01b9889900481169892881697929092049091169493929189565b604080516001600160a01b039a8b1681526001600160601b03998a1660208201529990971696890196909652959093166060870152608086019190915260a085015260c084015260e083019190915261010082015261012001610253565b34801561034d57600080fd5b5061036161035c3660046137c1565b610874565b005b34801561036f57600080fd5b5061037960d05481565b604051908152602001610253565b34801561039357600080fd5b506103b36103a23660046137de565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610253565b3480156103d857600080fd5b506103616103e73660046137c1565b6108b3565b3480156103f857600080fd5b50610361610407366004613795565b6108e6565b34801561041857600080fd5b50610361610b3a565b34801561042d57600080fd5b5061036161043c366004613795565b610b6e565b34801561044d57600080fd5b5060655460ff166040519015158152602001610253565b34801561047057600080fd5b5061036161047f3660046137c1565b610dbc565b610361610492366004613795565b610def565b3480156104a357600080fd5b5060cc5461023f906001600160a01b031681565b3480156104c357600080fd5b506103616104d2366004613899565b610f2d565b3480156104e357600080fd5b506103616104f2366004613795565b61103a565b34801561050357600080fd5b5060d154610517906001600160601b031681565b6040516001600160601b039091168152602001610253565b34801561053b57600080fd5b50610361611303565b34801561055057600080fd5b506105c261055f366004613795565b60cf60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b039586169694861695841694600160a01b9094046001600160601b0316939088565b604080516001600160a01b03998a168152978916602089015295909716948601949094526001600160601b03929092166060850152608084015260a083015260c082015260e081019190915261010001610253565b34801561062357600080fd5b5061023f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561065757600080fd5b50610361610666366004613910565b611337565b34801561067757600080fd5b50610361611826565b34801561068c57600080fd5b5061037961069b3660046137c1565b60cd6020526000908152604090205481565b3480156106b957600080fd5b5060cb5461023f906001600160a01b031681565b3480156106d957600080fd5b506033546001600160a01b031661023f565b3480156106f757600080fd5b50610361610706366004613985565b611858565b34801561071757600080fd5b5061036161072636600461399e565b61188b565b34801561073757600080fd5b50610379610746366004613795565b6119af565b34801561075757600080fd5b5060ca5461023f906001600160a01b031681565b34801561077757600080fd5b50610361610786366004613795565b611b0c565b34801561079757600080fd5b506103616107a63660046139d3565b611c07565b3480156107b757600080fd5b506103616107c63660046137c1565b612058565b6103616107d936600461399e565b61208b565b3480156107ea57600080fd5b506103616107f9366004613a36565b612273565b34801561080a57600080fd5b5061037961271081565b34801561082057600080fd5b5061036161082f366004613795565b6122a6565b34801561084057600080fd5b5061036161084f366004613795565b6124bb565b34801561086057600080fd5b5061036161086f3660046137c1565b6125c6565b6033546001600160a01b031633146108a75760405162461bcd60e51b815260040161089e90613a51565b60405180910390fd5b6108b08161265e565b50565b6033546001600160a01b031633146108dd5760405162461bcd60e51b815260040161089e90613a51565b6108b0816126d7565b60655460ff16156109095760405162461bcd60e51b815260040161089e90613a86565b6002609754141561092c5760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03838116600090815260cf602090815260408083208684528252918290208251610100810184528154851680825260018301548616938201939093529481015493841692850192909252600160a01b9092046001600160601b0316606084015260038101546080840152600481015460a0840152600581015460c08401526006015460e083015283919033146109e35760405163642a6a5360e01b815260040160405180910390fd5b60408101516001600160a01b031615610a0f5760405163088207f160e11b815260040160405180910390fd5b6001600160a01b03808316600090815260cf6020908152604080832087845290915280822080546001600160a01b031990811682556001820180549091169055600281018390556003810183905560048082018490556005820184905560069091019290925583519051632142170760e11b8152928716926342842e0e92610a9d9230929091899101613ae7565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b5050825160808401516040518794506001600160a01b038716935033927f9b2b3a11685c55784f4d3819a5bbaa39baa4be3732cd6d9514970ea6e3ac065c92610b27926001600160a01b03929092168252602082015260400190565b60405180910390a4505060016097555050565b6033546001600160a01b03163314610b645760405162461bcd60e51b815260040161089e90613a51565b610b6c612750565b565b60026097541415610b915760405162461bcd60e51b815260040161089e90613ab0565b60026097556033546001600160a01b03163314610bc05760405162461bcd60e51b815260040161089e90613a51565b6001600160a01b03828116600090815260cf60209081526040808320858452825291829020825161010081018452815485168082526001830154861693820193909352600282015494851693810193909352600160a01b9093046001600160601b0316606083015260038301546080830152600483015460a0830152600583015460c083015260069092015460e08201528391610c7057604051636cf011bd60e11b815260040160405180910390fd5b60408082015160a08301516001600160a01b03808616600090815260cf6020908152858220898352905284812080546001600160a01b031990811682556001820180549091169055600281018290556003810182905560048082018390556005820183905560069091019190915585519451632142170760e11b815293949293918916926342842e0e92610d09923092918b9101613ae7565b600060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506000811115610d5d576020830151610d5d906001600160a01b031683836127e3565b82516080840151604080516001600160a01b0393841681526020810192909252879287169133917f9b2b3a11685c55784f4d3819a5bbaa39baa4be3732cd6d9514970ea6e3ac065c910160405180910390a45050600160975550505050565b6033546001600160a01b03163314610de65760405162461bcd60e51b815260040161089e90613a51565b6108b08161284b565b60655460ff1615610e125760405162461bcd60e51b815260040161089e90613a86565b60026097541415610e355760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03808416600090815260ce60209081526040808320868452825291829020825161012081018452815480861682526001600160601b03600160a01b918290048116948301949094526001830154808716958301869052049092166060830152938401546080820152600384015460a0820152600484015460c0820152600584015460e0820152600690930154610100840152907f0000000000000000000000000000000000000000000000000000000000000000168114610f175760405163026bd50160e51b815260040160405180910390fd5b610f228484846128c4565b505060016097555050565b600054610100900460ff16610f485760005460ff1615610f4c565b303b155b610faf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161089e565b600054610100900460ff16158015610fd1576000805461ffff19166101011790555b610fd9612bd6565b610fe1612c05565b610fe9612c34565b610ff287612c63565b610ffb86612cc8565b6110048561284b565b61100d8461265e565b61101683612d46565b61101f826126d7565b8015611031576000805461ff00191690555b50505050505050565b60655460ff161561105d5760405162461bcd60e51b815260040161089e90613a86565b600260975414156110805760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03838116600090815260cf602090815260408083208684528252918290208251610100810184528154851680825260018301548616938201939093529481015493841692850192909252600160a01b9092046001600160601b0316606084015260038101546080840152600481015460a0840152600581015460c08401526006015460e083015283919061113557604051636cf011bd60e11b815260040160405180910390fd5b60a081015161115757604051638041ccb360e01b815260040160405180910390fd5b80516001600160a01b0316331480159061117d575080606001516001600160601b031642105b1561119b576040516310b13ed760e11b815260040160405180910390fd5b6001600160a01b038216600090815260cf602090815260408083208684528252822080546001600160a01b0319908116825560018201805490911690556002810183905560038101839055600481018390556005810183905560060191909155810151815160a083015160e084015161121c93869388939192309290612dbf565b6040808201519051632142170760e11b81526001600160a01b038616916342842e0e9161124f9130918890600401613ae7565b600060405180830381600087803b15801561126957600080fd5b505af115801561127d573d6000803e3d6000fd5b5050505082826001600160a01b031682600001516001600160a01b03167f5a1800c8b3fb615959d2545c3516c92c95a323c12a305acfe2bd3e88ef8b7d1c8460400151856020015186608001518760a00151604051610b2794939291906001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6033546001600160a01b0316331461132d5760405162461bcd60e51b815260040161089e90613a51565b610b6c6000612f83565b60655460ff161561135a5760405162461bcd60e51b815260040161089e90613a86565b60c9546040516343b938c560e01b81526001600160a01b038089166004830152889216906343b938c590602401602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190613b0b565b6113e457604051625bbd3f60e51b815260040160405180910390fd5b818015806113f3575061271081115b156114115760405163d317635f60e01b815260040160405180910390fd5b600260975414156114345760405162461bcd60e51b815260040161089e90613ab0565b60026097556001600160601b0387161580611457575085876001600160601b0316105b1561147557604051634981972160e01b815260040160405180910390fd5b6001600160a01b03808b16600090815260ce602090815260408083208d84529091529020548b9116156114bb5760405163eee0b01b60e01b815260040160405180910390fd5b84861115806114c8575084155b156114e65760405163ef57fc2960e01b815260040160405180910390fd5b60006114f142612fd5565b90506000604051806101200160405280336001600160a01b03168152602001836001600160601b031681526020018c6001600160a01b031681526020018b8461153a9190613b43565b6001600160601b0316815260200160cd6000336001600160a01b03166001600160a01b031681526020019081526020016000205481526020018981526020018881526020018a81526020018781525090508060ce6000856001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160601b0302191690836001600160601b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a8154816001600160601b0302191690836001600160601b031602179055506080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050600160cd6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008282546116e29190613b6e565b925050819055508c6001600160a01b03166342842e0e33308f6040518463ffffffff1660e01b815260040161171993929190613ae7565b600060405180830381600087803b15801561173357600080fd5b505af1158015611747573d6000803e3d6000fd5b505050508b836001600160a01b031682600001516001600160a01b03167f809f5467134c450196fed70af0db862a1c49d62a7cedd561d76c48a03e5ebc0a846040015185608001518660a001518760c00151886020015189606001518a60e001518b610100015160405161180a9897969594939291906001600160a01b039890981688526020880196909652604087019490945260608601929092526001600160601b0390811660808601521660a084015260c083015260e08201526101000190565b60405180910390a4505060016097555050505050505050505050565b6033546001600160a01b031633146118505760405162461bcd60e51b815260040161089e90613a51565b610b6c613041565b6033546001600160a01b031633146118825760405162461bcd60e51b815260040161089e90613a51565b6108b081612c63565b60655460ff16156118ae5760405162461bcd60e51b815260040161089e90613a86565b600260975414156118d15760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03848116600090815260cf60209081526040808320878452825291829020825161010081018452815485168152600182015485169281018390529481015493841692850192909252600160a01b9092046001600160601b0316606084015260038101546080840152600481015460a0840152600581015460c08401526006015460e08301528061198257604051636cf011bd60e11b815260040160405180910390fd5b6119976001600160a01b038216333086613099565b6119a3858585856130c0565b50506001609755505050565b6001600160a01b03808316600090815260ce602090815260408083208584528252808320815161012081018352815480871682526001600160601b03600160a01b91829004811695830195909552600183015496871693820193909352919094049091166060820181905260028401546080830152600384015460a0830152600484015460c0830152600584015460e083015260069093015461010082015290914210611a615760c001519050611b06565b600081602001516001600160601b031642611a7c9190613b86565b905060008260e0015182611a909190613b9d565b905060008360e0015184602001518560600151611aad9190613bbf565b6001600160601b0316611ac09190613b9d565b905060008460c001518560a00151611ad89190613b86565b905081611ae58285613be7565b611aef9190613b9d565b8560a00151611afe9190613b86565b955050505050505b92915050565b60655460ff1615611b2f5760405162461bcd60e51b815260040161089e90613a86565b60026097541415611b525760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03808416600090815260ce60209081526040808320868452825291829020825161012081018452815480861682526001600160601b03600160a01b9182900481169483019490945260018301549586169482019490945292909304166060820152918101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152611bfd8383836128c4565b5050600160975550565b60655460ff1615611c2a5760405162461bcd60e51b815260040161089e90613a86565b60c9546040516343b938c560e01b81526001600160a01b038087166004830152869216906343b938c590602401602060405180830381865afa158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c989190613b0b565b611cb457604051625bbd3f60e51b815260040160405180910390fd5b81801580611cc3575061271081115b15611ce15760405163d317635f60e01b815260040160405180910390fd5b60026097541415611d045760405162461bcd60e51b815260040161089e90613ab0565b60026097556001600160601b038516611d3057604051634981972160e01b815260040160405180910390fd5b6001600160a01b03808916600090815260cf602090815260408083208b845290915290205489911615611d765760405163eee0b01b60e01b815260040160405180910390fd5b33600090815260cd602052604081205490611d9042612fd5565b60408051610100810182523381526001600160a01b038c16602082015260009181018290529192509060608101611dc78b85613b43565b6001600160601b03168152602001848152602001600081526020018981526020018881525090508060cf6000866001600160a01b03166001600160a01b0316815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a8154816001600160601b0302191690836001600160601b031602179055506080820151816003015560a0820151816004015560c0820151816005015560e08201518160060155905050826001611f119190613b6e565b60cd6000336001600160a01b03166001600160a01b03168152602001908152602001600020819055508b6001600160a01b03166342842e0e33308e6040518463ffffffff1660e01b8152600401611f6a93929190613ae7565b600060405180830381600087803b158015611f8457600080fd5b505af1158015611f98573d6000803e3d6000fd5b505050508a846001600160a01b031682600001516001600160a01b03167f547a357be03f8b8c991541b3cc2d0e1647a44b7f10e8cb85c576366a00f51181846020015185608001518660c001518888606001518960e0015160405161203c969594939291906001600160a01b03969096168652602086019490945260408501929092526001600160601b03908116606085015216608083015260a082015260c00190565b60405180910390a45050600160975550505b5050505050505050565b6033546001600160a01b031633146120825760405162461bcd60e51b815260040161089e90613a51565b6108b081612d46565b60655460ff16156120ae5760405162461bcd60e51b815260040161089e90613a86565b600260975414156120d15760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03848116600090815260cf60209081526040808320878452825291829020825161010081018452815485168152600182015485169281018390529481015480851693860193909352600160a01b9092046001600160601b0316606085015260038201546080850152600482015460a0850152600582015460c085015260069091015460e0840152907f00000000000000000000000000000000000000000000000000000000000000001681146121a85760405163026bd50160e51b815260040160405180910390fd5b3415612223577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561220957600080fd5b505af115801561221d573d6000803e3d6000fd5b50505050505b821561225e5761225e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086613099565b6119a3858561226d8634613b6e565b856130c0565b6033546001600160a01b0316331461229d5760405162461bcd60e51b815260040161089e90613a51565b6108b081612cc8565b600260975414156122c95760405162461bcd60e51b815260040161089e90613ab0565b60026097556033546001600160a01b031633146122f85760405162461bcd60e51b815260040161089e90613a51565b6001600160a01b03808316600090815260ce6020908152604080832085845282529182902082516101208101845281548086168083526001600160601b03600160a01b92839004811695840195909552600184015496871695830195909552909404909116606084015260028101546080840152600381015460a0840152600481015460c0840152600581015460e0840152600601546101008301528391906123b457604051636cf011bd60e11b815260040160405180910390fd5b6001600160a01b03808316600090815260ce6020908152604080832087845290915280822082815560018101839055600281018390556003810183905560048082018490556005820184905560069091019290925583519051632142170760e11b8152928716926342842e0e926124319230929091899101613ae7565b600060405180830381600087803b15801561244b57600080fd5b505af115801561245f573d6000803e3d6000fd5b5050825160808401516040518794506001600160a01b038716935033927f2d0945d65614801fbf38298de475b2eda962f669c2e6cbbbc04a7faab17522dd92610b27926001600160a01b03929092168252602082015260400190565b60655460ff16156124de5760405162461bcd60e51b815260040161089e90613a86565b600260975414156125015760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03808416600090815260ce6020908152604080832086845282529182902082516101208101845281548086168083526001600160601b03600160a01b928390048116958401959095526001840154968716958301959095529094049091166060840152928301546080830152600383015460a0830152600483015460c0830152600583015460e0830152600690920154610100820152839133146123b45760405163642a6a5360e01b815260040160405180910390fd5b6033546001600160a01b031633146125f05760405162461bcd60e51b815260040161089e90613a51565b6001600160a01b0381166126555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089e565b6108b081612f83565b6001600160a01b03811661268557604051632bf5c20360e11b815260040160405180910390fd5b60ca80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7d4ddfec890ae302bc76c6c540dbeea692c14045ecfebcc29a666bf9dc279c8f90600090a35050565b6001600160a01b0381166126fe57604051632bf5c20360e11b815260040160405180910390fd5b60cc80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f77fe0152e8e354becca126c2d9ddc9e3372c8aa414ef8185aceb7934d6a716cc90600090a35050565b60655460ff166127995760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161089e565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03831660248201526044810182905261284690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613408565b505050565b6001600160a01b03811661287257604051632bf5c20360e11b815260040160405180910390fd5b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f41e87b8a10446f910ac9ba7a85dd3c9ad02a2705e02ebee6237611a62cde306e90600090a35050565b80516001600160a01b03166128ec57604051636cf011bd60e11b815260040160405180910390fd5b80516001600160a01b031633141561291757604051631709f0f960e31b815260040160405180910390fd5b82600061292482856119af565b6001600160a01b03838116600090815260ce602090815260408083208984529091528082208281556001810183905560028101839055600381018390556004810183905560058101839055600601919091558501519192507f0000000000000000000000000000000000000000000000000000000000000000811691161415612aef57348111156129f0576129f033306129be3485613b86565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190613099565b3415612a6b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a5157600080fd5b505af1158015612a65573d6000803e3d6000fd5b50505050505b34811015612ab257612ab233612a818334613b86565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906127e3565b612aea82857f000000000000000000000000000000000000000000000000000000000000000030876000015186896101000151612dbf565b612b0b565b612b0b8285856040015133876000015186896101000151612dbf565b604051632142170760e11b81526001600160a01b038616906342842e0e90612b3b90309033908990600401613ae7565b600060405180830381600087803b158015612b5557600080fd5b505af1158015612b69573d6000803e3d6000fd5b5050845160408087015160808089015183513381526001600160a01b039384166020820152938401526060830187905289955081881694509216917fcc3d803077d108e00cb796b4d6569ca5f5cb0bfc25cb5fb755efd1ffc80d9eff910160405180910390a45050505050565b600054610100900460ff16612bfd5760405162461bcd60e51b815260040161089e90613c06565b610b6c6134da565b600054610100900460ff16612c2c5760405162461bcd60e51b815260040161089e90613c06565b610b6c61350a565b600054610100900460ff16612c5b5760405162461bcd60e51b815260040161089e90613c06565b610b6c61353d565b801580612c71575061271081115b15612c8f5760405163983613f960e01b815260040160405180910390fd5b60d0805490829055604051829082907fa3f285ff50dde91866d9d4e5d73ebdf424ebb3a7fcedc49b4c5fc0b66e15642c90600090a35050565b6001600160601b038116612cef57604051630b68507960e31b815260040160405180910390fd5b60d180546001600160601b038381166bffffffffffffffffffffffff19831681179093556040519116919082907fc0da53cc906ae35e2c2afe765eb38598227dda23551dfa44bf89e14592ecd95490600090a35050565b6001600160a01b038116612d6d57604051632bf5c20360e11b815260040160405180910390fd5b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f3572f53d6b1fa254aff5642a655e44ac0e39825c4cedc188cacdb3330857acda90600090a35050565b816000612dcc898361356b565b60cc549091506001600160a01b03168015801590612de957508115155b15612e1057612e036001600160a01b038916888385613099565b612e0d8284613b86565b92505b505060cb54604051637a7b1afd60e11b81526001600160a01b038a81166004830152602482018a905260448201869052600092839291169063f4f635fa906064016040805180830381865afa158015612e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e919190613c51565b90925090506001600160a01b03821615801590612ead57508015155b15612f3657612ec76001600160a01b038916888484613099565b612ed18184613b86565b9250816001600160a01b0316898b6001600160a01b03167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d8b85604051612f2d9291906001600160a01b03929092168252602082015260400190565b60405180910390a45b50612f4390508383613be7565b612f4f61271083613be7565b1015612f6e576040516321f5097160e11b815260040160405180910390fd5b61204e6001600160a01b038716868684613099565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160601b0382111561303d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b606482015260840161089e565b5090565b60655460ff16156130645760405162461bcd60e51b815260040161089e90613a86565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127c63390565b6130ba846323b872dd60e01b85858560405160240161280f93929190613ae7565b50505050565b80516001600160a01b03166130e857604051636cf011bd60e11b815260040160405180910390fd5b8161310657604051638409122f60e01b815260040160405180910390fd5b80516001600160a01b031633141561313157604051636db0fafd60e11b815260040160405180910390fd5b80606001516001600160601b0316421061315e57604051637d9c9b7b60e11b815260040160405180910390fd5b60d15460608201516000916001600160601b039081169161318191429116613b86565b116131b7575060d1546060820180516001600160601b03909216918291906131aa908390613b43565b6001600160601b03169052505b60a08201516131f7578160c001518310156131e557604051638409122f60e01b815260040160405180910390fd5b33604083015260a082018390526132e7565b81604001516001600160a01b0316336001600160a01b0316141561326c5760d0548260a001516132279190613be7565b61323361271085613be7565b101561325257604051638409122f60e01b815260040160405180910390fd5b828260a0018181516132649190613b6e565b9052506132e7565b60d05461327b90612710613b6e565b8260a0015161328a9190613be7565b61329661271085613be7565b10156132b557604051638409122f60e01b815260040160405180910390fd5b60408201805160a0840180513390935285905260208401519091906132e4906001600160a01b031683836127e3565b50505b6001600160a01b03808616600081815260cf60209081526040808320898452825291829020865181549086166001600160a01b031991821681178355928801516001830180548289169316929092179091558388015160608901516001600160601b0316600160a01b0296811696909617600283015560808801516003830181905560a08901516004840181905560c08a0151600585015560e08a015160069094019390935593518b968b96957f84ec3a468ca2097ed308ae9b8a51622f04c0f01ed00388da9167849bd918c201946133f89492938b906001600160a01b039586168152939094166020840152604083019190915260608201526001600160601b0391909116608082015260a00190565b60405180910390a4505050505050565b600061345d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135fd9092919063ffffffff16565b805190915015612846578080602001905181019061347b9190613b0b565b6128465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089e565b600054610100900460ff166135015760405162461bcd60e51b815260040161089e90613c06565b610b6c33612f83565b600054610100900460ff166135315760405162461bcd60e51b815260040161089e90613c06565b6065805460ff19169055565b600054610100900460ff166135645760405162461bcd60e51b815260040161089e90613c06565b6001609755565b60ca546040516238062960e91b81526001600160a01b038481166004830152600092839291169063700c520090602401602060405180830381865afa1580156135b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135dc9190613c7f565b90506127106135eb8483613be7565b6135f59190613b9d565b949350505050565b606061360c8484600085613616565b90505b9392505050565b6060824710156136775760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089e565b6001600160a01b0385163b6136ce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089e565b600080866001600160a01b031685876040516136ea9190613cc4565b60006040518083038185875af1925050503d8060008114613727576040519150601f19603f3d011682016040523d82523d6000602084013e61372c565b606091505b509150915061373c828286613747565b979650505050505050565b6060831561375657508161360f565b8251156137665782518084602001fd5b8160405162461bcd60e51b815260040161089e9190613ce0565b6001600160a01b03811681146108b057600080fd5b600080604083850312156137a857600080fd5b82356137b381613780565b946020939093013593505050565b6000602082840312156137d357600080fd5b813561360f81613780565b6000806000806000608086880312156137f657600080fd5b853561380181613780565b9450602086013561381181613780565b935060408601359250606086013567ffffffffffffffff8082111561383557600080fd5b818801915088601f83011261384957600080fd5b81358181111561385857600080fd5b89602082850101111561386a57600080fd5b9699959850939650602001949392505050565b80356001600160601b038116811461389457600080fd5b919050565b60008060008060008060c087890312156138b257600080fd5b863595506138c26020880161387d565b945060408701356138d281613780565b935060608701356138e281613780565b925060808701356138f281613780565b915060a087013561390281613780565b809150509295509295509295565b600080600080600080600080610100898b03121561392d57600080fd5b883561393881613780565b975060208901359650604089013561394f81613780565b955061395d60608a0161387d565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60006020828403121561399757600080fd5b5035919050565b6000806000606084860312156139b357600080fd5b83356139be81613780565b95602085013595506040909401359392505050565b60008060008060008060c087890312156139ec57600080fd5b86356139f781613780565b9550602087013594506040870135613a0e81613780565b9350613a1c6060880161387d565b92506080870135915060a087013590509295509295509295565b600060208284031215613a4857600080fd5b61360f8261387d565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215613b1d57600080fd5b8151801515811461360f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03808316818516808303821115613b6557613b65613b2d565b01949350505050565b60008219821115613b8157613b81613b2d565b500190565b600082821015613b9857613b98613b2d565b500390565b600082613bba57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160601b0383811690831681811015613bdf57613bdf613b2d565b039392505050565b6000816000190483118215151615613c0157613c01613b2d565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008060408385031215613c6457600080fd5b8251613c6f81613780565b6020939093015192949293505050565b600060208284031215613c9157600080fd5b5051919050565b60005b83811015613cb3578181015183820152602001613c9b565b838111156130ba5750506000910152565b60008251613cd6818460208701613c98565b9190910192915050565b6020815260008251806020840152613cff816040850160208701613c98565b601f01601f1916919091016040019291505056fea26469706673582212208b27cf93d542b4d5444c46eb3d02a188431a8d1badfff79daf732255714d61a564736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c806373b295c211610123578063a70dbaeb116100ab578063d163a9061161006f578063d163a906146107de578063e256888f146107fe578063eeb360b714610814578063f080e0bf14610834578063f2fde38b1461085457600080fd5b8063a70dbaeb1461074b578063ad354df81461076b578063ba0385051461078b578063c5498769146107ab578063c70f852d146107cb57600080fd5b806387e4401f116100f257806387e4401f146106ad5780638da5cb5b146106cd57806390bdc087146106eb578063955b25381461070b578063a1fd34e01461072b57600080fd5b806373b295c21461061757806373c325971461064b5780638456cb591461066b578063874b5d0d1461068057600080fd5b80635c975abb116101a657806367a548891161017557806367a54889146104b75780636e41d47d146104d75780636fc4cde1146104f7578063715018a61461052f57806373918a1c1461054457600080fd5b80635c975abb146104415780635ce052d7146104645780635d28be2e1461048457806364df049e1461049757600080fd5b8063150b7a02116101ed578063150b7a02146103875780631df47f80146103cc57806327370809146103ec5780633f4ba83a1461040c578063516971a81461042157600080fd5b80630f747d741461021f5780631082eea21461025c578063127d71f71461034157806312e64f0314610363575b600080fd5b34801561022b57600080fd5b5060c95461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b506102e3610277366004613795565b60ce60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b03808716976001600160601b03600160a01b9889900481169892881697929092049091169493929189565b604080516001600160a01b039a8b1681526001600160601b03998a1660208201529990971696890196909652959093166060870152608086019190915260a085015260c084015260e083019190915261010082015261012001610253565b34801561034d57600080fd5b5061036161035c3660046137c1565b610874565b005b34801561036f57600080fd5b5061037960d05481565b604051908152602001610253565b34801561039357600080fd5b506103b36103a23660046137de565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610253565b3480156103d857600080fd5b506103616103e73660046137c1565b6108b3565b3480156103f857600080fd5b50610361610407366004613795565b6108e6565b34801561041857600080fd5b50610361610b3a565b34801561042d57600080fd5b5061036161043c366004613795565b610b6e565b34801561044d57600080fd5b5060655460ff166040519015158152602001610253565b34801561047057600080fd5b5061036161047f3660046137c1565b610dbc565b610361610492366004613795565b610def565b3480156104a357600080fd5b5060cc5461023f906001600160a01b031681565b3480156104c357600080fd5b506103616104d2366004613899565b610f2d565b3480156104e357600080fd5b506103616104f2366004613795565b61103a565b34801561050357600080fd5b5060d154610517906001600160601b031681565b6040516001600160601b039091168152602001610253565b34801561053b57600080fd5b50610361611303565b34801561055057600080fd5b506105c261055f366004613795565b60cf60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b039586169694861695841694600160a01b9094046001600160601b0316939088565b604080516001600160a01b03998a168152978916602089015295909716948601949094526001600160601b03929092166060850152608084015260a083015260c082015260e081019190915261010001610253565b34801561062357600080fd5b5061023f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561065757600080fd5b50610361610666366004613910565b611337565b34801561067757600080fd5b50610361611826565b34801561068c57600080fd5b5061037961069b3660046137c1565b60cd6020526000908152604090205481565b3480156106b957600080fd5b5060cb5461023f906001600160a01b031681565b3480156106d957600080fd5b506033546001600160a01b031661023f565b3480156106f757600080fd5b50610361610706366004613985565b611858565b34801561071757600080fd5b5061036161072636600461399e565b61188b565b34801561073757600080fd5b50610379610746366004613795565b6119af565b34801561075757600080fd5b5060ca5461023f906001600160a01b031681565b34801561077757600080fd5b50610361610786366004613795565b611b0c565b34801561079757600080fd5b506103616107a63660046139d3565b611c07565b3480156107b757600080fd5b506103616107c63660046137c1565b612058565b6103616107d936600461399e565b61208b565b3480156107ea57600080fd5b506103616107f9366004613a36565b612273565b34801561080a57600080fd5b5061037961271081565b34801561082057600080fd5b5061036161082f366004613795565b6122a6565b34801561084057600080fd5b5061036161084f366004613795565b6124bb565b34801561086057600080fd5b5061036161086f3660046137c1565b6125c6565b6033546001600160a01b031633146108a75760405162461bcd60e51b815260040161089e90613a51565b60405180910390fd5b6108b08161265e565b50565b6033546001600160a01b031633146108dd5760405162461bcd60e51b815260040161089e90613a51565b6108b0816126d7565b60655460ff16156109095760405162461bcd60e51b815260040161089e90613a86565b6002609754141561092c5760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03838116600090815260cf602090815260408083208684528252918290208251610100810184528154851680825260018301548616938201939093529481015493841692850192909252600160a01b9092046001600160601b0316606084015260038101546080840152600481015460a0840152600581015460c08401526006015460e083015283919033146109e35760405163642a6a5360e01b815260040160405180910390fd5b60408101516001600160a01b031615610a0f5760405163088207f160e11b815260040160405180910390fd5b6001600160a01b03808316600090815260cf6020908152604080832087845290915280822080546001600160a01b031990811682556001820180549091169055600281018390556003810183905560048082018490556005820184905560069091019290925583519051632142170760e11b8152928716926342842e0e92610a9d9230929091899101613ae7565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b5050825160808401516040518794506001600160a01b038716935033927f9b2b3a11685c55784f4d3819a5bbaa39baa4be3732cd6d9514970ea6e3ac065c92610b27926001600160a01b03929092168252602082015260400190565b60405180910390a4505060016097555050565b6033546001600160a01b03163314610b645760405162461bcd60e51b815260040161089e90613a51565b610b6c612750565b565b60026097541415610b915760405162461bcd60e51b815260040161089e90613ab0565b60026097556033546001600160a01b03163314610bc05760405162461bcd60e51b815260040161089e90613a51565b6001600160a01b03828116600090815260cf60209081526040808320858452825291829020825161010081018452815485168082526001830154861693820193909352600282015494851693810193909352600160a01b9093046001600160601b0316606083015260038301546080830152600483015460a0830152600583015460c083015260069092015460e08201528391610c7057604051636cf011bd60e11b815260040160405180910390fd5b60408082015160a08301516001600160a01b03808616600090815260cf6020908152858220898352905284812080546001600160a01b031990811682556001820180549091169055600281018290556003810182905560048082018390556005820183905560069091019190915585519451632142170760e11b815293949293918916926342842e0e92610d09923092918b9101613ae7565b600060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506000811115610d5d576020830151610d5d906001600160a01b031683836127e3565b82516080840151604080516001600160a01b0393841681526020810192909252879287169133917f9b2b3a11685c55784f4d3819a5bbaa39baa4be3732cd6d9514970ea6e3ac065c910160405180910390a45050600160975550505050565b6033546001600160a01b03163314610de65760405162461bcd60e51b815260040161089e90613a51565b6108b08161284b565b60655460ff1615610e125760405162461bcd60e51b815260040161089e90613a86565b60026097541415610e355760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03808416600090815260ce60209081526040808320868452825291829020825161012081018452815480861682526001600160601b03600160a01b918290048116948301949094526001830154808716958301869052049092166060830152938401546080820152600384015460a0820152600484015460c0820152600584015460e0820152600690930154610100840152907f0000000000000000000000000000000000000000000000000000000000000000168114610f175760405163026bd50160e51b815260040160405180910390fd5b610f228484846128c4565b505060016097555050565b600054610100900460ff16610f485760005460ff1615610f4c565b303b155b610faf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161089e565b600054610100900460ff16158015610fd1576000805461ffff19166101011790555b610fd9612bd6565b610fe1612c05565b610fe9612c34565b610ff287612c63565b610ffb86612cc8565b6110048561284b565b61100d8461265e565b61101683612d46565b61101f826126d7565b8015611031576000805461ff00191690555b50505050505050565b60655460ff161561105d5760405162461bcd60e51b815260040161089e90613a86565b600260975414156110805760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03838116600090815260cf602090815260408083208684528252918290208251610100810184528154851680825260018301548616938201939093529481015493841692850192909252600160a01b9092046001600160601b0316606084015260038101546080840152600481015460a0840152600581015460c08401526006015460e083015283919061113557604051636cf011bd60e11b815260040160405180910390fd5b60a081015161115757604051638041ccb360e01b815260040160405180910390fd5b80516001600160a01b0316331480159061117d575080606001516001600160601b031642105b1561119b576040516310b13ed760e11b815260040160405180910390fd5b6001600160a01b038216600090815260cf602090815260408083208684528252822080546001600160a01b0319908116825560018201805490911690556002810183905560038101839055600481018390556005810183905560060191909155810151815160a083015160e084015161121c93869388939192309290612dbf565b6040808201519051632142170760e11b81526001600160a01b038616916342842e0e9161124f9130918890600401613ae7565b600060405180830381600087803b15801561126957600080fd5b505af115801561127d573d6000803e3d6000fd5b5050505082826001600160a01b031682600001516001600160a01b03167f5a1800c8b3fb615959d2545c3516c92c95a323c12a305acfe2bd3e88ef8b7d1c8460400151856020015186608001518760a00151604051610b2794939291906001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6033546001600160a01b0316331461132d5760405162461bcd60e51b815260040161089e90613a51565b610b6c6000612f83565b60655460ff161561135a5760405162461bcd60e51b815260040161089e90613a86565b60c9546040516343b938c560e01b81526001600160a01b038089166004830152889216906343b938c590602401602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190613b0b565b6113e457604051625bbd3f60e51b815260040160405180910390fd5b818015806113f3575061271081115b156114115760405163d317635f60e01b815260040160405180910390fd5b600260975414156114345760405162461bcd60e51b815260040161089e90613ab0565b60026097556001600160601b0387161580611457575085876001600160601b0316105b1561147557604051634981972160e01b815260040160405180910390fd5b6001600160a01b03808b16600090815260ce602090815260408083208d84529091529020548b9116156114bb5760405163eee0b01b60e01b815260040160405180910390fd5b84861115806114c8575084155b156114e65760405163ef57fc2960e01b815260040160405180910390fd5b60006114f142612fd5565b90506000604051806101200160405280336001600160a01b03168152602001836001600160601b031681526020018c6001600160a01b031681526020018b8461153a9190613b43565b6001600160601b0316815260200160cd6000336001600160a01b03166001600160a01b031681526020019081526020016000205481526020018981526020018881526020018a81526020018781525090508060ce6000856001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160601b0302191690836001600160601b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a8154816001600160601b0302191690836001600160601b031602179055506080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050600160cd6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008282546116e29190613b6e565b925050819055508c6001600160a01b03166342842e0e33308f6040518463ffffffff1660e01b815260040161171993929190613ae7565b600060405180830381600087803b15801561173357600080fd5b505af1158015611747573d6000803e3d6000fd5b505050508b836001600160a01b031682600001516001600160a01b03167f809f5467134c450196fed70af0db862a1c49d62a7cedd561d76c48a03e5ebc0a846040015185608001518660a001518760c00151886020015189606001518a60e001518b610100015160405161180a9897969594939291906001600160a01b039890981688526020880196909652604087019490945260608601929092526001600160601b0390811660808601521660a084015260c083015260e08201526101000190565b60405180910390a4505060016097555050505050505050505050565b6033546001600160a01b031633146118505760405162461bcd60e51b815260040161089e90613a51565b610b6c613041565b6033546001600160a01b031633146118825760405162461bcd60e51b815260040161089e90613a51565b6108b081612c63565b60655460ff16156118ae5760405162461bcd60e51b815260040161089e90613a86565b600260975414156118d15760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03848116600090815260cf60209081526040808320878452825291829020825161010081018452815485168152600182015485169281018390529481015493841692850192909252600160a01b9092046001600160601b0316606084015260038101546080840152600481015460a0840152600581015460c08401526006015460e08301528061198257604051636cf011bd60e11b815260040160405180910390fd5b6119976001600160a01b038216333086613099565b6119a3858585856130c0565b50506001609755505050565b6001600160a01b03808316600090815260ce602090815260408083208584528252808320815161012081018352815480871682526001600160601b03600160a01b91829004811695830195909552600183015496871693820193909352919094049091166060820181905260028401546080830152600384015460a0830152600484015460c0830152600584015460e083015260069093015461010082015290914210611a615760c001519050611b06565b600081602001516001600160601b031642611a7c9190613b86565b905060008260e0015182611a909190613b9d565b905060008360e0015184602001518560600151611aad9190613bbf565b6001600160601b0316611ac09190613b9d565b905060008460c001518560a00151611ad89190613b86565b905081611ae58285613be7565b611aef9190613b9d565b8560a00151611afe9190613b86565b955050505050505b92915050565b60655460ff1615611b2f5760405162461bcd60e51b815260040161089e90613a86565b60026097541415611b525760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03808416600090815260ce60209081526040808320868452825291829020825161012081018452815480861682526001600160601b03600160a01b9182900481169483019490945260018301549586169482019490945292909304166060820152918101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152611bfd8383836128c4565b5050600160975550565b60655460ff1615611c2a5760405162461bcd60e51b815260040161089e90613a86565b60c9546040516343b938c560e01b81526001600160a01b038087166004830152869216906343b938c590602401602060405180830381865afa158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c989190613b0b565b611cb457604051625bbd3f60e51b815260040160405180910390fd5b81801580611cc3575061271081115b15611ce15760405163d317635f60e01b815260040160405180910390fd5b60026097541415611d045760405162461bcd60e51b815260040161089e90613ab0565b60026097556001600160601b038516611d3057604051634981972160e01b815260040160405180910390fd5b6001600160a01b03808916600090815260cf602090815260408083208b845290915290205489911615611d765760405163eee0b01b60e01b815260040160405180910390fd5b33600090815260cd602052604081205490611d9042612fd5565b60408051610100810182523381526001600160a01b038c16602082015260009181018290529192509060608101611dc78b85613b43565b6001600160601b03168152602001848152602001600081526020018981526020018881525090508060cf6000866001600160a01b03166001600160a01b0316815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a8154816001600160601b0302191690836001600160601b031602179055506080820151816003015560a0820151816004015560c0820151816005015560e08201518160060155905050826001611f119190613b6e565b60cd6000336001600160a01b03166001600160a01b03168152602001908152602001600020819055508b6001600160a01b03166342842e0e33308e6040518463ffffffff1660e01b8152600401611f6a93929190613ae7565b600060405180830381600087803b158015611f8457600080fd5b505af1158015611f98573d6000803e3d6000fd5b505050508a846001600160a01b031682600001516001600160a01b03167f547a357be03f8b8c991541b3cc2d0e1647a44b7f10e8cb85c576366a00f51181846020015185608001518660c001518888606001518960e0015160405161203c969594939291906001600160a01b03969096168652602086019490945260408501929092526001600160601b03908116606085015216608083015260a082015260c00190565b60405180910390a45050600160975550505b5050505050505050565b6033546001600160a01b031633146120825760405162461bcd60e51b815260040161089e90613a51565b6108b081612d46565b60655460ff16156120ae5760405162461bcd60e51b815260040161089e90613a86565b600260975414156120d15760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03848116600090815260cf60209081526040808320878452825291829020825161010081018452815485168152600182015485169281018390529481015480851693860193909352600160a01b9092046001600160601b0316606085015260038201546080850152600482015460a0850152600582015460c085015260069091015460e0840152907f00000000000000000000000000000000000000000000000000000000000000001681146121a85760405163026bd50160e51b815260040160405180910390fd5b3415612223577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561220957600080fd5b505af115801561221d573d6000803e3d6000fd5b50505050505b821561225e5761225e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086613099565b6119a3858561226d8634613b6e565b856130c0565b6033546001600160a01b0316331461229d5760405162461bcd60e51b815260040161089e90613a51565b6108b081612cc8565b600260975414156122c95760405162461bcd60e51b815260040161089e90613ab0565b60026097556033546001600160a01b031633146122f85760405162461bcd60e51b815260040161089e90613a51565b6001600160a01b03808316600090815260ce6020908152604080832085845282529182902082516101208101845281548086168083526001600160601b03600160a01b92839004811695840195909552600184015496871695830195909552909404909116606084015260028101546080840152600381015460a0840152600481015460c0840152600581015460e0840152600601546101008301528391906123b457604051636cf011bd60e11b815260040160405180910390fd5b6001600160a01b03808316600090815260ce6020908152604080832087845290915280822082815560018101839055600281018390556003810183905560048082018490556005820184905560069091019290925583519051632142170760e11b8152928716926342842e0e926124319230929091899101613ae7565b600060405180830381600087803b15801561244b57600080fd5b505af115801561245f573d6000803e3d6000fd5b5050825160808401516040518794506001600160a01b038716935033927f2d0945d65614801fbf38298de475b2eda962f669c2e6cbbbc04a7faab17522dd92610b27926001600160a01b03929092168252602082015260400190565b60655460ff16156124de5760405162461bcd60e51b815260040161089e90613a86565b600260975414156125015760405162461bcd60e51b815260040161089e90613ab0565b600260978190556001600160a01b03808416600090815260ce6020908152604080832086845282529182902082516101208101845281548086168083526001600160601b03600160a01b928390048116958401959095526001840154968716958301959095529094049091166060840152928301546080830152600383015460a0830152600483015460c0830152600583015460e0830152600690920154610100820152839133146123b45760405163642a6a5360e01b815260040160405180910390fd5b6033546001600160a01b031633146125f05760405162461bcd60e51b815260040161089e90613a51565b6001600160a01b0381166126555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089e565b6108b081612f83565b6001600160a01b03811661268557604051632bf5c20360e11b815260040160405180910390fd5b60ca80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7d4ddfec890ae302bc76c6c540dbeea692c14045ecfebcc29a666bf9dc279c8f90600090a35050565b6001600160a01b0381166126fe57604051632bf5c20360e11b815260040160405180910390fd5b60cc80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f77fe0152e8e354becca126c2d9ddc9e3372c8aa414ef8185aceb7934d6a716cc90600090a35050565b60655460ff166127995760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161089e565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03831660248201526044810182905261284690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613408565b505050565b6001600160a01b03811661287257604051632bf5c20360e11b815260040160405180910390fd5b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f41e87b8a10446f910ac9ba7a85dd3c9ad02a2705e02ebee6237611a62cde306e90600090a35050565b80516001600160a01b03166128ec57604051636cf011bd60e11b815260040160405180910390fd5b80516001600160a01b031633141561291757604051631709f0f960e31b815260040160405180910390fd5b82600061292482856119af565b6001600160a01b03838116600090815260ce602090815260408083208984529091528082208281556001810183905560028101839055600381018390556004810183905560058101839055600601919091558501519192507f0000000000000000000000000000000000000000000000000000000000000000811691161415612aef57348111156129f0576129f033306129be3485613b86565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190613099565b3415612a6b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a5157600080fd5b505af1158015612a65573d6000803e3d6000fd5b50505050505b34811015612ab257612ab233612a818334613b86565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906127e3565b612aea82857f000000000000000000000000000000000000000000000000000000000000000030876000015186896101000151612dbf565b612b0b565b612b0b8285856040015133876000015186896101000151612dbf565b604051632142170760e11b81526001600160a01b038616906342842e0e90612b3b90309033908990600401613ae7565b600060405180830381600087803b158015612b5557600080fd5b505af1158015612b69573d6000803e3d6000fd5b5050845160408087015160808089015183513381526001600160a01b039384166020820152938401526060830187905289955081881694509216917fcc3d803077d108e00cb796b4d6569ca5f5cb0bfc25cb5fb755efd1ffc80d9eff910160405180910390a45050505050565b600054610100900460ff16612bfd5760405162461bcd60e51b815260040161089e90613c06565b610b6c6134da565b600054610100900460ff16612c2c5760405162461bcd60e51b815260040161089e90613c06565b610b6c61350a565b600054610100900460ff16612c5b5760405162461bcd60e51b815260040161089e90613c06565b610b6c61353d565b801580612c71575061271081115b15612c8f5760405163983613f960e01b815260040160405180910390fd5b60d0805490829055604051829082907fa3f285ff50dde91866d9d4e5d73ebdf424ebb3a7fcedc49b4c5fc0b66e15642c90600090a35050565b6001600160601b038116612cef57604051630b68507960e31b815260040160405180910390fd5b60d180546001600160601b038381166bffffffffffffffffffffffff19831681179093556040519116919082907fc0da53cc906ae35e2c2afe765eb38598227dda23551dfa44bf89e14592ecd95490600090a35050565b6001600160a01b038116612d6d57604051632bf5c20360e11b815260040160405180910390fd5b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f3572f53d6b1fa254aff5642a655e44ac0e39825c4cedc188cacdb3330857acda90600090a35050565b816000612dcc898361356b565b60cc549091506001600160a01b03168015801590612de957508115155b15612e1057612e036001600160a01b038916888385613099565b612e0d8284613b86565b92505b505060cb54604051637a7b1afd60e11b81526001600160a01b038a81166004830152602482018a905260448201869052600092839291169063f4f635fa906064016040805180830381865afa158015612e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e919190613c51565b90925090506001600160a01b03821615801590612ead57508015155b15612f3657612ec76001600160a01b038916888484613099565b612ed18184613b86565b9250816001600160a01b0316898b6001600160a01b03167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d8b85604051612f2d9291906001600160a01b03929092168252602082015260400190565b60405180910390a45b50612f4390508383613be7565b612f4f61271083613be7565b1015612f6e576040516321f5097160e11b815260040160405180910390fd5b61204e6001600160a01b038716868684613099565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160601b0382111561303d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b606482015260840161089e565b5090565b60655460ff16156130645760405162461bcd60e51b815260040161089e90613a86565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127c63390565b6130ba846323b872dd60e01b85858560405160240161280f93929190613ae7565b50505050565b80516001600160a01b03166130e857604051636cf011bd60e11b815260040160405180910390fd5b8161310657604051638409122f60e01b815260040160405180910390fd5b80516001600160a01b031633141561313157604051636db0fafd60e11b815260040160405180910390fd5b80606001516001600160601b0316421061315e57604051637d9c9b7b60e11b815260040160405180910390fd5b60d15460608201516000916001600160601b039081169161318191429116613b86565b116131b7575060d1546060820180516001600160601b03909216918291906131aa908390613b43565b6001600160601b03169052505b60a08201516131f7578160c001518310156131e557604051638409122f60e01b815260040160405180910390fd5b33604083015260a082018390526132e7565b81604001516001600160a01b0316336001600160a01b0316141561326c5760d0548260a001516132279190613be7565b61323361271085613be7565b101561325257604051638409122f60e01b815260040160405180910390fd5b828260a0018181516132649190613b6e565b9052506132e7565b60d05461327b90612710613b6e565b8260a0015161328a9190613be7565b61329661271085613be7565b10156132b557604051638409122f60e01b815260040160405180910390fd5b60408201805160a0840180513390935285905260208401519091906132e4906001600160a01b031683836127e3565b50505b6001600160a01b03808616600081815260cf60209081526040808320898452825291829020865181549086166001600160a01b031991821681178355928801516001830180548289169316929092179091558388015160608901516001600160601b0316600160a01b0296811696909617600283015560808801516003830181905560a08901516004840181905560c08a0151600585015560e08a015160069094019390935593518b968b96957f84ec3a468ca2097ed308ae9b8a51622f04c0f01ed00388da9167849bd918c201946133f89492938b906001600160a01b039586168152939094166020840152604083019190915260608201526001600160601b0391909116608082015260a00190565b60405180910390a4505050505050565b600061345d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135fd9092919063ffffffff16565b805190915015612846578080602001905181019061347b9190613b0b565b6128465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089e565b600054610100900460ff166135015760405162461bcd60e51b815260040161089e90613c06565b610b6c33612f83565b600054610100900460ff166135315760405162461bcd60e51b815260040161089e90613c06565b6065805460ff19169055565b600054610100900460ff166135645760405162461bcd60e51b815260040161089e90613c06565b6001609755565b60ca546040516238062960e91b81526001600160a01b038481166004830152600092839291169063700c520090602401602060405180830381865afa1580156135b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135dc9190613c7f565b90506127106135eb8483613be7565b6135f59190613b9d565b949350505050565b606061360c8484600085613616565b90505b9392505050565b6060824710156136775760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089e565b6001600160a01b0385163b6136ce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089e565b600080866001600160a01b031685876040516136ea9190613cc4565b60006040518083038185875af1925050503d8060008114613727576040519150601f19603f3d011682016040523d82523d6000602084013e61372c565b606091505b509150915061373c828286613747565b979650505050505050565b6060831561375657508161360f565b8251156137665782518084602001fd5b8160405162461bcd60e51b815260040161089e9190613ce0565b6001600160a01b03811681146108b057600080fd5b600080604083850312156137a857600080fd5b82356137b381613780565b946020939093013593505050565b6000602082840312156137d357600080fd5b813561360f81613780565b6000806000806000608086880312156137f657600080fd5b853561380181613780565b9450602086013561381181613780565b935060408601359250606086013567ffffffffffffffff8082111561383557600080fd5b818801915088601f83011261384957600080fd5b81358181111561385857600080fd5b89602082850101111561386a57600080fd5b9699959850939650602001949392505050565b80356001600160601b038116811461389457600080fd5b919050565b60008060008060008060c087890312156138b257600080fd5b863595506138c26020880161387d565b945060408701356138d281613780565b935060608701356138e281613780565b925060808701356138f281613780565b915060a087013561390281613780565b809150509295509295509295565b600080600080600080600080610100898b03121561392d57600080fd5b883561393881613780565b975060208901359650604089013561394f81613780565b955061395d60608a0161387d565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60006020828403121561399757600080fd5b5035919050565b6000806000606084860312156139b357600080fd5b83356139be81613780565b95602085013595506040909401359392505050565b60008060008060008060c087890312156139ec57600080fd5b86356139f781613780565b9550602087013594506040870135613a0e81613780565b9350613a1c6060880161387d565b92506080870135915060a087013590509295509295509295565b600060208284031215613a4857600080fd5b61360f8261387d565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215613b1d57600080fd5b8151801515811461360f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03808316818516808303821115613b6557613b65613b2d565b01949350505050565b60008219821115613b8157613b81613b2d565b500190565b600082821015613b9857613b98613b2d565b500390565b600082613bba57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160601b0383811690831681811015613bdf57613bdf613b2d565b039392505050565b6000816000190483118215151615613c0157613c01613b2d565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008060408385031215613c6457600080fd5b8251613c6f81613780565b6020939093015192949293505050565b600060208284031215613c9157600080fd5b5051919050565b60005b83811015613cb3578181015183820152602001613c9b565b838111156130ba5750506000910152565b60008251613cd6818460208701613c98565b9190910192915050565b6020815260008251806020840152613cff816040850160208701613c98565b601f01601f1916919091016040019291505056fea26469706673582212208b27cf93d542b4d5444c46eb3d02a188431a8d1badfff79daf732255714d61a564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelDutchAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "cancelEnglishAuction(address,uint256)": {
        "details": "Note: - Can only be called by auction creator - Can only be cancelled if no bids have been placed",
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "constructor": {
        "params": {
          "_wavax": "address of WAVAX"
        }
      },
      "emergencyCancelDutchAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "emergencyCancelEnglishAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "getDutchAuctionSalePrice(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        },
        "returns": {
          "_0": "current Dutch Auction sale price for specified ERC721 token"
        }
      },
      "initialize(uint256,uint96,address,address,address,address)": {
        "params": {
          "_currencyManager": "currency manager address",
          "_englishAuctionMinBidIncrementPct": "minimum bid increment percentage for English Auctions",
          "_englishAuctionRefreshTime": "refresh time for English auctions",
          "_protocolFeeManager": "protocol fee manager address",
          "_protocolFeeRecipient": "protocol fee recipient",
          "_royaltyFeeManager": "royalty fee manager address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only callable by owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "placeEnglishAuctionBid(address,uint256,uint256)": {
        "params": {
          "_amount": "amount of currency to bid",
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token",
          "_wavaxAmount": "amount of WAVAX to bid"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "settleDutchAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "settleDutchAuctionWithAVAXAndWAVAX(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "settleEnglishAuction(address,uint256)": {
        "details": "Note: - Can be called by creator at any time (including before the auction's end time to accept the   current latest bid) - Can be called by anyone after the auction ends - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient - Transfers ERC721 token to last highest bidder",
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)": {
        "details": "Note: - Requires the auction house to hold the ERC721 token in escrow - Drops in price every `dutchAuctionDropInterval` seconds in equal   amounts",
        "params": {
          "_collection": "address of ERC721 token",
          "_currency": "address of currency to sell ERC721 token for",
          "_dropInterval": "number of seconds between each drop in price",
          "_duration": "number of seconds for Dutch Auction to run",
          "_endPrice": "ending sell price",
          "_minPercentageToAsk": "minimum percentage of the gross amount that goes to ask",
          "_startPrice": "starting sell price",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "startEnglishAuction(address,uint256,address,uint96,uint256,uint256)": {
        "details": "Note this requires the auction house to hold the ERC721 token in escrow",
        "params": {
          "_collection": "address of ERC721 token",
          "_currency": "address of currency to sell ERC721 token for",
          "_duration": "number of seconds for English Auction to run",
          "_minPercentageToAsk": "minimum percentage of the gross amount that goes to ask",
          "_startPrice": "minimum starting bid price",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only callable by owner"
      },
      "updateCurrencyManager(address)": {
        "params": {
          "_currencyManager": "new currency manager address"
        }
      },
      "updateEnglishAuctionMinBidIncrementPct(uint256)": {
        "params": {
          "_englishAuctionMinBidIncrementPct": "new minimum bid increment percetange for English auctions"
        }
      },
      "updateEnglishAuctionRefreshTime(uint96)": {
        "params": {
          "_englishAuctionRefreshTime": "new refresh time for English auctions"
        }
      },
      "updateProtocolFeeManager(address)": {
        "params": {
          "_protocolFeeManager": "new protocol fee manager address"
        }
      },
      "updateProtocolFeeRecipient(address)": {
        "params": {
          "_protocolFeeRecipient": "new recipient for protocol fees"
        }
      },
      "updateRoyaltyFeeManager(address)": {
        "params": {
          "_royaltyFeeManager": "new fee manager address"
        }
      }
    },
    "stateVariables": {
      "dutchAuctions": {
        "details": "(collection address => token id => dutch auction)"
      },
      "englishAuctions": {
        "details": "(collection address => token id => english auction)"
      },
      "userLatestAuctionNonce": {
        "details": "(user address => latest nonce)"
      }
    },
    "title": "JoepegAuctionHouse",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelDutchAuction(address,uint256)": {
        "notice": "Cancels a running Dutch Auction"
      },
      "cancelEnglishAuction(address,uint256)": {
        "notice": "Cancels an English Auction"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "dutchAuctions(address,uint256)": {
        "notice": "Stores Dutch Auction data for NFTs"
      },
      "emergencyCancelDutchAuction(address,uint256)": {
        "notice": "Only owner function to cancel a Dutch Auction in case of emergencies"
      },
      "emergencyCancelEnglishAuction(address,uint256)": {
        "notice": "Only owner function to cancel an English Auction in case of emergencies"
      },
      "englishAuctionMinBidIncrementPct()": {
        "notice": "Required minimum percent increase from last bid in order to place a new bid on an English Auction"
      },
      "englishAuctionRefreshTime()": {
        "notice": "Represents both: - Number of seconds before an English Auction ends where any new   bid will extend the auction's end time - Number of seconds to extend an English Auction's end time by"
      },
      "englishAuctions(address,uint256)": {
        "notice": "Stores English Auction data for NFTs"
      },
      "getDutchAuctionSalePrice(address,uint256)": {
        "notice": "Calculates current Dutch Auction sale price for an ERC721 token"
      },
      "initialize(uint256,uint96,address,address,address,address)": {
        "notice": "Initializer"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Required implementation for IERC721Receiver"
      },
      "pause()": {
        "notice": "Function to pause the contract"
      },
      "placeEnglishAuctionBid(address,uint256,uint256)": {
        "notice": "Place bid on a running English Auction"
      },
      "placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)": {
        "notice": "Place bid on a running English Auction using AVAX and/or WAVAX"
      },
      "settleDutchAuction(address,uint256)": {
        "notice": "Settles a Dutch Auction"
      },
      "settleDutchAuctionWithAVAXAndWAVAX(address,uint256)": {
        "notice": "Settles a Dutch Auction with AVAX and/or WAVAX"
      },
      "settleEnglishAuction(address,uint256)": {
        "notice": "Settles an English Auction"
      },
      "startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)": {
        "notice": "Starts a Dutch Auction for an ERC721 token"
      },
      "startEnglishAuction(address,uint256,address,uint96,uint256,uint256)": {
        "notice": "Starts an English Auction for an ERC721 token"
      },
      "unpause()": {
        "notice": "Function to unpause the contract"
      },
      "updateCurrencyManager(address)": {
        "notice": "Update currency manager"
      },
      "updateEnglishAuctionMinBidIncrementPct(uint256)": {
        "notice": "Update `englishAuctionMinBidIncrementPct`"
      },
      "updateEnglishAuctionRefreshTime(uint96)": {
        "notice": "Update `englishAuctionRefreshTime`"
      },
      "updateProtocolFeeManager(address)": {
        "notice": "Update protocol fee manager"
      },
      "updateProtocolFeeRecipient(address)": {
        "notice": "Update protocol fee recipient"
      },
      "updateRoyaltyFeeManager(address)": {
        "notice": "Update royalty fee manager"
      },
      "userLatestAuctionNonce(address)": {
        "notice": "Stores latest auction nonce per user"
      }
    },
    "notice": "An auction house that supports running English and Dutch auctions on ERC721 tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5649,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "currencyManager",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(ICurrencyManager)10929"
      },
      {
        "astId": 5652,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "protocolFeeManager",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IProtocolFeeManager)11183"
      },
      {
        "astId": 5655,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "royaltyFeeManager",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IRoyaltyFeeManager)11199"
      },
      {
        "astId": 5657,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "protocolFeeRecipient",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 5662,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "userLatestAuctionNonce",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5670,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "dutchAuctions",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DutchAuction)5624_storage))"
      },
      {
        "astId": 5678,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "englishAuctions",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(EnglishAuction)5641_storage))"
      },
      {
        "astId": 5681,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "englishAuctionMinBidIncrementPct",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 5684,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "englishAuctionRefreshTime",
        "offset": 0,
        "slot": "209",
        "type": "t_uint96"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICurrencyManager)10929": {
        "encoding": "inplace",
        "label": "contract ICurrencyManager",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocolFeeManager)11183": {
        "encoding": "inplace",
        "label": "contract IProtocolFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyFeeManager)11199": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DutchAuction)5624_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct JoepegAuctionHouse.DutchAuction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DutchAuction)5624_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(EnglishAuction)5641_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct JoepegAuctionHouse.EnglishAuction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(EnglishAuction)5641_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DutchAuction)5624_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JoepegAuctionHouse.DutchAuction)",
        "numberOfBytes": "32",
        "value": "t_struct(DutchAuction)5624_storage"
      },
      "t_mapping(t_uint256,t_struct(EnglishAuction)5641_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JoepegAuctionHouse.EnglishAuction)",
        "numberOfBytes": "32",
        "value": "t_struct(EnglishAuction)5641_storage"
      },
      "t_struct(DutchAuction)5624_storage": {
        "encoding": "inplace",
        "label": "struct JoepegAuctionHouse.DutchAuction",
        "members": [
          {
            "astId": 5607,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5609,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 5611,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5613,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "endTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 5615,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5617,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5619,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "endPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5621,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "dropInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5623,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "minPercentageToAsk",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(EnglishAuction)5641_storage": {
        "encoding": "inplace",
        "label": "struct JoepegAuctionHouse.EnglishAuction",
        "members": [
          {
            "astId": 5626,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5628,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5630,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "lastBidder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5632,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "endTime",
            "offset": 20,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 5634,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "nonce",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5636,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "lastBidPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5638,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5640,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "minPercentageToAsk",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}