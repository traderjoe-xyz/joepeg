{
  "address": "0x859A0B8ff8E076Dd69cD152b95914FF446ec159b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_joepegExchange",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "JOEPEG_EXCHANGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferNonFungibleToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdd6d5c014bdd143eb36e401a312051fcc6c0cc305793eacbb65922e3f14de99",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0x859A0B8ff8E076Dd69cD152b95914FF446ec159b",
    "transactionIndex": 0,
    "gasUsed": "173951",
    "logsBloom": "0x
    "blockHash": "0x736fc0296f5bcba4a0a9ba6c14c4e4cb099255569da0025cbdad58b8fca15607",
    "transactionHash": "0xcdd6d5c014bdd143eb36e401a312051fcc6c0cc305793eacbb65922e3f14de99",
    "logs": [],
    "blockNumber": 8620920,
    "cumulativeGasUsed": "173951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71248d4c6D8264A57881f35374bdb78dFc347180"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1f2df6fff78a7d04e1d58a9a2e894c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_joepegExchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"JOEPEG_EXCHANGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferNonFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_joepegExchange\":\"address of the Joepeg exchange\"}},\"transferNonFungibleToken(address,address,address,uint256,uint256)\":{\"details\":\"For ERC721, amount is not used\",\"params\":{\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}}},\"title\":\"TransferManagerERC721\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"transferNonFungibleToken(address,address,address,uint256,uint256)\":{\"notice\":\"Transfer ERC721 token\"}},\"notice\":\"It allows the transfer of ERC721 tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferManagerERC721.sol\":\"TransferManagerERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TransferManagerERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {ITransferManagerNFT} from \\\"./interfaces/ITransferManagerNFT.sol\\\";\\n\\n/**\\n * @title TransferManagerERC721\\n * @notice It allows the transfer of ERC721 tokens.\\n */\\ncontract TransferManagerERC721 is ITransferManagerNFT {\\n    address public immutable JOEPEG_EXCHANGE;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _joepegExchange address of the Joepeg exchange\\n     */\\n    constructor(address _joepegExchange) {\\n        JOEPEG_EXCHANGE = _joepegExchange;\\n    }\\n\\n    /**\\n     * @notice Transfer ERC721 token\\n     * @param collection address of the collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     * @dev For ERC721, amount is not used\\n     */\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external override {\\n        require(msg.sender == JOEPEG_EXCHANGE, \\\"Transfer: Only JoepegExchange\\\");\\n        // https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-safeTransferFrom\\n        IERC721(collection).safeTransferFrom(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x50ce72a85ae8d0fda3a51f7e6ecbbb02ac9b1a2cf69f4328cee4ca28d8015acb\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferManagerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferManagerNFT {\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x725f4c4a9b85f34b496d26562c0d9c09aeeeb8275e7ceaac5eb411810cc12301\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516102be3803806102be83398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c6102276100976000396000818160550152609e01526102276000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806333f2fa9f1461003b578063c3090bad14610050575b600080fd5b61004e61004936600461019c565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461010f5760405162461bcd60e51b815260206004820152601d60248201527f5472616e736665723a204f6e6c79204a6f6570656745786368616e6765000000604482015260640160405180910390fd5b604051632142170760e11b81526001600160a01b0385811660048301528481166024830152604482018490528616906342842e0e90606401600060405180830381600087803b15801561016157600080fd5b505af1158015610175573d6000803e3d6000fd5b505050505050505050565b80356001600160a01b038116811461019757600080fd5b919050565b600080600080600060a086880312156101b457600080fd5b6101bd86610180565b94506101cb60208701610180565b93506101d960408701610180565b9497939650939460608101359450608001359291505056fea26469706673582212201e4e5cc673bf6fc28cb2cb317503e0b1f4babc94c86976cb7b18f268e45f028a64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806333f2fa9f1461003b578063c3090bad14610050575b600080fd5b61004e61004936600461019c565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461010f5760405162461bcd60e51b815260206004820152601d60248201527f5472616e736665723a204f6e6c79204a6f6570656745786368616e6765000000604482015260640160405180910390fd5b604051632142170760e11b81526001600160a01b0385811660048301528481166024830152604482018490528616906342842e0e90606401600060405180830381600087803b15801561016157600080fd5b505af1158015610175573d6000803e3d6000fd5b505050505050505050565b80356001600160a01b038116811461019757600080fd5b919050565b600080600080600060a086880312156101b457600080fd5b6101bd86610180565b94506101cb60208701610180565b93506101d960408701610180565b9497939650939460608101359450608001359291505056fea26469706673582212201e4e5cc673bf6fc28cb2cb317503e0b1f4babc94c86976cb7b18f268e45f028a64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_joepegExchange": "address of the Joepeg exchange"
        }
      },
      "transferNonFungibleToken(address,address,address,uint256,uint256)": {
        "details": "For ERC721, amount is not used",
        "params": {
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      }
    },
    "title": "TransferManagerERC721",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "transferNonFungibleToken(address,address,address,uint256,uint256)": {
        "notice": "Transfer ERC721 token"
      }
    },
    "notice": "It allows the transfer of ERC721 tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}