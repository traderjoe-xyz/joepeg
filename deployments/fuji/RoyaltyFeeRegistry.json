{
  "address": "0xd5888605FFab7A0f522f1A6Cd57FC35F5d5a7F00",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "NewRoyaltyFeeLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyFeeUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "royaltyFeeInfoCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13866867ce62c27900d082e5f91cbe564df51d51fc1ba15ea8840660cf6a9df3",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0xd5888605FFab7A0f522f1A6Cd57FC35F5d5a7F00",
    "transactionIndex": 0,
    "gasUsed": "461760",
    "logsBloom": "0x
    "blockHash": "0xe12304467c0e6e6e366139a147b69e10189c2f5dc55bdb54d573a4cbdd1234ff",
    "transactionHash": "0x13866867ce62c27900d082e5f91cbe564df51d51fc1ba15ea8840660cf6a9df3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8620851,
        "transactionHash": "0x13866867ce62c27900d082e5f91cbe564df51d51fc1ba15ea8840660cf6a9df3",
        "address": "0xd5888605FFab7A0f522f1A6Cd57FC35F5d5a7F00",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c2d38178069757648fefb5440737c2ae1671f19d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe12304467c0e6e6e366139a147b69e10189c2f5dc55bdb54d573a4cbdd1234ff"
      }
    ],
    "blockNumber": 8620851,
    "cumulativeGasUsed": "461760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000
  ],
  "numDeployments": 1,
  "solcInputHash": "d1f2df6fff78a7d04e1d58a9a2e894c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"NewRoyaltyFeeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"royaltyFeeInfoCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyFeeInfoCollection(address)\":{\"params\":{\"collection\":\"collection address\"}},\"royaltyInfo(address,uint256)\":{\"params\":{\"amount\":\"amount\",\"collection\":\"collection address\"},\"returns\":{\"_0\":\"receiver address and amount received by royalty recipient\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}}},\"title\":\"RoyaltyFeeRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"royaltyFeeInfoCollection(address)\":{\"notice\":\"View royalty info for a collection address\"},\"royaltyInfo(address,uint256)\":{\"notice\":\"Calculate royalty info for a collection address and a sale gross amount\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"It is a royalty fee registry for the Joepeg exchange.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeRegistry.sol\":\"RoyaltyFeeRegistry\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeRegistry\\n * @notice It is a royalty fee registry for the Joepeg exchange.\\n */\\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {\\n    struct FeeInfo {\\n        address setter;\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\\n    uint256 public royaltyFeeLimit;\\n\\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\\n\\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\\n    event RoyaltyFeeUpdate(\\n        address indexed collection,\\n        address indexed setter,\\n        address indexed receiver,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    constructor(uint256 _royaltyFeeLimit) {\\n        require(_royaltyFeeLimit <= 9500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_royaltyFeeLimit <= 9500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n\\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external override onlyOwner {\\n        require(fee <= royaltyFeeLimit, \\\"Registry: Royalty fee too high\\\");\\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\\n            setter: setter,\\n            receiver: receiver,\\n            fee: fee\\n        });\\n\\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty info for a collection address and a sale gross amount\\n     * @param collection collection address\\n     * @param amount amount\\n     * @return receiver address and amount received by royalty recipient\\n     */\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\\n        );\\n    }\\n\\n    /**\\n     * @notice View royalty info for a collection address\\n     * @param collection collection address\\n     */\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].setter,\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            _royaltyFeeInfoCollection[collection].fee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x13a01a835cf250fb9cdb3c7e72b0270aea59136af89502ddbc68585b1d7daa5f\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x26ee0d6a50c317b22494ad09ff62d8469b24a51252be563dfb63512ff377c41d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161079438038061079483398101604081905261002f916100f0565b610038336100a0565b61251c8111156100985760405162461bcd60e51b815260206004820152602160248201527f4f776e65723a20526f79616c747920666565206c696d697420746f6f206869676044820152600d60fb1b606482015260840160405180910390fd5b600155610109565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561010257600080fd5b5051919050565b61067c806101186000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b9223c9d1161005b578063b9223c9d14610100578063bbdf9b6814610113578063e31ef91c14610126578063f2fde38b1461018b57600080fd5b80632782d6c71461008d5780634fb7d3f9146100c4578063715018a6146100db5780638da5cb5b146100e5575b600080fd5b6100a061009b36600461057f565b61019e565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100cd60015481565b6040519081526020016100bb565b6100e36101eb565b005b6000546040516001600160a01b0390911681526020016100bb565b6100e361010e3660046105a9565b61022a565b6100e3610121366004610534565b6102eb565b610165610134366004610512565b6001600160a01b03908116600090815260026020819052604090912080546001820154919092015491831693921691565b604080516001600160a01b039485168152939092166020840152908201526060016100bb565b6100e3610199366004610512565b61040b565b6001600160a01b0380831660009081526002602081905260408220600181015491015491928392911690612710906101d69086610619565b6101e091906105f7565b915091509250929050565b6000546001600160a01b0316331461021e5760405162461bcd60e51b8152600401610215906105c2565b60405180910390fd5b61022860006104a6565b565b6000546001600160a01b031633146102545760405162461bcd60e51b8152600401610215906105c2565b61251c8111156102b05760405162461bcd60e51b815260206004820152602160248201527f4f776e65723a20526f79616c747920666565206c696d697420746f6f206869676044820152600d60fb1b6064820152608401610215565b60018190556040518181527f2da7166c72ef3860ef4fb2571105533c40615269a6dbc38ce0b264910df1c2569060200160405180910390a150565b6000546001600160a01b031633146103155760405162461bcd60e51b8152600401610215906105c2565b6001548111156103675760405162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f206869676800006044820152606401610215565b604080516060810182526001600160a01b0385811680835285821660208085018281528587018881528b861660008181526002808652908a9020985189549089166001600160a01b0319918216178a55935160018a0180549190991694169390931790965551950194909455935185815290927fd01984afa6e37420452e575e7d99dd7e632b3ec8ea2adec998475b76ca494d64910160405180910390a450505050565b6000546001600160a01b031633146104355760405162461bcd60e51b8152600401610215906105c2565b6001600160a01b03811661049a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610215565b6104a3816104a6565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461050d57600080fd5b919050565b60006020828403121561052457600080fd5b61052d826104f6565b9392505050565b6000806000806080858703121561054a57600080fd5b610553856104f6565b9350610561602086016104f6565b925061056f604086016104f6565b9396929550929360600135925050565b6000806040838503121561059257600080fd5b61059b836104f6565b946020939093013593505050565b6000602082840312156105bb57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261061457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561064157634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212208ea9a12d812876d9de0fcafef25bfb1bd09b540f3bb15e462b680d40d22aea5864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063b9223c9d1161005b578063b9223c9d14610100578063bbdf9b6814610113578063e31ef91c14610126578063f2fde38b1461018b57600080fd5b80632782d6c71461008d5780634fb7d3f9146100c4578063715018a6146100db5780638da5cb5b146100e5575b600080fd5b6100a061009b36600461057f565b61019e565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100cd60015481565b6040519081526020016100bb565b6100e36101eb565b005b6000546040516001600160a01b0390911681526020016100bb565b6100e361010e3660046105a9565b61022a565b6100e3610121366004610534565b6102eb565b610165610134366004610512565b6001600160a01b03908116600090815260026020819052604090912080546001820154919092015491831693921691565b604080516001600160a01b039485168152939092166020840152908201526060016100bb565b6100e3610199366004610512565b61040b565b6001600160a01b0380831660009081526002602081905260408220600181015491015491928392911690612710906101d69086610619565b6101e091906105f7565b915091509250929050565b6000546001600160a01b0316331461021e5760405162461bcd60e51b8152600401610215906105c2565b60405180910390fd5b61022860006104a6565b565b6000546001600160a01b031633146102545760405162461bcd60e51b8152600401610215906105c2565b61251c8111156102b05760405162461bcd60e51b815260206004820152602160248201527f4f776e65723a20526f79616c747920666565206c696d697420746f6f206869676044820152600d60fb1b6064820152608401610215565b60018190556040518181527f2da7166c72ef3860ef4fb2571105533c40615269a6dbc38ce0b264910df1c2569060200160405180910390a150565b6000546001600160a01b031633146103155760405162461bcd60e51b8152600401610215906105c2565b6001548111156103675760405162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f206869676800006044820152606401610215565b604080516060810182526001600160a01b0385811680835285821660208085018281528587018881528b861660008181526002808652908a9020985189549089166001600160a01b0319918216178a55935160018a0180549190991694169390931790965551950194909455935185815290927fd01984afa6e37420452e575e7d99dd7e632b3ec8ea2adec998475b76ca494d64910160405180910390a450505050565b6000546001600160a01b031633146104355760405162461bcd60e51b8152600401610215906105c2565b6001600160a01b03811661049a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610215565b6104a3816104a6565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461050d57600080fd5b919050565b60006020828403121561052457600080fd5b61052d826104f6565b9392505050565b6000806000806080858703121561054a57600080fd5b610553856104f6565b9350610561602086016104f6565b925061056f604086016104f6565b9396929550929360600135925050565b6000806040838503121561059257600080fd5b61059b836104f6565b946020939093013593505050565b6000602082840312156105bb57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261061457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561064157634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212208ea9a12d812876d9de0fcafef25bfb1bd09b540f3bb15e462b680d40d22aea5864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyFeeInfoCollection(address)": {
        "params": {
          "collection": "collection address"
        }
      },
      "royaltyInfo(address,uint256)": {
        "params": {
          "amount": "amount",
          "collection": "collection address"
        },
        "returns": {
          "_0": "receiver address and amount received by royalty recipient"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      }
    },
    "title": "RoyaltyFeeRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "royaltyFeeInfoCollection(address)": {
        "notice": "View royalty info for a collection address"
      },
      "royaltyInfo(address,uint256)": {
        "notice": "Calculate royalty info for a collection address and a sale gross amount"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "It is a royalty fee registry for the Joepeg exchange.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4888,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "royaltyFeeLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4893,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_royaltyFeeInfoCollection",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FeeInfo)4886_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FeeInfo)4886_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltyFeeRegistry.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)4886_storage"
      },
      "t_struct(FeeInfo)4886_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyFeeRegistry.FeeInfo",
        "members": [
          {
            "astId": 4881,
            "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "setter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4883,
            "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4885,
            "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}