{
  "language": "Solidity",
  "sources": {
    "contracts/CurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\n\n/**\n * @title CurrencyManager\n * @notice It allows adding/removing currencies for trading on the Joepeg exchange.\n */\ncontract CurrencyManager is\n    ICurrencyManager,\n    Initializable,\n    OwnableUpgradeable\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _whitelistedCurrencies;\n\n    event CurrencyRemoved(address indexed currency);\n    event CurrencyWhitelisted(address indexed currency);\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    /**\n     * @notice Add a currency in the system\n     * @param currency address of the currency to add\n     */\n    function addCurrency(address currency) external override onlyOwner {\n        require(\n            !_whitelistedCurrencies.contains(currency),\n            \"Currency: Already whitelisted\"\n        );\n        _whitelistedCurrencies.add(currency);\n\n        emit CurrencyWhitelisted(currency);\n    }\n\n    /**\n     * @notice Remove a currency from the system\n     * @param currency address of the currency to remove\n     */\n    function removeCurrency(address currency) external override onlyOwner {\n        require(\n            _whitelistedCurrencies.contains(currency),\n            \"Currency: Not whitelisted\"\n        );\n        _whitelistedCurrencies.remove(currency);\n\n        emit CurrencyRemoved(currency);\n    }\n\n    /**\n     * @notice Returns if a currency is in the system\n     * @param currency address of the currency\n     */\n    function isCurrencyWhitelisted(address currency)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _whitelistedCurrencies.contains(currency);\n    }\n\n    /**\n     * @notice View number of whitelisted currencies\n     */\n    function viewCountWhitelistedCurrencies()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _whitelistedCurrencies.length();\n    }\n\n    /**\n     * @notice See whitelisted currencies in the system\n     * @param cursor cursor (should start at 0 for first request)\n     * @param size size of the response (e.g., 50)\n     */\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\n        external\n        view\n        override\n        returns (address[] memory, uint256)\n    {\n        uint256 length = size;\n\n        if (length > _whitelistedCurrencies.length() - cursor) {\n            length = _whitelistedCurrencies.length() - cursor;\n        }\n\n        address[] memory whitelistedCurrencies = new address[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            whitelistedCurrencies[i] = _whitelistedCurrencies.at(cursor + i);\n        }\n\n        return (whitelistedCurrencies, cursor + length);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/ICurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurrencyManager {\n    function addCurrency(address currency) external;\n\n    function removeCurrency(address currency) external;\n\n    function isCurrencyWhitelisted(address currency)\n        external\n        view\n        returns (bool);\n\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\n        external\n        view\n        returns (address[] memory, uint256);\n\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/JoepegExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// Joepeg interfaces\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\nimport {IProtocolFeeManager} from \"./interfaces/IProtocolFeeManager.sol\";\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\nimport {IJoepegExchange} from \"./interfaces/IJoepegExchange.sol\";\nimport {ITransferManagerNFT} from \"./interfaces/ITransferManagerNFT.sol\";\nimport {ITransferSelectorNFT} from \"./interfaces/ITransferSelectorNFT.sol\";\nimport {IWAVAX} from \"./interfaces/IWAVAX.sol\";\n\n// Joepeg libraries\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\nimport {SignatureChecker} from \"./libraries/SignatureChecker.sol\";\n\n/**\n * @title JoepegExchange\n * @notice Fork of the LooksRareExchange contract with some minor additions.\n */\ncontract JoepegExchange is\n    IJoepegExchange,\n    Initializable,\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    using OrderTypes for OrderTypes.MakerOrder;\n    using OrderTypes for OrderTypes.TakerOrder;\n\n    uint256 public immutable PERCENTAGE_PRECISION = 10000;\n\n    address public WAVAX;\n    bytes32 public domainSeparator;\n\n    address public protocolFeeRecipient;\n\n    ICurrencyManager public currencyManager;\n    IExecutionManager public executionManager;\n    IProtocolFeeManager public protocolFeeManager;\n    IRoyaltyFeeManager public royaltyFeeManager;\n    ITransferSelectorNFT public transferSelectorNFT;\n\n    mapping(address => uint256) public userMinOrderNonce;\n    mapping(address => mapping(uint256 => bool))\n        private _isUserOrderNonceExecutedOrCancelled;\n\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\n    event NewCurrencyManager(address indexed currencyManager);\n    event NewExecutionManager(address indexed executionManager);\n    event NewProtocolFeeManager(address indexed protocolFeeManager);\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\n\n    event RoyaltyPayment(\n        address indexed collection,\n        uint256 indexed tokenId,\n        address indexed royaltyRecipient,\n        address currency,\n        uint256 amount\n    );\n\n    event TakerAsk(\n        bytes32 orderHash, // bid hash of the maker order\n        uint256 orderNonce, // user order nonce\n        address indexed taker, // sender address for the taker ask order\n        address indexed maker, // maker address of the initial bid order\n        address indexed strategy, // strategy that defines the execution\n        address currency, // currency address\n        address collection, // collection address\n        uint256 tokenId, // tokenId transferred\n        uint256 amount, // amount of tokens transferred\n        uint256 price // final transacted price\n    );\n\n    event TakerBid(\n        bytes32 orderHash, // ask hash of the maker order\n        uint256 orderNonce, // user order nonce\n        address indexed taker, // sender address for the taker bid order\n        address indexed maker, // maker address of the initial ask order\n        address indexed strategy, // strategy that defines the execution\n        address currency, // currency address\n        address collection, // collection address\n        uint256 tokenId, // tokenId transferred\n        uint256 amount, // amount of tokens transferred\n        uint256 price // final transacted price\n    );\n\n    /**\n     * @notice Constructor\n     * @param _currencyManager currency manager address\n     * @param _executionManager execution manager address\n     * @param _protocolFeeManager protocol fee manager address\n     * @param _royaltyFeeManager royalty fee manager address\n     * @param _WAVAX wrapped ether address (for other chains, use wrapped native asset)\n     * @param _protocolFeeRecipient protocol fee recipient\n     */\n    function initialize(\n        address _currencyManager,\n        address _executionManager,\n        address _protocolFeeManager,\n        address _royaltyFeeManager,\n        address _WAVAX,\n        address _protocolFeeRecipient\n    ) public initializer {\n        __ReentrancyGuard_init();\n        __Ownable_init();\n\n        // Calculate the domain separator\n        domainSeparator = keccak256(\n            abi.encode(\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n                0x09c73de1316dde4c80e91bee77727ccdf2cbf7435c9e4c7db6c37af85fa4afcb, // keccak256(\"JoepegExchange\")\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\"1\")) for versionId = 1\n                block.chainid,\n                address(this)\n            )\n        );\n\n        currencyManager = ICurrencyManager(_currencyManager);\n        executionManager = IExecutionManager(_executionManager);\n        protocolFeeManager = IProtocolFeeManager(_protocolFeeManager);\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\n        WAVAX = _WAVAX;\n        protocolFeeRecipient = _protocolFeeRecipient;\n    }\n\n    /**\n     * @notice Cancel all pending orders for a sender\n     * @param minNonce minimum user nonce\n     */\n    function cancelAllOrdersForSender(uint256 minNonce) external {\n        require(\n            minNonce > userMinOrderNonce[msg.sender],\n            \"Cancel: Order nonce lower than current\"\n        );\n        require(\n            minNonce < userMinOrderNonce[msg.sender] + 500000,\n            \"Cancel: Cannot cancel more orders\"\n        );\n        userMinOrderNonce[msg.sender] = minNonce;\n\n        emit CancelAllOrders(msg.sender, minNonce);\n    }\n\n    /**\n     * @notice Cancel maker orders\n     * @param orderNonces array of order nonces\n     */\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces)\n        external\n    {\n        require(orderNonces.length > 0, \"Cancel: Cannot be empty\");\n\n        for (uint256 i = 0; i < orderNonces.length; i++) {\n            require(\n                orderNonces[i] >= userMinOrderNonce[msg.sender],\n                \"Cancel: Order nonce lower than current\"\n            );\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][\n                orderNonces[i]\n            ] = true;\n        }\n\n        emit CancelMultipleOrders(msg.sender, orderNonces);\n    }\n\n    /**\n     * @notice Match ask with a taker bid order using AVAX\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function matchAskWithTakerBidUsingAVAXAndWAVAX(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external payable override nonReentrant {\n        // Transfer WAVAX if needed\n        _transferWAVAXIfNeeded(takerBid.price);\n        // Wrap AVAX sent to this contract\n        IWAVAX(WAVAX).deposit{value: msg.value}();\n        // Match orders\n        _matchAskWithTakerBidUsingAVAXAndWAVAX(takerBid, makerAsk);\n    }\n\n    /**\n     * @notice Match ask with a taker bid order using AVAX\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function _matchAskWithTakerBidUsingAVAXAndWAVAX(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) internal {\n        require(\n            (makerAsk.isOrderAsk) && (!takerBid.isOrderAsk),\n            \"Order: Wrong sides\"\n        );\n        require(makerAsk.currency == WAVAX, \"Order: Currency must be WAVAX\");\n        require(\n            msg.sender == takerBid.taker,\n            \"Order: Taker must be the sender\"\n        );\n\n        // Check the maker ask order\n        bytes32 askHash = makerAsk.hash();\n        _validateOrder(makerAsk, askHash);\n\n        // Retrieve execution parameters\n        (\n            bool isExecutionValid,\n            uint256 tokenId,\n            uint256 amount\n        ) = IExecutionStrategy(makerAsk.strategy).canExecuteTakerBid(\n                takerBid,\n                makerAsk\n            );\n\n        require(isExecutionValid, \"Strategy: Execution invalid\");\n\n        // Update maker ask order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][\n            makerAsk.nonce\n        ] = true;\n\n        // Execution part 1/2\n        _transferFeesAndFundsWithWAVAX(\n            makerAsk.collection,\n            tokenId,\n            makerAsk.signer,\n            takerBid.price,\n            makerAsk.minPercentageToAsk\n        );\n\n        // Execution part 2/2\n        _transferNonFungibleToken(\n            makerAsk.collection,\n            makerAsk.signer,\n            takerBid.taker,\n            tokenId,\n            amount\n        );\n\n        emit TakerBid(\n            askHash,\n            makerAsk.nonce,\n            takerBid.taker,\n            makerAsk.signer,\n            makerAsk.strategy,\n            makerAsk.currency,\n            makerAsk.collection,\n            tokenId,\n            amount,\n            takerBid.price\n        );\n    }\n\n    /**\n     * @notice Transfer WAVAX from the buyer if not enough AVAX to cover the cost\n     * @param cost the total cost of the sale\n     */\n    function _transferWAVAXIfNeeded(uint256 cost) internal {\n        if (cost > msg.value) {\n            IERC20(WAVAX).safeTransferFrom(\n                msg.sender,\n                address(this),\n                (cost - msg.value)\n            );\n        } else {\n            require(cost == msg.value, \"Order: Msg.value too high\");\n        }\n    }\n\n    /**\n     * @notice Match a takerBid with a matchAsk\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function matchAskWithTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external override nonReentrant {\n        require(\n            (makerAsk.isOrderAsk) && (!takerBid.isOrderAsk),\n            \"Order: Wrong sides\"\n        );\n        require(\n            msg.sender == takerBid.taker,\n            \"Order: Taker must be the sender\"\n        );\n\n        // Check the maker ask order\n        bytes32 askHash = makerAsk.hash();\n        _validateOrder(makerAsk, askHash);\n\n        (\n            bool isExecutionValid,\n            uint256 tokenId,\n            uint256 amount\n        ) = IExecutionStrategy(makerAsk.strategy).canExecuteTakerBid(\n                takerBid,\n                makerAsk\n            );\n\n        require(isExecutionValid, \"Strategy: Execution invalid\");\n\n        // Update maker ask order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][\n            makerAsk.nonce\n        ] = true;\n\n        // Execution part 1/2\n        _transferFeesAndFunds(\n            makerAsk.collection,\n            tokenId,\n            makerAsk.currency,\n            msg.sender,\n            makerAsk.signer,\n            takerBid.price,\n            makerAsk.minPercentageToAsk\n        );\n\n        // Execution part 2/2\n        _transferNonFungibleToken(\n            makerAsk.collection,\n            makerAsk.signer,\n            takerBid.taker,\n            tokenId,\n            amount\n        );\n\n        emit TakerBid(\n            askHash,\n            makerAsk.nonce,\n            takerBid.taker,\n            makerAsk.signer,\n            makerAsk.strategy,\n            makerAsk.currency,\n            makerAsk.collection,\n            tokenId,\n            amount,\n            takerBid.price\n        );\n    }\n\n    /**\n     * @notice Match a takerAsk with a makerBid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     */\n    function matchBidWithTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    ) external override nonReentrant {\n        require(\n            (!makerBid.isOrderAsk) && (takerAsk.isOrderAsk),\n            \"Order: Wrong sides\"\n        );\n        require(\n            msg.sender == takerAsk.taker,\n            \"Order: Taker must be the sender\"\n        );\n\n        // Check the maker bid order\n        bytes32 bidHash = makerBid.hash();\n        _validateOrder(makerBid, bidHash);\n\n        (\n            bool isExecutionValid,\n            uint256 tokenId,\n            uint256 amount\n        ) = IExecutionStrategy(makerBid.strategy).canExecuteTakerAsk(\n                takerAsk,\n                makerBid\n            );\n\n        require(isExecutionValid, \"Strategy: Execution invalid\");\n\n        // Update maker bid order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][\n            makerBid.nonce\n        ] = true;\n\n        // Execution part 1/2\n        _transferNonFungibleToken(\n            makerBid.collection,\n            msg.sender,\n            makerBid.signer,\n            tokenId,\n            amount\n        );\n\n        // Execution part 2/2\n        _transferFeesAndFunds(\n            makerBid.collection,\n            tokenId,\n            makerBid.currency,\n            makerBid.signer,\n            takerAsk.taker,\n            takerAsk.price,\n            takerAsk.minPercentageToAsk\n        );\n\n        emit TakerAsk(\n            bidHash,\n            makerBid.nonce,\n            takerAsk.taker,\n            makerBid.signer,\n            makerBid.strategy,\n            makerBid.currency,\n            makerBid.collection,\n            tokenId,\n            amount,\n            takerAsk.price\n        );\n    }\n\n    /**\n     * @notice Update currency manager\n     * @param _currencyManager new currency manager address\n     */\n    function updateCurrencyManager(address _currencyManager)\n        external\n        onlyOwner\n    {\n        require(\n            _currencyManager != address(0),\n            \"Owner: Cannot be null address\"\n        );\n        currencyManager = ICurrencyManager(_currencyManager);\n        emit NewCurrencyManager(_currencyManager);\n    }\n\n    /**\n     * @notice Update execution manager\n     * @param _executionManager new execution manager address\n     */\n    function updateExecutionManager(address _executionManager)\n        external\n        onlyOwner\n    {\n        require(\n            _executionManager != address(0),\n            \"Owner: Cannot be null address\"\n        );\n        executionManager = IExecutionManager(_executionManager);\n        emit NewExecutionManager(_executionManager);\n    }\n\n    /**\n     * @notice Update protocol fee manager\n     * @param _protocolFeeManager new protocol fee manager address\n     */\n    function updateProtocolFeeManager(address _protocolFeeManager)\n        external\n        onlyOwner\n    {\n        require(\n            _protocolFeeManager != address(0),\n            \"Owner: Cannot be null address\"\n        );\n        protocolFeeManager = IProtocolFeeManager(_protocolFeeManager);\n        emit NewProtocolFeeManager(_protocolFeeManager);\n    }\n\n    /**\n     * @notice Update protocol fee recipient\n     * @param _protocolFeeRecipient new recipient for protocol fees\n     */\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient)\n        external\n        onlyOwner\n    {\n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\n    }\n\n    /**\n     * @notice Update royalty fee manager\n     * @param _royaltyFeeManager new fee manager address\n     */\n    function updateRoyaltyFeeManager(address _royaltyFeeManager)\n        external\n        onlyOwner\n    {\n        require(\n            _royaltyFeeManager != address(0),\n            \"Owner: Cannot be null address\"\n        );\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\n    }\n\n    /**\n     * @notice Update transfer selector NFT\n     * @param _transferSelectorNFT new transfer selector address\n     */\n    function updateTransferSelectorNFT(address _transferSelectorNFT)\n        external\n        onlyOwner\n    {\n        require(\n            _transferSelectorNFT != address(0),\n            \"Owner: Cannot be null address\"\n        );\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\n\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\n    }\n\n    /**\n     * @notice Check whether user order nonce is executed or cancelled\n     * @param user address of user\n     * @param orderNonce nonce of the order\n     */\n    function isUserOrderNonceExecutedOrCancelled(\n        address user,\n        uint256 orderNonce\n    ) external view returns (bool) {\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\n    }\n\n    /**\n     * @notice Match multiple asks with their respective taker bid order using AVAX and WAVAX\n     * @param trades an array of trades\n     */\n    function batchBuyWithAVAXAndWAVAX(Trade[] calldata trades)\n        external\n        payable\n        nonReentrant\n    {\n        // Calculate the total cost of all orders\n        uint256 totalCost;\n        for (uint256 i; i < trades.length; ++i) {\n            totalCost += trades[i].takerBid.price;\n        }\n\n        // Transfer WAVAX if needed\n        _transferWAVAXIfNeeded(totalCost);\n\n        // Wrap AVAX sent to this contract\n        IWAVAX(WAVAX).deposit{value: msg.value}();\n\n        // Match orders\n        for (uint256 i; i < trades.length; ++i) {\n            _matchAskWithTakerBidUsingAVAXAndWAVAX(\n                trades[i].takerBid,\n                trades[i].makerAsk\n            );\n        }\n    }\n\n    /**\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\n     * @param collection non fungible token address for the transfer\n     * @param tokenId tokenId\n     * @param currency address of token being used for the purchase (e.g., WAVAX/USDC)\n     * @param from sender of the funds\n     * @param to seller's recipient\n     * @param amount amount being transferred (in currency)\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\n     */\n    function _transferFeesAndFunds(\n        address collection,\n        uint256 tokenId,\n        address currency,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 minPercentageToAsk\n    ) internal {\n        // Initialize the final amount that is transferred to seller\n        uint256 finalSellerAmount = amount;\n\n        // 1. Protocol fee\n        {\n            uint256 protocolFeeAmount = _calculateProtocolFee(\n                collection,\n                amount\n            );\n\n            // Check if the protocol fee is different than 0 for this strategy\n            if (\n                (protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)\n            ) {\n                IERC20(currency).safeTransferFrom(\n                    from,\n                    protocolFeeRecipient,\n                    protocolFeeAmount\n                );\n                finalSellerAmount -= protocolFeeAmount;\n            }\n        }\n\n        // 2. Royalty fee\n        {\n            (\n                address royaltyFeeRecipient,\n                uint256 royaltyFeeAmount\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\n                    collection,\n                    tokenId,\n                    amount\n                );\n\n            // Check if there is a royalty fee and that it is different to 0\n            if (\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\n            ) {\n                IERC20(currency).safeTransferFrom(\n                    from,\n                    royaltyFeeRecipient,\n                    royaltyFeeAmount\n                );\n                finalSellerAmount -= royaltyFeeAmount;\n\n                emit RoyaltyPayment(\n                    collection,\n                    tokenId,\n                    royaltyFeeRecipient,\n                    currency,\n                    royaltyFeeAmount\n                );\n            }\n        }\n\n        require(\n            (finalSellerAmount * PERCENTAGE_PRECISION) >=\n                (minPercentageToAsk * amount),\n            \"Fees: Higher than expected\"\n        );\n\n        // 3. Transfer final amount (post-fees) to seller\n        {\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\n        }\n    }\n\n    /**\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\n     * @param collection non fungible token address for the transfer\n     * @param tokenId tokenId\n     * @param to seller's recipient\n     * @param amount amount being transferred (in currency)\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\n     */\n    function _transferFeesAndFundsWithWAVAX(\n        address collection,\n        uint256 tokenId,\n        address to,\n        uint256 amount,\n        uint256 minPercentageToAsk\n    ) internal {\n        // Initialize the final amount that is transferred to seller\n        uint256 finalSellerAmount = amount;\n\n        // 1. Protocol fee\n        {\n            uint256 protocolFeeAmount = _calculateProtocolFee(\n                collection,\n                amount\n            );\n\n            // Check if the protocol fee is different than 0 for this strategy\n            if (\n                (protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)\n            ) {\n                IERC20(WAVAX).safeTransfer(\n                    protocolFeeRecipient,\n                    protocolFeeAmount\n                );\n                finalSellerAmount -= protocolFeeAmount;\n            }\n        }\n\n        // 2. Royalty fee\n        {\n            (\n                address royaltyFeeRecipient,\n                uint256 royaltyFeeAmount\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\n                    collection,\n                    tokenId,\n                    amount\n                );\n\n            // Check if there is a royalty fee and that it is different to 0\n            if (\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\n            ) {\n                IERC20(WAVAX).safeTransfer(\n                    royaltyFeeRecipient,\n                    royaltyFeeAmount\n                );\n                finalSellerAmount -= royaltyFeeAmount;\n\n                emit RoyaltyPayment(\n                    collection,\n                    tokenId,\n                    royaltyFeeRecipient,\n                    address(WAVAX),\n                    royaltyFeeAmount\n                );\n            }\n        }\n\n        require(\n            (finalSellerAmount * PERCENTAGE_PRECISION) >=\n                (minPercentageToAsk * amount),\n            \"Fees: Higher than expected\"\n        );\n\n        // 3. Transfer final amount (post-fees) to seller\n        {\n            IERC20(WAVAX).safeTransfer(to, finalSellerAmount);\n        }\n    }\n\n    /**\n     * @notice Transfer NFT\n     * @param collection address of the token collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\n     * @dev For ERC721, amount is not used\n     */\n    function _transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        // Retrieve the transfer manager address\n        address transferManager = transferSelectorNFT\n            .checkTransferManagerForToken(collection);\n\n        // If no transfer manager found, it returns address(0)\n        require(\n            transferManager != address(0),\n            \"Transfer: No NFT transfer manager available\"\n        );\n\n        // If one is found, transfer the token\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(\n            collection,\n            from,\n            to,\n            tokenId,\n            amount\n        );\n    }\n\n    /**\n     * @notice Calculate protocol fee for a given collection\n     * @param _collection address of collection\n     * @param _amount amount to transfer\n     */\n    function _calculateProtocolFee(address _collection, uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 protocolFee = protocolFeeManager.protocolFeeForCollection(\n            _collection\n        );\n        return (protocolFee * _amount) / PERCENTAGE_PRECISION;\n    }\n\n    /**\n     * @notice Verify the validity of the maker order\n     * @param makerOrder maker order\n     * @param orderHash computed hash for the order\n     */\n    function _validateOrder(\n        OrderTypes.MakerOrder calldata makerOrder,\n        bytes32 orderHash\n    ) internal view {\n        // Verify whether order nonce has expired\n        require(\n            (\n                !_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][\n                    makerOrder.nonce\n                ]\n            ) && (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\n            \"Order: Matching order expired\"\n        );\n\n        // Verify the signer is not address(0)\n        require(makerOrder.signer != address(0), \"Order: Invalid signer\");\n\n        // Verify the amount is not 0\n        require(makerOrder.amount > 0, \"Order: Amount cannot be 0\");\n\n        // Verify the validity of the signature\n        require(\n            SignatureChecker.verify(\n                orderHash,\n                makerOrder.signer,\n                makerOrder.v,\n                makerOrder.r,\n                makerOrder.s,\n                domainSeparator\n            ),\n            \"Signature: Invalid\"\n        );\n\n        // Verify whether the currency is whitelisted\n        require(\n            currencyManager.isCurrencyWhitelisted(makerOrder.currency),\n            \"Currency: Not whitelisted\"\n        );\n\n        // Verify whether strategy can be executed\n        require(\n            executionManager.isStrategyWhitelisted(makerOrder.strategy),\n            \"Strategy: Not whitelisted\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExecutionManager {\n    function addStrategy(address strategy) external;\n\n    function removeStrategy(address strategy) external;\n\n    function isStrategyWhitelisted(address strategy)\n        external\n        view\n        returns (bool);\n\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size)\n        external\n        view\n        returns (address[] memory, uint256);\n\n    function viewCountWhitelistedStrategies() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IExecutionStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IExecutionStrategy {\n    function canExecuteTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    )\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function canExecuteTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    )\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/IProtocolFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IProtocolFeeManager {\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee) external;\n\n    function setProtocolFeeForCollection(\n        address _collection,\n        uint256 _protocolFee\n    ) external;\n\n    function unsetProtocolFeeForCollection(address _collection) external;\n\n    function protocolFeeForCollection(address _collection)\n        external\n        view\n        returns (uint256);\n\n    function defaultProtocolFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRoyaltyFeeManager {\n    function calculateRoyaltyFeeAndGetRecipient(\n        address collection,\n        uint256 tokenId,\n        uint256 amount\n    ) external view returns (address, uint256);\n}\n"
    },
    "contracts/interfaces/IJoepegExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ICurrencyManager} from \"./ICurrencyManager.sol\";\nimport {IExecutionManager} from \"./IExecutionManager.sol\";\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IJoepegBuyBatcher {\n    struct Trade {\n        OrderTypes.TakerOrder takerBid;\n        OrderTypes.MakerOrder makerAsk;\n    }\n\n    function batchBuyWithAVAXAndWAVAX(Trade[] calldata trades) external payable;\n}\n\ninterface IJoepegExchange is IJoepegBuyBatcher {\n    function matchAskWithTakerBidUsingAVAXAndWAVAX(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external payable;\n\n    function matchAskWithTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external;\n\n    function matchBidWithTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    ) external;\n}\n"
    },
    "contracts/interfaces/ITransferManagerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITransferManagerNFT {\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/ITransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITransferSelectorNFT {\n    function checkTransferManagerForToken(address collection)\n        external\n        view\n        returns (address);\n}\n"
    },
    "contracts/interfaces/IWAVAX.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity >=0.5.0;\n\ninterface IWAVAX {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/libraries/OrderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title OrderTypes\n * @notice This library contains order types for the Joepeg exchange.\n */\nlibrary OrderTypes {\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\n    bytes32 internal constant MAKER_ORDER_HASH =\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\n\n    struct MakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address signer; // signer of the maker order\n        address collection; // collection address\n        uint256 price; // price (used as )\n        uint256 tokenId; // id of the token\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\n        address currency; // currency (e.g., WAVAX)\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        uint256 startTime; // startTime in timestamp\n        uint256 endTime; // endTime in timestamp\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // additional parameters\n        uint8 v; // v: parameter (27 or 28)\n        bytes32 r; // r: parameter\n        bytes32 s; // s: parameter\n    }\n\n    struct TakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address taker; // msg.sender\n        uint256 price; // final price for the purchase\n        uint256 tokenId;\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // other params (e.g., tokenId)\n    }\n\n    function hash(MakerOrder memory makerOrder)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    MAKER_ORDER_HASH,\n                    makerOrder.isOrderAsk,\n                    makerOrder.signer,\n                    makerOrder.collection,\n                    makerOrder.price,\n                    makerOrder.tokenId,\n                    makerOrder.amount,\n                    makerOrder.strategy,\n                    makerOrder.currency,\n                    makerOrder.nonce,\n                    makerOrder.startTime,\n                    makerOrder.endTime,\n                    makerOrder.minPercentageToAsk,\n                    keccak256(makerOrder.params)\n                )\n            );\n    }\n}\n"
    },
    "contracts/libraries/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\n\n/**\n * @title SignatureChecker\n * @notice This library allows verification of signatures for both EOAs and contracts.\n */\nlibrary SignatureChecker {\n    /**\n     * @notice Recovers the signer of a signature (for EOA)\n     * @param hash the hash containing the signed mesage\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\n     * @param r parameter\n     * @param s parameter\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\n        require(\n            uint256(s) <=\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"Signature: Invalid s parameter\"\n        );\n\n        require(v == 27 || v == 28, \"Signature: Invalid v parameter\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"Signature: Invalid signer\");\n\n        return signer;\n    }\n\n    /**\n     * @notice Returns whether the signer matches the signed message\n     * @param hash the hash containing the signed mesage\n     * @param signer the signer address to confirm message validity\n     * @param v parameter (27 or 28)\n     * @param r parameter\n     * @param s parameter\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\n     * @return true --> if valid // false --> if invalid\n     */\n    function verify(\n        bytes32 hash,\n        address signer,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32 domainSeparator\n    ) internal view returns (bool) {\n        // \\x19\\x01 is the standardized encoding prefix\n        // https://eips.ethereum.org/EIPS/eip-712#specification\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, hash)\n        );\n        if (Address.isContract(signer)) {\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\n            return\n                IERC1271(signer).isValidSignature(\n                    digest,\n                    abi.encodePacked(r, s, v)\n                ) == 0x1626ba7e;\n        } else {\n            return recover(digest, v, r, s) == signer;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/utils/PendingOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IPendingOwnable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nerror PendingOwnable__NotOwner();\nerror PendingOwnable__NotPendingOwner();\nerror PendingOwnable__PendingOwnerAlreadySet();\nerror PendingOwnable__NoPendingOwner();\n\n/**\n * @title Pending Ownable\n * @author Trader Joe\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions. The ownership of this contract is transferred using the\n * push and pull pattern, the current owner set a `pendingOwner` using\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\n * Ownable contract.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {setPendingOwner} and {becomeOwner}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner\n */\ncontract PendingOwnable is IERC165, IPendingOwnable {\n    address private _owner;\n    address private _pendingOwner;\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        if (msg.sender != _owner) revert PendingOwnable__NotOwner();\n        _;\n    }\n\n    /**\n     * @notice Throws if called by any account other than the pending owner.\n     */\n    modifier onlyPendingOwner() {\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\n            revert PendingOwnable__NotPendingOwner();\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract setting the deployer as the initial owner\n     */\n    constructor() {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Returns the address of the current owner\n     * @return The address of the current owner\n     */\n    function owner() public view virtual override returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Returns the address of the current pending owner\n     * @return The address of the current pending owner\n     */\n    function pendingOwner() public view virtual override returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @notice Sets the pending owner address. This address will be able to become\n     * the owner of this contract by calling {becomeOwner}\n     */\n    function setPendingOwner(address pendingOwner_)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        if (_pendingOwner != address(0))\n            revert PendingOwnable__PendingOwnerAlreadySet();\n        _setPendingOwner(pendingOwner_);\n    }\n\n    /**\n     * @notice Revoke the pending owner address. This address will not be able to\n     * call {becomeOwner} to become the owner anymore.\n     * Can only be called by the owner\n     */\n    function revokePendingOwner() public virtual override onlyOwner {\n        if (_pendingOwner == address(0))\n            revert PendingOwnable__NoPendingOwner();\n        _setPendingOwner(address(0));\n    }\n\n    /**\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\n     * Can only be called by the pending owner\n     */\n    function becomeOwner() public virtual override onlyPendingOwner {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual override onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        pure\n        virtual\n        returns (bool)\n    {\n        return\n            interfaceId == this.supportsInterface.selector ||\n            interfaceId == type(IPendingOwnable).interfaceId;\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     * @param _newOwner The address of the new owner\n     */\n    function _transferOwnership(address _newOwner) internal virtual {\n        address _oldOwner = _owner;\n        _owner = _newOwner;\n        _pendingOwner = address(0);\n        emit OwnershipTransferred(_oldOwner, _newOwner);\n    }\n\n    /**\n     * @notice Push the new owner, it needs to be pulled to be effective.\n     * Internal function without access restriction.\n     * @param pendingOwner_ The address of the new pending owner\n     */\n    function _setPendingOwner(address pendingOwner_) internal virtual {\n        _pendingOwner = pendingOwner_;\n        emit PendingOwnerSet(pendingOwner_);\n    }\n}\n"
    },
    "contracts/interfaces/IPendingOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPendingOwnable {\n    event PendingOwnerSet(address indexed pendingOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function setPendingOwner(address pendingOwner) external;\n\n    function revokePendingOwner() external;\n\n    function becomeOwner() external;\n\n    function renounceOwnership() external;\n}\n"
    },
    "contracts/utils/PausableAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./PendingOwnable.sol\";\nimport \"../interfaces/IPausableAdmin.sol\";\n\nerror PausableAdmin__AlreadyPaused();\nerror PausableAdmin__AlreadyUnpaused();\nerror PausableAdmin__OnlyRenounceForSelf(address sender);\nerror PausableAdmin__OnlyPauseAdmin(address sender);\nerror PausableAdmin__AddressIsNotPauseAdmin(address sender);\nerror PausableAdmin__AddressIsAlreadyPauseAdmin(address sender);\n\ncontract PausableAdmin is PendingOwnable, Pausable, IPausableAdmin {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _pauseAdmins;\n\n    modifier onlyPauseAdmin() {\n        if (!_pauseAdmins.contains(msg.sender))\n            revert PausableAdmin__OnlyPauseAdmin(msg.sender);\n        _;\n    }\n\n    constructor() {\n        _addPauseAdmin(msg.sender);\n    }\n\n    /**\n     * @notice View function to return the pause admin at index `_index`\n     * @param _index The index in the array\n     * @return The address of the admin at index `_index`\n     */\n    function getPauseAdminAt(uint256 _index)\n        external\n        view\n        override\n        returns (address)\n    {\n        return _pauseAdmins.at(_index);\n    }\n\n    /**\n     * @notice View function to return the number of pause admins\n     * @return The number of pause admins\n     */\n    function getNumberOfPauseAdmin() external view override returns (uint256) {\n        return _pauseAdmins.length();\n    }\n\n    /**\n     * @notice View function to check whether a user is an admin (true) or not (false)\n     * @param _user The address of the user\n     * @return Whether the user is an admin (true) or not (false)\n     */\n    function isPauseAdmin(address _user) external view override returns (bool) {\n        return _pauseAdmins.contains(_user);\n    }\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        pure\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IPausableAdmin).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\n     * This will also remove the previousOwner of PauseAdmin and add the new owner.\n     * Can only be called by the pending owner (checked within the `super.becomeOwner()`)\n     */\n    function becomeOwner() public virtual override {\n        address _previousOwner = owner();\n\n        if (!_pauseAdmins.contains(msg.sender)) {\n            _addPauseAdmin(msg.sender);\n        }\n        if (_pauseAdmins.contains(_previousOwner)) {\n            _removePauseAdmin(_previousOwner);\n        }\n        super.becomeOwner();\n    }\n\n    /**\n     * @notice Function to add a pause admin\n     * @dev Only callable by the owner\n     * @param _newAdmin The address of the new admin to add\n     */\n    function addPauseAdmin(address _newAdmin) external override onlyOwner {\n        _addPauseAdmin(_newAdmin);\n    }\n\n    /**\n     * @notice Function to remove a pause admin\n     * @dev Only callable by the owner\n     * @param _admin The address of the admin to remove\n     */\n    function removePauseAdmin(address _admin) external override onlyOwner {\n        _removePauseAdmin(_admin);\n    }\n\n    /**\n     * @notice Function callable by any admin to renounce their role\n     * @dev Only callable by the admin himself\n     */\n    function renouncePauseAdmin() external override {\n        _removePauseAdmin(msg.sender);\n    }\n\n    /**\n     * @notice Function to pause the contract\n     * @dev Only callable by any pause admin\n     */\n    function pause() external onlyPauseAdmin {\n        if (paused()) revert PausableAdmin__AlreadyPaused();\n        _pause();\n    }\n\n    /**\n     * @notice Function to unpause the contract\n     * @dev Only callable by the owner\n     */\n    function unpause() external onlyOwner {\n        if (!paused()) revert PausableAdmin__AlreadyUnpaused();\n        _unpause();\n    }\n\n    /**\n     * @notice Internal function to add a pause admin\n     * @param _newAdmin The address of the new admin to add\n     */\n    function _addPauseAdmin(address _newAdmin) internal {\n        if (!_pauseAdmins.add(_newAdmin))\n            revert PausableAdmin__AddressIsAlreadyPauseAdmin(_newAdmin);\n        emit PauseAdminAdded(_newAdmin);\n    }\n\n    /**\n     * @notice Internal function to remove a pause admin\n     * @param _admin The address of the admin to remove\n     */\n    function _removePauseAdmin(address _admin) internal {\n        if (!_pauseAdmins.remove(_admin))\n            revert PausableAdmin__AddressIsNotPauseAdmin(_admin);\n        emit PauseAdminRemoved(msg.sender, _admin);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/interfaces/IPausableAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPausableAdmin {\n    event PauseAdminAdded(address newAdmin);\n    event PauseAdminRemoved(address sender, address removedAdmin);\n\n    function getPauseAdminAt(uint256 _index) external view returns (address);\n\n    function isPauseAdmin(address _user) external view returns (bool);\n\n    function getNumberOfPauseAdmin() external view returns (uint256);\n\n    function addPauseAdmin(address _newAdmin) external;\n\n    function removePauseAdmin(address _admin) external;\n\n    function renouncePauseAdmin() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/utils/BatchTransferNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./PausableAdmin.sol\";\nimport \"../interfaces/IBatchTransferNFT.sol\";\n\nerror BatchTransferNFT__UnsupportedContract(address nft);\n\n/**\n * @title BatchTransferNFT\n * @notice Enables to batch transfer multiple NFTs in a single call to this contract\n */\ncontract BatchTransferNFT is PausableAdmin, IBatchTransferNFT {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        pure\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IBatchTransferNFT).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Batch transfer different NFT in a single call\n     * @dev The function can get paused\n     * @param _transfers The list of transfer.\n     * The different nft needs to support either the IERC721 or IERC1155 interface\n     */\n    function batchTransfer(Transfer[] calldata _transfers)\n        external\n        override\n        whenNotPaused\n    {\n        uint256 _length = _transfers.length;\n        unchecked {\n            for (uint256 i; i < _length; ++i) {\n                Transfer memory _transfer = _transfers[i];\n\n                if (_isERC721(_transfer.nft)) {\n                    IERC721(_transfer.nft).safeTransferFrom(\n                        _msgSender(),\n                        _transfer.recipient,\n                        _transfer.tokenId\n                    );\n                } else if (_isERC1155(_transfer.nft)) {\n                    IERC1155(_transfer.nft).safeTransferFrom(\n                        _msgSender(),\n                        _transfer.recipient,\n                        _transfer.tokenId,\n                        _transfer.amount,\n                        \"\"\n                    );\n                } else {\n                    revert BatchTransferNFT__UnsupportedContract(_transfer.nft);\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Internal view function to return whether the address supports IERC721\n     * @param nft The address of the nft\n     * @return Whether the interface is supported or not\n     */\n    function _isERC721(address nft) internal view returns (bool) {\n        return IERC165(nft).supportsInterface(type(IERC721).interfaceId);\n    }\n\n    /**\n     * @notice Internal view function to return whether the address supports IERC1155\n     * @param nft The address of the nft\n     * @return Whether the interface is supported or not\n     */\n    function _isERC1155(address nft) internal view returns (bool) {\n        return IERC165(nft).supportsInterface(type(IERC1155).interfaceId);\n    }\n}\n"
    },
    "contracts/interfaces/IBatchTransferNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBatchTransferNFT {\n    struct Transfer {\n        address nft;\n        address recipient;\n        uint256 tokenId;\n        uint256 amount;\n    }\n\n    function batchTransfer(Transfer[] calldata _transfers) external;\n}\n"
    },
    "contracts/TransferManagerNonCompliantERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {ITransferManagerNFT} from \"./interfaces/ITransferManagerNFT.sol\";\n\n/**\n * @title TransferManagerNonCompliantERC721\n * @notice It allows the transfer of ERC721 tokens without safeTransferFrom.\n */\ncontract TransferManagerNonCompliantERC721 is\n    ITransferManagerNFT,\n    Initializable\n{\n    address public joepegExchange;\n\n    /**\n     * @notice Initializer\n     * @param _joepegExchange address of the Joepeg exchange\n     */\n    function initialize(address _joepegExchange) public initializer {\n        joepegExchange = _joepegExchange;\n    }\n\n    /**\n     * @notice Transfer ERC721 token\n     * @param collection address of the collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     */\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external override {\n        require(msg.sender == joepegExchange, \"Transfer: Only JoepegExchange\");\n        IERC721(collection).transferFrom(from, to, tokenId);\n    }\n}\n"
    },
    "contracts/TransferManagerERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {ITransferManagerNFT} from \"./interfaces/ITransferManagerNFT.sol\";\n\n/**\n * @title TransferManagerERC721\n * @notice It allows the transfer of ERC721 tokens.\n */\ncontract TransferManagerERC721 is ITransferManagerNFT, Initializable {\n    address public joepegExchange;\n\n    /**\n     * @notice Initializer\n     * @param _joepegExchange address of the Joepeg exchange\n     */\n    function initialize(address _joepegExchange) public initializer {\n        joepegExchange = _joepegExchange;\n    }\n\n    /**\n     * @notice Transfer ERC721 token\n     * @param collection address of the collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @dev For ERC721, amount is not used\n     */\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external override {\n        require(msg.sender == joepegExchange, \"Transfer: Only JoepegExchange\");\n        // https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-safeTransferFrom\n        IERC721(collection).safeTransferFrom(from, to, tokenId);\n    }\n}\n"
    },
    "contracts/TransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport {ITransferSelectorNFT} from \"./interfaces/ITransferSelectorNFT.sol\";\n\n/**\n * @title TransferSelectorNFT\n * @notice It selects the NFT transfer manager based on a collection address.\n */\ncontract TransferSelectorNFT is\n    ITransferSelectorNFT,\n    Initializable,\n    OwnableUpgradeable\n{\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    // Address of the transfer manager contract for ERC721 tokens\n    address public transferManagerERC721;\n\n    // Address of the transfer manager contract for ERC1155 tokens\n    address public transferManagerERC1155;\n\n    // Map collection address to transfer manager address\n    mapping(address => address) public transferManagerSelectorForCollection;\n\n    event CollectionTransferManagerAdded(\n        address indexed collection,\n        address indexed transferManager\n    );\n    event CollectionTransferManagerRemoved(address indexed collection);\n\n    /**\n     * @notice Initializer\n     * @param _transferManagerERC721 address of the ERC721 transfer manager\n     * @param _transferManagerERC1155 address of the ERC1155 transfer manager\n     */\n    function initialize(\n        address _transferManagerERC721,\n        address _transferManagerERC1155\n    ) public initializer {\n        __Ownable_init();\n\n        transferManagerERC721 = _transferManagerERC721;\n        transferManagerERC1155 = _transferManagerERC1155;\n    }\n\n    /**\n     * @notice Add a transfer manager for a collection\n     * @param collection collection address to add specific transfer rule\n     * @dev It is meant to be used for exceptions only (e.g., CryptoKitties)\n     */\n    function addCollectionTransferManager(\n        address collection,\n        address transferManager\n    ) external onlyOwner {\n        require(\n            collection != address(0),\n            \"TransferSelectorNFT: Collection cannot be null address\"\n        );\n        require(\n            transferManager != address(0),\n            \"TransferSelectorNFT: TransferManager cannot be null address\"\n        );\n\n        transferManagerSelectorForCollection[collection] = transferManager;\n\n        emit CollectionTransferManagerAdded(collection, transferManager);\n    }\n\n    /**\n     * @notice Remove a transfer manager for a collection\n     * @param collection collection address to remove exception\n     */\n    function removeCollectionTransferManager(address collection)\n        external\n        onlyOwner\n    {\n        require(\n            transferManagerSelectorForCollection[collection] != address(0),\n            \"TransferSelectorNFT: Collection has no transfer manager\"\n        );\n\n        // Set it to the address(0)\n        transferManagerSelectorForCollection[collection] = address(0);\n\n        emit CollectionTransferManagerRemoved(collection);\n    }\n\n    /**\n     * @notice Check the transfer manager for a token\n     * @dev Support for ERC165 interface is checked AFTER custom implementation\n     * @param collection collection address\n     * @return transferManager address of transfer manager to use\n     */\n    function checkTransferManagerForToken(address collection)\n        external\n        view\n        override\n        returns (address transferManager)\n    {\n        // Assign transfer manager (if any)\n        transferManager = transferManagerSelectorForCollection[collection];\n\n        if (transferManager == address(0)) {\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\n                transferManager = transferManagerERC721;\n            } else if (\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)\n            ) {\n                transferManager = transferManagerERC1155;\n            } else {\n                revert(\n                    \"TransferSelectorNFT: No NFT transfer manager available\"\n                );\n            }\n        }\n\n        return transferManager;\n    }\n}\n"
    },
    "contracts/RoyaltyFeeSetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\nimport {IOwnable} from \"./interfaces/IOwnable.sol\";\n\n/**\n * @title RoyaltyFeeSetter\n * @notice Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\n */\ncontract RoyaltyFeeSetter is Initializable, OwnableUpgradeable {\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    // ERC2981 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    address public royaltyFeeRegistry;\n\n    /**\n     * @notice Initializer\n     * @param _royaltyFeeRegistry address of the royalty fee registry\n     */\n    function initialize(address _royaltyFeeRegistry) public initializer {\n        __Ownable_init();\n\n        royaltyFeeRegistry = _royaltyFeeRegistry;\n    }\n\n    /**\n     * @notice Update royalty info for collection if admin\n     * @dev Only to be called if there is no setter address\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfAdmin(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        require(\n            !IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981),\n            \"Admin: Must not be ERC2981\"\n        );\n        require(\n            msg.sender == IOwnable(collection).admin(),\n            \"Admin: Not the admin\"\n        );\n\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update royalty info for collection if owner\n     * @dev Only to be called if there is no setter address\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfOwner(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        require(\n            !IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981),\n            \"Owner: Must not be ERC2981\"\n        );\n        require(\n            msg.sender == IOwnable(collection).owner(),\n            \"Owner: Not the owner\"\n        );\n\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Only to be called if there msg.sender is the setter\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfSetter(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoCollection(collection);\n        require(msg.sender == currentSetter, \"Setter: Not the setter\");\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Can only be called by contract owner (of this)\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external onlyOwner {\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n\n    /**\n     * @notice Update owner of royalty fee registry\n     * @dev Can be used for migration of this royalty fee setter contract\n     * @param _owner new owner address\n     */\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner)\n        external\n        onlyOwner\n    {\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\n        external\n        onlyOwner\n    {\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(\n            _royaltyFeeLimit\n        );\n    }\n\n    /**\n     * @notice Check royalty info for collection\n     * @param collection collection address\n     * @return (whether there is a setter (address(0 if not)),\n     * Position\n     * 0: Royalty setter is set in the registry\n     * 1: ERC2981 and no setter\n     * 2: setter can be set using owner()\n     * 3: setter can be set using admin()\n     * 4: setter cannot be set, nor support for ERC2981\n     */\n    function checkForCollectionSetter(address collection)\n        external\n        view\n        returns (address, uint8)\n    {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoCollection(collection);\n\n        if (currentSetter != address(0)) {\n            return (currentSetter, 0);\n        }\n\n        try\n            IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)\n        returns (bool interfaceSupport) {\n            if (interfaceSupport) {\n                return (address(0), 1);\n            }\n        } catch {}\n\n        try IOwnable(collection).owner() returns (address setter) {\n            return (setter, 2);\n        } catch {\n            try IOwnable(collection).admin() returns (address setter) {\n                return (setter, 3);\n            } catch {\n                return (address(0), 4);\n            }\n        }\n    }\n\n    /**\n     * @notice Update information and perform checks before updating royalty fee registry\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) internal {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\n            .royaltyFeeInfoCollection(collection);\n        require(currentSetter == address(0), \"Setter: Already set\");\n\n        require(\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\n            \"Setter: Not ERC721/ERC1155\"\n        );\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\n            collection,\n            setter,\n            receiver,\n            fee\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IRoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRoyaltyFeeRegistry {\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external;\n\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\n\n    function royaltyInfo(address collection, uint256 amount)\n        external\n        view\n        returns (address, uint256);\n\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n    function transferOwnership(address newOwner) external;\n\n    function owner() external view returns (address);\n\n    function admin() external view returns (address);\n}\n"
    },
    "contracts/RoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\n\nerror RoyaltyFeeRegistry__RoyaltyFeeLimitTooHigh();\n\n/**\n * @title RoyaltyFeeRegistry\n * @notice It is a royalty fee registry for the Joepeg exchange.\n */\ncontract RoyaltyFeeRegistry is\n    IRoyaltyFeeRegistry,\n    Initializable,\n    OwnableUpgradeable\n{\n    struct FeeInfo {\n        address setter;\n        address receiver;\n        uint256 fee;\n    }\n\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\n    uint256 public royaltyFeeLimit;\n\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\n\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\n    event RoyaltyFeeUpdate(\n        address indexed collection,\n        address indexed setter,\n        address indexed receiver,\n        uint256 fee\n    );\n\n    modifier isValidRoyaltyFeeLimit(uint256 _royaltyFeeLimit) {\n        if (_royaltyFeeLimit > 9500) {\n            revert RoyaltyFeeRegistry__RoyaltyFeeLimitTooHigh();\n        }\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function initialize(uint256 _royaltyFeeLimit)\n        public\n        initializer\n        isValidRoyaltyFeeLimit(_royaltyFeeLimit)\n    {\n        __Ownable_init();\n\n        royaltyFeeLimit = _royaltyFeeLimit;\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\n        external\n        override\n        isValidRoyaltyFeeLimit(_royaltyFeeLimit)\n        onlyOwner\n    {\n        royaltyFeeLimit = _royaltyFeeLimit;\n\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external override onlyOwner {\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\n            setter: setter,\n            receiver: receiver,\n            fee: fee\n        });\n\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Calculate royalty info for a collection address and a sale gross amount\n     * @param collection collection address\n     * @param amount amount\n     * @return receiver address and amount received by royalty recipient\n     */\n    function royaltyInfo(address collection, uint256 amount)\n        external\n        view\n        override\n        returns (address, uint256)\n    {\n        return (\n            _royaltyFeeInfoCollection[collection].receiver,\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\n        );\n    }\n\n    /**\n     * @notice View royalty info for a collection address\n     * @param collection collection address\n     */\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            uint256\n        )\n    {\n        return (\n            _royaltyFeeInfoCollection[collection].setter,\n            _royaltyFeeInfoCollection[collection].receiver,\n            _royaltyFeeInfoCollection[collection].fee\n        );\n    }\n}\n"
    },
    "contracts/RoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC165, IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\n\n/**\n * @title RoyaltyFeeManager\n * @notice Handles the logic to check and transfer royalty fees (if any).\n */\ncontract RoyaltyFeeManager is\n    IRoyaltyFeeManager,\n    Initializable,\n    OwnableUpgradeable\n{\n    // https://eips.ethereum.org/EIPS/eip-2981\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    IRoyaltyFeeRegistry public royaltyFeeRegistry;\n\n    /**\n     * @notice Initializer\n     * @param _royaltyFeeRegistry address of the RoyaltyFeeRegistry\n     */\n    function initialize(address _royaltyFeeRegistry) public initializer {\n        __Ownable_init();\n\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\n    }\n\n    /**\n     * @notice Calculate royalty fee and get recipient\n     * @param collection address of the NFT contract\n     * @param tokenId tokenId\n     * @param amount amount to transfer\n     */\n    function calculateRoyaltyFeeAndGetRecipient(\n        address collection,\n        uint256 tokenId,\n        uint256 amount\n    ) external view override returns (address, uint256) {\n        // 1. Check if there is a royalty info in the system\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry\n            .royaltyInfo(collection, amount);\n\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\n                (receiver, royaltyAmount) = IERC2981(collection).royaltyInfo(\n                    tokenId,\n                    amount\n                );\n            }\n        }\n        return (receiver, royaltyAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/mocks/ERC721Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport {IERC165, IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\n/// @title Mock ERC721 Token\n/// @author Trader Joe\ncontract ERC721Token is ERC721(\"Sample NFT\", \"NFT\"), Ownable, IERC2981 {\n    using Counters for Counters.Counter;\n\n    // https://eips.ethereum.org/EIPS/eip-2981\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    Counters.Counter private _tokenIds;\n\n    /// @dev Mint a NFT to `_to`\n    /// @param _to The address that will receive the mint\n    /// @return the `tokenId` of the newly minted NFT\n    function mint(address _to) external returns (uint256) {\n        _tokenIds.increment();\n\n        uint256 newTokenId = _tokenIds.current();\n        _mint(_to, newTokenId);\n\n        return newTokenId;\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        pure\n        override\n        returns (string memory)\n    {\n        return\n            \"https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/5629\";\n    }\n\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        receiver = owner();\n        royaltyAmount = _salePrice / 100;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(IERC165, ERC721)\n        returns (bool)\n    {\n        return\n            interfaceId == INTERFACE_ID_ERC2981 ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/mocks/ERC1155Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport {IERC165, IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\n/// @title Mock ERC1155 Token\n/// @author Trader Joe\ncontract ERC1155Token is\n    ERC1155(\n        \"https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/2174\"\n    ),\n    Ownable,\n    IERC2981\n{\n    // https://eips.ethereum.org/EIPS/eip-2981\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    /// @dev Mint `_amount` NFT with `_tokenId` to `_to`\n    /// @param _to The address that will receive the mint\n    /// @param _tokenId The tokenId to mint\n    /// @param _amount The number of tokens to mint\n    /// @return the `tokenId` of the minted NFT\n    function mint(\n        address _to,\n        uint256 _tokenId,\n        uint256 _amount\n    ) external returns (uint256) {\n        _mint(_to, _tokenId, _amount, \"\");\n\n        return _tokenId;\n    }\n\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        receiver = owner();\n        royaltyAmount = _salePrice / 100;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(IERC165, ERC1155)\n        returns (bool)\n    {\n        return\n            interfaceId == INTERFACE_ID_ERC2981 ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/ProtocolFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {IProtocolFeeManager} from \"./interfaces/IProtocolFeeManager.sol\";\n\nerror ProtocolFeeManager__InvalidProtocolFee();\n\n/**\n * @title ProtocolFeeManager\n * @notice Tracks and manages protocol fees for collections in the Joepeg Exchange\n */\ncontract ProtocolFeeManager is\n    IProtocolFeeManager,\n    Initializable,\n    OwnableUpgradeable\n{\n    struct ProtocolFeeOverride {\n        bool isOverridden;\n        uint256 protocolFee;\n    }\n\n    /// @notice Default protocol fee, with precision 100 (e.g. 200 -> 2%)\n    uint256 public override defaultProtocolFee;\n\n    /// @notice Mapping of collections to custom protocol fee overrides\n    mapping(address => ProtocolFeeOverride)\n        public collectionProtocolFeeOverrides;\n\n    event UpdateDefaultProtocolFee(\n        address indexed user,\n        uint256 defaultProtocolFee\n    );\n    event SetProtocolFeeForCollection(\n        address indexed user,\n        address indexed collection,\n        uint256 protocolFee\n    );\n    event UnsetProtocolFeeForCollection(\n        address indexed user,\n        address indexed collection\n    );\n\n    modifier isValidProtocolFee(uint256 _protocolFee) {\n        if (_protocolFee > 10000) {\n            revert ProtocolFeeManager__InvalidProtocolFee();\n        }\n        _;\n    }\n\n    /**\n     * @notice Initializer\n     * @param _defaultProtocolFee default protocol fee\n     */\n    function initialize(uint256 _defaultProtocolFee)\n        public\n        initializer\n        isValidProtocolFee(_defaultProtocolFee)\n    {\n        __Ownable_init();\n\n        defaultProtocolFee = _defaultProtocolFee;\n    }\n\n    /**\n     * @notice Updates `defaultProtocolFee`\n     * @param _defaultProtocolFee new default protocol fee\n     */\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee)\n        external\n        override\n        onlyOwner\n        isValidProtocolFee(_defaultProtocolFee)\n    {\n        defaultProtocolFee = _defaultProtocolFee;\n        emit UpdateDefaultProtocolFee(msg.sender, _defaultProtocolFee);\n    }\n\n    /**\n     * @notice Sets custom protocol fee for `_collection`\n     * @param _collection address of collection to set custom protocol fee for\n     * @param _protocolFee custom protocol fee\n     */\n    function setProtocolFeeForCollection(\n        address _collection,\n        uint256 _protocolFee\n    ) external override onlyOwner isValidProtocolFee(_protocolFee) {\n        collectionProtocolFeeOverrides[_collection] = ProtocolFeeOverride({\n            isOverridden: true,\n            protocolFee: _protocolFee\n        });\n        emit SetProtocolFeeForCollection(msg.sender, _collection, _protocolFee);\n    }\n\n    /**\n     * @notice Unsets custom protocol fee for `_collection`\n     * @param _collection address of collection to unset custom protocol fee for\n     */\n    function unsetProtocolFeeForCollection(address _collection)\n        external\n        override\n        onlyOwner\n    {\n        collectionProtocolFeeOverrides[_collection] = ProtocolFeeOverride({\n            isOverridden: false,\n            protocolFee: 0\n        });\n        emit UnsetProtocolFeeForCollection(msg.sender, _collection);\n    }\n\n    /**\n     * @notice Get protocol fee for a given `_collection`, falling back to\n     * `defaultProtocolFee` if there is no custom protocol fee set\n     * @param _collection address of collection to look up protocol fee for\n     * @return protocol fee for `_collection`\n     */\n    function protocolFeeForCollection(address _collection)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        ProtocolFeeOverride\n            memory protocolFeeOverride = collectionProtocolFeeOverrides[\n                _collection\n            ];\n        return\n            protocolFeeOverride.isOverridden\n                ? protocolFeeOverride.protocolFee\n                : defaultProtocolFee;\n    }\n}\n"
    },
    "contracts/StrategyAnyItemFromCollectionForFixedPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\nimport {IProtocolFeeManager} from \"./interfaces/IProtocolFeeManager.sol\";\n\n/**\n * @title StrategyAnyItemFromCollectionForFixedPrice\n * @notice Strategy to send an order at a fixed price that can be\n * matched by any tokenId for the collection.\n */\ncontract StrategyAnyItemFromCollectionForFixedPrice is IExecutionStrategy {\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    )\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.endTime >= block.timestamp) &&\n                (makerBid.startTime <= block.timestamp)),\n            takerAsk.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     * @dev It cannot execute but it is left for compatibility purposes with the interface.\n     */\n    function canExecuteTakerBid(\n        OrderTypes.TakerOrder calldata,\n        OrderTypes.MakerOrder calldata\n    )\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n}\n"
    },
    "contracts/StrategyStandardSaleForFixedPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyStandardSaleForFixedPrice\n * @notice Strategy that executes an order at a fixed price that\n * can be taken either by a bid or an ask.\n */\ncontract StrategyStandardSaleForFixedPrice is IExecutionStrategy {\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(\n        OrderTypes.TakerOrder calldata takerAsk,\n        OrderTypes.MakerOrder calldata makerBid\n    )\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.tokenId == takerAsk.tokenId) &&\n                (makerBid.startTime <= block.timestamp) &&\n                (makerBid.endTime >= block.timestamp)),\n            makerBid.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    )\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n}\n"
    },
    "contracts/StrategyPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyPrivateSale\n * @notice Strategy to set up an order that can only be executed by\n * a specific address.\n */\ncontract StrategyPrivateSale is IExecutionStrategy {\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(\n        OrderTypes.TakerOrder calldata,\n        OrderTypes.MakerOrder calldata\n    )\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    )\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        // Retrieve target buyer\n        address targetBuyer = abi.decode(makerAsk.params, (address));\n\n        return (\n            ((targetBuyer == takerBid.taker) &&\n                (makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n}\n"
    },
    "contracts/ExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\n\n/**\n * @title ExecutionManager\n * @notice It allows adding/removing execution strategies for trading on the Joepeg exchange.\n */\ncontract ExecutionManager is\n    IExecutionManager,\n    Initializable,\n    OwnableUpgradeable\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _whitelistedStrategies;\n\n    event NewCollectionBidStrategy(address indexed strategy);\n    event StrategyRemoved(address indexed strategy);\n    event StrategyWhitelisted(address indexed strategy);\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    /**\n     * @notice Add an execution strategy in the system\n     * @param strategy address of the strategy to add\n     */\n    function addStrategy(address strategy) external override onlyOwner {\n        require(\n            !_whitelistedStrategies.contains(strategy),\n            \"Strategy: Already whitelisted\"\n        );\n        _whitelistedStrategies.add(strategy);\n\n        emit StrategyWhitelisted(strategy);\n    }\n\n    /**\n     * @notice Remove an execution strategy from the system\n     * @param strategy address of the strategy to remove\n     */\n    function removeStrategy(address strategy) external override onlyOwner {\n        require(\n            _whitelistedStrategies.contains(strategy),\n            \"Strategy: Not whitelisted\"\n        );\n        _whitelistedStrategies.remove(strategy);\n\n        emit StrategyRemoved(strategy);\n    }\n\n    /**\n     * @notice Returns if an execution strategy is in the system\n     * @param strategy address of the strategy\n     */\n    function isStrategyWhitelisted(address strategy)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _whitelistedStrategies.contains(strategy);\n    }\n\n    /**\n     * @notice View number of whitelisted strategies\n     */\n    function viewCountWhitelistedStrategies()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _whitelistedStrategies.length();\n    }\n\n    /**\n     * @notice See whitelisted strategies in the system\n     * @param cursor cursor (should start at 0 for first request)\n     * @param size size of the response (e.g., 50)\n     */\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size)\n        external\n        view\n        override\n        returns (address[] memory, uint256)\n    {\n        uint256 length = size;\n\n        if (length > _whitelistedStrategies.length() - cursor) {\n            length = _whitelistedStrategies.length() - cursor;\n        }\n\n        address[] memory whitelistedStrategies = new address[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            whitelistedStrategies[i] = _whitelistedStrategies.at(cursor + i);\n        }\n\n        return (whitelistedStrategies, cursor + length);\n    }\n}\n"
    },
    "contracts/TransferManagerERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {ITransferManagerNFT} from \"./interfaces/ITransferManagerNFT.sol\";\n\n/**\n * @title TransferManagerERC1155\n * @notice It allows the transfer of ERC1155 tokens.\n */\ncontract TransferManagerERC1155 is ITransferManagerNFT, Initializable {\n    address public joepegExchange;\n\n    /**\n     * @notice Initializer\n     * @param _joepegExchange address of the Joepeg exchange\n     */\n    function initialize(address _joepegExchange) public initializer {\n        joepegExchange = _joepegExchange;\n    }\n\n    /**\n     * @notice Transfer ERC1155 token(s)\n     * @param collection address of the collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @param amount amount of tokens (1 and more for ERC1155)\n     */\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external override {\n        require(msg.sender == joepegExchange, \"Transfer: Only JoepegExchange\");\n        // https://docs.openzeppelin.com/contracts/3.x/api/token/erc1155#IERC1155-safeTransferFrom-address-address-uint256-uint256-bytes-\n        IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, \"\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}