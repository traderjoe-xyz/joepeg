{
  "address": "0x08FdaDD9b2325Be86Cec83C0e8031839a76D6818",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wavax",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__AuctionAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__CurrencyMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__DutchAuctionCannotSettleUnstartedAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__DutchAuctionCreatorCannotSettle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotBidOnUnstartedAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotSettleUnstartedAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__ExpectedNonNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__FeesHigherThanExpected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__InvalidDropInterval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__InvalidMinPercentageToAsk",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__InvalidStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__NoAuctionExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__OnlyAuctionCreatorCanCancel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JoepegAuctionHouse__UnsupportedCurrency",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "PausableAdmin__AddressIsAlreadyPauseAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "PausableAdmin__AddressIsNotPauseAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausableAdmin__AlreadyPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausableAdmin__AlreadyUnpaused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "PausableAdmin__OnlyPauseAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnable__NoPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnable__NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnable__PendingOwnerAlreadySet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCurrencyManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCurrencyManager",
          "type": "address"
        }
      ],
      "name": "CurrencyManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "DutchAuctionCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "DutchAuctionSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dropInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "DutchAuctionStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldEnglishAuctionMinBidIncrementPct",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEnglishAuctionMinBidIncrementPct",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionMinBidIncrementPctSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "endTimeExtension",
          "type": "uint96"
        }
      ],
      "name": "EnglishAuctionPlaceBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "oldEnglishAuctionRefreshTime",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "newEnglishAuctionRefreshTime",
          "type": "uint96"
        }
      ],
      "name": "EnglishAuctionRefreshTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "EnglishAuctionStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "PauseAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedAdmin",
          "type": "address"
        }
      ],
      "name": "PauseAdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProtocolFeeManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newProtocolFeeManager",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProtocolFeeRecipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newProtocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldRoyaltyFeeManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "RoyaltyFeeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "addPauseAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "becomeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyManager",
      "outputs": [
        {
          "internalType": "contract ICurrencyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dutchAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dropInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "emergencyCancelDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "emergencyCancelEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionMinBidIncrementPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionRefreshTime",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "englishAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "startTime",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "lastBidder",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "endTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBidPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDutchAuctionSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPauseAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getPauseAdminAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_englishAuctionMinBidIncrementPct",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_englishAuctionRefreshTime",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isPauseAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "placeEnglishAuctionBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wavaxAmount",
          "type": "uint256"
        }
      ],
      "name": "placeEnglishAuctionBidWithAVAXAndWAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeManager",
      "outputs": [
        {
          "internalType": "contract IProtocolFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "removePauseAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauseAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokePendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_startTime",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_duration",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_dropInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "scheduleDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_startTime",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_duration",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "scheduleEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleDutchAuctionWithAVAXAndWAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_duration",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_dropInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "startDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_duration",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPercentageToAsk",
          "type": "uint256"
        }
      ],
      "name": "startEnglishAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        }
      ],
      "name": "updateCurrencyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_englishAuctionMinBidIncrementPct",
          "type": "uint256"
        }
      ],
      "name": "updateEnglishAuctionMinBidIncrementPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_englishAuctionRefreshTime",
          "type": "uint96"
        }
      ],
      "name": "updateEnglishAuctionRefreshTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeManager",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLatestAuctionNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd6662d74841c444c402b50bea9d8730119013c75adf74ed0e83d2e10cf2a6fe",
  "receipt": {
    "to": null,
    "from": "0xc2D38178069757648FEfb5440737C2aE1671f19D",
    "contractAddress": "0x08FdaDD9b2325Be86Cec83C0e8031839a76D6818",
    "transactionIndex": 0,
    "gasUsed": "4138400",
    "logsBloom": "0x
    "blockHash": "0x1b66e61118b08f372d5aab3a5521b1c366594f7bf43b93d300bd0bff68e4ccbb",
    "transactionHash": "0xbd6662d74841c444c402b50bea9d8730119013c75adf74ed0e83d2e10cf2a6fe",
    "logs": [],
    "blockNumber": 19000163,
    "cumulativeGasUsed": "4138400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
  ],
  "numDeployments": 1,
  "solcInputHash": "88f367e016644d9842393fd87a5eaa0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__AuctionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__CurrencyMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__DutchAuctionCannotSettleUnstartedAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__DutchAuctionCreatorCannotSettle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotBidOnUnstartedAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotSettleUnstartedAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__ExpectedNonNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__FeesHigherThanExpected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__InvalidDropInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__InvalidMinPercentageToAsk\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__NoAuctionExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__OnlyAuctionCreatorCanCancel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoepegAuctionHouse__UnsupportedCurrency\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PausableAdmin__AddressIsAlreadyPauseAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PausableAdmin__AddressIsNotPauseAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableAdmin__AlreadyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableAdmin__AlreadyUnpaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PausableAdmin__OnlyPauseAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnable__NoPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnable__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnable__PendingOwnerAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCurrencyManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCurrencyManager\",\"type\":\"address\"}],\"name\":\"CurrencyManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"DutchAuctionStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldEnglishAuctionMinBidIncrementPct\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEnglishAuctionMinBidIncrementPct\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionMinBidIncrementPctSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"endTimeExtension\",\"type\":\"uint96\"}],\"name\":\"EnglishAuctionPlaceBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"oldEnglishAuctionRefreshTime\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"newEnglishAuctionRefreshTime\",\"type\":\"uint96\"}],\"name\":\"EnglishAuctionRefreshTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"EnglishAuctionStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"PauseAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedAdmin\",\"type\":\"address\"}],\"name\":\"PauseAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProtocolFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolFeeManager\",\"type\":\"address\"}],\"name\":\"ProtocolFeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProtocolFeeRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRoyaltyFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyFeeManager\",\"type\":\"address\"}],\"name\":\"RoyaltyFeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addPauseAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dutchAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyCancelDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyCancelEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionMinBidIncrementPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionRefreshTime\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"englishAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"startTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"lastBidder\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDutchAuctionSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPauseAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPauseAdminAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_englishAuctionMinBidIncrementPct\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_englishAuctionRefreshTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isPauseAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeEnglishAuctionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wavaxAmount\",\"type\":\"uint256\"}],\"name\":\"placeEnglishAuctionBidWithAVAXAndWAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeManager\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removePauseAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauseAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_startTime\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_duration\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_dropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"scheduleDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_startTime\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_duration\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"scheduleEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleDutchAuctionWithAVAXAndWAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_duration\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_dropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"startDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_duration\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercentageToAsk\",\"type\":\"uint256\"}],\"name\":\"startEnglishAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_englishAuctionMinBidIncrementPct\",\"type\":\"uint256\"}],\"name\":\"updateEnglishAuctionMinBidIncrementPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_englishAuctionRefreshTime\",\"type\":\"uint96\"}],\"name\":\"updateEnglishAuctionRefreshTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeManager\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLatestAuctionNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPauseAdmin(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_newAdmin\":\"The address of the new admin to add\"}},\"cancelDutchAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"cancelEnglishAuction(address,uint256)\":{\"details\":\"Note: - Can only be called by auction creator - Can only be cancelled if no bids have been placed\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"constructor\":{\"params\":{\"_wavax\":\"address of WAVAX\"}},\"emergencyCancelDutchAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"emergencyCancelEnglishAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"getDutchAuctionSalePrice(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"},\"returns\":{\"_0\":\"current Dutch Auction sale price for specified ERC721 token\"}},\"getNumberOfPauseAdmin()\":{\"returns\":{\"_0\":\"The number of pause admins\"}},\"getPauseAdminAt(uint256)\":{\"params\":{\"_index\":\"The index in the array\"},\"returns\":{\"_0\":\"The address of the admin at index `_index`\"}},\"initialize(uint256,uint96,address,address,address,address)\":{\"params\":{\"_currencyManager\":\"currency manager address\",\"_englishAuctionMinBidIncrementPct\":\"minimum bid increment percentage for English Auctions\",\"_englishAuctionRefreshTime\":\"refresh time for English auctions\",\"_protocolFeeManager\":\"protocol fee manager address\",\"_protocolFeeRecipient\":\"protocol fee recipient\",\"_royaltyFeeManager\":\"royalty fee manager address\"}},\"isPauseAdmin(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"Whether the user is an admin (true) or not (false)\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the current owner\"}},\"pause()\":{\"details\":\"Only callable by any pause admin\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"returns\":{\"_0\":\"The address of the current pending owner\"}},\"placeEnglishAuctionBid(address,uint256,uint256)\":{\"params\":{\"_amount\":\"amount of currency to bid\",\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\",\"_wavaxAmount\":\"amount of WAVAX to bid\"}},\"removePauseAdmin(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_admin\":\"The address of the admin to remove\"}},\"renouncePauseAdmin()\":{\"details\":\"Only callable by the admin himself\"},\"scheduleDutchAuction(address,uint256,address,uint96,uint96,uint256,uint256,uint256,uint256)\":{\"details\":\"Note: - Requires the auction house to hold the ERC721 token in escrow - Drops in price every `dutchAuctionDropInterval` seconds in equal   amounts\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_currency\":\"address of currency to sell ERC721 token for\",\"_dropInterval\":\"number of seconds between each drop in price\",\"_duration\":\"number of seconds for Dutch Auction to run\",\"_endPrice\":\"ending sell price\",\"_minPercentageToAsk\":\"minimum percentage of the gross amount that goes to ask\",\"_startPrice\":\"starting sell price\",\"_startTime\":\"time to start the auction\",\"_tokenId\":\"token id of ERC721 token\"}},\"scheduleEnglishAuction(address,uint256,address,uint96,uint96,uint256,uint256)\":{\"details\":\"Note this requires the auction house to hold the ERC721 token in escrow\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_currency\":\"address of currency to sell ERC721 token for\",\"_duration\":\"number of seconds for English Auction to run\",\"_minPercentageToAsk\":\"minimum percentage of the gross amount that goes to ask\",\"_startPrice\":\"minimum starting bid price\",\"_startTime\":\"time to start the auction\",\"_tokenId\":\"token id of ERC721 token\"}},\"settleDutchAuction(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"settleDutchAuctionWithAVAXAndWAVAX(address,uint256)\":{\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"settleEnglishAuction(address,uint256)\":{\"details\":\"Note: - Can be called by creator at any time (including before the auction's end time to accept the   current latest bid) - Can be called by anyone after the auction ends - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient - Transfers ERC721 token to last highest bidder\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_tokenId\":\"token id of ERC721 token\"}},\"startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)\":{\"details\":\"Note: - Requires the auction house to hold the ERC721 token in escrow - Drops in price every `dutchAuctionDropInterval` seconds in equal   amounts\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_currency\":\"address of currency to sell ERC721 token for\",\"_dropInterval\":\"number of seconds between each drop in price\",\"_duration\":\"number of seconds for Dutch Auction to run\",\"_endPrice\":\"ending sell price\",\"_minPercentageToAsk\":\"minimum percentage of the gross amount that goes to ask\",\"_startPrice\":\"starting sell price\",\"_tokenId\":\"token id of ERC721 token\"}},\"startEnglishAuction(address,uint256,address,uint96,uint256,uint256)\":{\"details\":\"Note this requires the auction house to hold the ERC721 token in escrow\",\"params\":{\"_collection\":\"address of ERC721 token\",\"_currency\":\"address of currency to sell ERC721 token for\",\"_duration\":\"number of seconds for English Auction to run\",\"_minPercentageToAsk\":\"minimum percentage of the gross amount that goes to ask\",\"_startPrice\":\"minimum starting bid price\",\"_tokenId\":\"token id of ERC721 token\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"unpause()\":{\"details\":\"Only callable by the owner\"},\"updateCurrencyManager(address)\":{\"params\":{\"_currencyManager\":\"new currency manager address\"}},\"updateEnglishAuctionMinBidIncrementPct(uint256)\":{\"params\":{\"_englishAuctionMinBidIncrementPct\":\"new minimum bid increment percetange for English auctions\"}},\"updateEnglishAuctionRefreshTime(uint96)\":{\"params\":{\"_englishAuctionRefreshTime\":\"new refresh time for English auctions\"}},\"updateProtocolFeeManager(address)\":{\"params\":{\"_protocolFeeManager\":\"new protocol fee manager address\"}},\"updateProtocolFeeRecipient(address)\":{\"params\":{\"_protocolFeeRecipient\":\"new recipient for protocol fees\"}},\"updateRoyaltyFeeManager(address)\":{\"params\":{\"_royaltyFeeManager\":\"new fee manager address\"}}},\"stateVariables\":{\"dutchAuctions\":{\"details\":\"(collection address => token id => dutch auction)\"},\"englishAuctions\":{\"details\":\"(collection address => token id => english auction)\"},\"userLatestAuctionNonce\":{\"details\":\"(user address => latest nonce)\"}},\"title\":\"JoepegAuctionHouse\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPauseAdmin(address)\":{\"notice\":\"Function to add a pause admin\"},\"becomeOwner()\":{\"notice\":\"Transfers the ownership to the new owner (`pendingOwner`). This will also remove the previousOwner of PauseAdmin and add the new owner. Can only be called by the pending owner (checked within the `super.becomeOwner()`)\"},\"cancelDutchAuction(address,uint256)\":{\"notice\":\"Cancels a running Dutch Auction\"},\"cancelEnglishAuction(address,uint256)\":{\"notice\":\"Cancels an English Auction\"},\"constructor\":{\"notice\":\"Constructor\"},\"dutchAuctions(address,uint256)\":{\"notice\":\"Stores Dutch Auction data for NFTs\"},\"emergencyCancelDutchAuction(address,uint256)\":{\"notice\":\"Only owner function to cancel a Dutch Auction in case of emergencies\"},\"emergencyCancelEnglishAuction(address,uint256)\":{\"notice\":\"Only owner function to cancel an English Auction in case of emergencies\"},\"englishAuctionMinBidIncrementPct()\":{\"notice\":\"Required minimum percent increase from last bid in order to place a new bid on an English Auction\"},\"englishAuctionRefreshTime()\":{\"notice\":\"Represents both: - Number of seconds before an English Auction ends where any new   bid will extend the auction's end time - Number of seconds to extend an English Auction's end time by\"},\"englishAuctions(address,uint256)\":{\"notice\":\"Stores English Auction data for NFTs\"},\"getDutchAuctionSalePrice(address,uint256)\":{\"notice\":\"Calculates current Dutch Auction sale price for an ERC721 token. Returns 0 if the auction hasn't started yet.\"},\"getNumberOfPauseAdmin()\":{\"notice\":\"View function to return the number of pause admins\"},\"getPauseAdminAt(uint256)\":{\"notice\":\"View function to return the pause admin at index `_index`\"},\"initialize(uint256,uint96,address,address,address,address)\":{\"notice\":\"Initializer\"},\"isPauseAdmin(address)\":{\"notice\":\"View function to check whether a user is an admin (true) or not (false)\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Required implementation for IERC721Receiver\"},\"owner()\":{\"notice\":\"Returns the address of the current owner\"},\"pause()\":{\"notice\":\"Function to pause the contract\"},\"pendingOwner()\":{\"notice\":\"Returns the address of the current pending owner\"},\"placeEnglishAuctionBid(address,uint256,uint256)\":{\"notice\":\"Place bid on a running English Auction\"},\"placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)\":{\"notice\":\"Place bid on a running English Auction using AVAX and/or WAVAX\"},\"removePauseAdmin(address)\":{\"notice\":\"Function to remove a pause admin\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renouncePauseAdmin()\":{\"notice\":\"Function callable by any admin to renounce their role\"},\"revokePendingOwner()\":{\"notice\":\"Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner\"},\"scheduleDutchAuction(address,uint256,address,uint96,uint96,uint256,uint256,uint256,uint256)\":{\"notice\":\"Schedules a Dutch Auction for an ERC721 token\"},\"scheduleEnglishAuction(address,uint256,address,uint96,uint96,uint256,uint256)\":{\"notice\":\"Schedules an English Auction for an ERC721 token\"},\"setPendingOwner(address)\":{\"notice\":\"Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}\"},\"settleDutchAuction(address,uint256)\":{\"notice\":\"Settles a Dutch Auction\"},\"settleDutchAuctionWithAVAXAndWAVAX(address,uint256)\":{\"notice\":\"Settles a Dutch Auction with AVAX and/or WAVAX\"},\"settleEnglishAuction(address,uint256)\":{\"notice\":\"Settles an English Auction\"},\"startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)\":{\"notice\":\"Starts a Dutch Auction for an ERC721 token\"},\"startEnglishAuction(address,uint256,address,uint96,uint256,uint256)\":{\"notice\":\"Starts an English Auction for an ERC721 token\"},\"unpause()\":{\"notice\":\"Function to unpause the contract\"},\"updateCurrencyManager(address)\":{\"notice\":\"Update currency manager\"},\"updateEnglishAuctionMinBidIncrementPct(uint256)\":{\"notice\":\"Update `englishAuctionMinBidIncrementPct`\"},\"updateEnglishAuctionRefreshTime(uint96)\":{\"notice\":\"Update `englishAuctionRefreshTime`\"},\"updateProtocolFeeManager(address)\":{\"notice\":\"Update protocol fee manager\"},\"updateProtocolFeeRecipient(address)\":{\"notice\":\"Update protocol fee recipient\"},\"updateRoyaltyFeeManager(address)\":{\"notice\":\"Update royalty fee manager\"},\"userLatestAuctionNonce(address)\":{\"notice\":\"Stores latest auction nonce per user\"}},\"notice\":\"An auction house that supports running English and Dutch auctions on ERC721 tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JoepegAuctionHouse.sol\":\"JoepegAuctionHouse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/JoepegAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport {IProtocolFeeManager} from \\\"./interfaces/IProtocolFeeManager.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {IWAVAX} from \\\"./interfaces/IWAVAX.sol\\\";\\nimport {PausableAdminUpgradeable} from \\\"./utils/PausableAdminUpgradeable.sol\\\";\\n\\nerror JoepegAuctionHouse__AuctionAlreadyExists();\\nerror JoepegAuctionHouse__CurrencyMismatch();\\nerror JoepegAuctionHouse__ExpectedNonNullAddress();\\nerror JoepegAuctionHouse__ExpectedNonZeroFinalSellerAmount();\\nerror JoepegAuctionHouse__FeesHigherThanExpected();\\nerror JoepegAuctionHouse__InvalidDropInterval();\\nerror JoepegAuctionHouse__InvalidDuration();\\nerror JoepegAuctionHouse__InvalidMinPercentageToAsk();\\nerror JoepegAuctionHouse__InvalidStartTime();\\nerror JoepegAuctionHouse__NoAuctionExists();\\nerror JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\nerror JoepegAuctionHouse__UnsupportedCurrency();\\n\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnUnstartedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleUnstartedAuction();\\nerror JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid();\\nerror JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid();\\nerror JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct();\\nerror JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime();\\nerror JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime();\\n\\nerror JoepegAuctionHouse__DutchAuctionCannotSettleUnstartedAuction();\\nerror JoepegAuctionHouse__DutchAuctionCreatorCannotSettle();\\nerror JoepegAuctionHouse__DutchAuctionInsufficientAmountToSettle();\\nerror JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice();\\n\\n/**\\n * @title JoepegAuctionHouse\\n * @notice An auction house that supports running English and Dutch auctions on ERC721 tokens\\n */\\ncontract JoepegAuctionHouse is\\n    Initializable,\\n    PausableAdminUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IERC721Receiver\\n{\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct DutchAuction {\\n        address creator;\\n        uint96 startTime;\\n        address currency;\\n        uint96 endTime;\\n        uint256 nonce;\\n        uint256 startPrice;\\n        uint256 endPrice;\\n        uint256 dropInterval;\\n        uint256 minPercentageToAsk;\\n    }\\n\\n    struct EnglishAuction {\\n        address creator;\\n        address currency;\\n        uint96 startTime;\\n        address lastBidder;\\n        uint96 endTime;\\n        uint256 nonce;\\n        uint256 lastBidPrice;\\n        uint256 startPrice;\\n        uint256 minPercentageToAsk;\\n    }\\n\\n    uint256 public constant PERCENTAGE_PRECISION = 10000;\\n\\n    address public immutable WAVAX;\\n\\n    ICurrencyManager public currencyManager;\\n    IProtocolFeeManager public protocolFeeManager;\\n    IRoyaltyFeeManager public royaltyFeeManager;\\n\\n    address public protocolFeeRecipient;\\n\\n    /// @notice Stores latest auction nonce per user\\n    /// @dev (user address => latest nonce)\\n    mapping(address => uint256) public userLatestAuctionNonce;\\n\\n    /// @notice Stores Dutch Auction data for NFTs\\n    /// @dev (collection address => token id => dutch auction)\\n    mapping(address => mapping(uint256 => DutchAuction)) public dutchAuctions;\\n\\n    /// @notice Stores English Auction data for NFTs\\n    /// @dev (collection address => token id => english auction)\\n    mapping(address => mapping(uint256 => EnglishAuction))\\n        public englishAuctions;\\n\\n    /// @notice Required minimum percent increase from last bid in order to\\n    /// place a new bid on an English Auction\\n    uint256 public englishAuctionMinBidIncrementPct;\\n\\n    /// @notice Represents both:\\n    /// - Number of seconds before an English Auction ends where any new\\n    ///   bid will extend the auction's end time\\n    /// - Number of seconds to extend an English Auction's end time by\\n    uint96 public englishAuctionRefreshTime;\\n\\n    event DutchAuctionStart(\\n        address indexed creator,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 startPrice,\\n        uint256 endPrice,\\n        uint96 startTime,\\n        uint96 endTime,\\n        uint256 dropInterval,\\n        uint256 minPercentageToAsk\\n    );\\n    event DutchAuctionSettle(\\n        address indexed creator,\\n        address buyer,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 price\\n    );\\n    event DutchAuctionCancel(\\n        address indexed caller,\\n        address creator,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce\\n    );\\n\\n    event EnglishAuctionStart(\\n        address indexed creator,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 startPrice,\\n        uint96 startTime,\\n        uint96 endTime,\\n        uint256 minPercentageToAsk\\n    );\\n    event EnglishAuctionPlaceBid(\\n        address indexed creator,\\n        address bidder,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 bidAmount,\\n        uint96 endTimeExtension\\n    );\\n    event EnglishAuctionSettle(\\n        address indexed creator,\\n        address buyer,\\n        address currency,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce,\\n        uint256 price\\n    );\\n    event EnglishAuctionCancel(\\n        address indexed caller,\\n        address creator,\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        uint256 nonce\\n    );\\n\\n    event CurrencyManagerSet(\\n        address indexed oldCurrencyManager,\\n        address indexed newCurrencyManager\\n    );\\n    event EnglishAuctionMinBidIncrementPctSet(\\n        uint256 indexed oldEnglishAuctionMinBidIncrementPct,\\n        uint256 indexed newEnglishAuctionMinBidIncrementPct\\n    );\\n    event EnglishAuctionRefreshTimeSet(\\n        uint96 indexed oldEnglishAuctionRefreshTime,\\n        uint96 indexed newEnglishAuctionRefreshTime\\n    );\\n    event ProtocolFeeManagerSet(\\n        address indexed oldProtocolFeeManager,\\n        address indexed newProtocolFeeManager\\n    );\\n    event ProtocolFeeRecipientSet(\\n        address indexed oldProtocolFeeRecipient,\\n        address indexed newProtocolFeeRecipient\\n    );\\n    event RoyaltyFeeManagerSet(\\n        address indexed oldRoyaltyFeeManager,\\n        address indexed newRoyaltyFeeManager\\n    );\\n\\n    event RoyaltyPayment(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        address indexed royaltyRecipient,\\n        address currency,\\n        uint256 amount\\n    );\\n\\n    modifier isSupportedCurrency(IERC20 _currency) {\\n        if (!currencyManager.isCurrencyWhitelisted(address(_currency))) {\\n            revert JoepegAuctionHouse__UnsupportedCurrency();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    modifier isValidStartTime(uint256 _startTime) {\\n        if (_startTime < block.timestamp) {\\n            revert JoepegAuctionHouse__InvalidStartTime();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    modifier isValidMinPercentageToAsk(uint256 _minPercentageToAsk) {\\n        if (\\n            _minPercentageToAsk == 0 ||\\n            _minPercentageToAsk > PERCENTAGE_PRECISION\\n        ) {\\n            revert JoepegAuctionHouse__InvalidMinPercentageToAsk();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    ///  @notice Constructor\\n    ///  @param _wavax address of WAVAX\\n    constructor(address _wavax) {\\n        WAVAX = _wavax;\\n    }\\n\\n    ///  @notice Initializer\\n    ///  @param _englishAuctionMinBidIncrementPct minimum bid increment percentage for English Auctions\\n    ///  @param _englishAuctionRefreshTime refresh time for English auctions\\n    ///  @param _currencyManager currency manager address\\n    ///  @param _protocolFeeManager protocol fee manager address\\n    ///  @param _royaltyFeeManager royalty fee manager address\\n    ///  @param _protocolFeeRecipient protocol fee recipient\\n    function initialize(\\n        uint256 _englishAuctionMinBidIncrementPct,\\n        uint96 _englishAuctionRefreshTime,\\n        address _currencyManager,\\n        address _protocolFeeManager,\\n        address _royaltyFeeManager,\\n        address _protocolFeeRecipient\\n    ) public initializer {\\n        __PausableAdmin_init();\\n        __ReentrancyGuard_init();\\n\\n        _updateEnglishAuctionMinBidIncrementPct(\\n            _englishAuctionMinBidIncrementPct\\n        );\\n        _updateEnglishAuctionRefreshTime(_englishAuctionRefreshTime);\\n        _updateCurrencyManager(_currencyManager);\\n        _updateProtocolFeeManager(_protocolFeeManager);\\n        _updateRoyaltyFeeManager(_royaltyFeeManager);\\n        _updateProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /// @notice Required implementation for IERC721Receiver\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Starts an English Auction for an ERC721 token\\n    /// @dev Note this requires the auction house to hold the ERC721 token in escrow\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of currency to sell ERC721 token for\\n    /// @param _duration number of seconds for English Auction to run\\n    /// @param _startPrice minimum starting bid price\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function startEnglishAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _duration,\\n        uint256 _startPrice,\\n        uint256 _minPercentageToAsk\\n    )\\n        external\\n        whenNotPaused\\n        isSupportedCurrency(_currency)\\n        isValidMinPercentageToAsk(_minPercentageToAsk)\\n        nonReentrant\\n    {\\n        _addEnglishAuction(\\n            _collection,\\n            _tokenId,\\n            _currency,\\n            block.timestamp.toUint96(),\\n            _duration,\\n            _startPrice,\\n            _minPercentageToAsk\\n        );\\n    }\\n\\n    /// @notice Schedules an English Auction for an ERC721 token\\n    /// @dev Note this requires the auction house to hold the ERC721 token in escrow\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of currency to sell ERC721 token for\\n    /// @param _startTime time to start the auction\\n    /// @param _duration number of seconds for English Auction to run\\n    /// @param _startPrice minimum starting bid price\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function scheduleEnglishAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _startTime,\\n        uint96 _duration,\\n        uint256 _startPrice,\\n        uint256 _minPercentageToAsk\\n    )\\n        external\\n        whenNotPaused\\n        isSupportedCurrency(_currency)\\n        isValidStartTime(_startTime)\\n        isValidMinPercentageToAsk(_minPercentageToAsk)\\n        nonReentrant\\n    {\\n        _addEnglishAuction(\\n            _collection,\\n            _tokenId,\\n            _currency,\\n            _startTime,\\n            _duration,\\n            _startPrice,\\n            _minPercentageToAsk\\n        );\\n    }\\n\\n    function _addEnglishAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _startTime,\\n        uint96 _duration,\\n        uint256 _startPrice,\\n        uint256 _minPercentageToAsk\\n    ) internal {\\n        if (_duration == 0) {\\n            revert JoepegAuctionHouse__InvalidDuration();\\n        }\\n        address collectionAddress = address(_collection);\\n        if (\\n            englishAuctions[collectionAddress][_tokenId].creator != address(0)\\n        ) {\\n            revert JoepegAuctionHouse__AuctionAlreadyExists();\\n        }\\n\\n        uint256 nonce = userLatestAuctionNonce[msg.sender];\\n        EnglishAuction memory auction = EnglishAuction({\\n            creator: msg.sender,\\n            nonce: nonce,\\n            currency: address(_currency),\\n            lastBidder: address(0),\\n            lastBidPrice: 0,\\n            startTime: _startTime,\\n            endTime: _startTime + _duration,\\n            startPrice: _startPrice,\\n            minPercentageToAsk: _minPercentageToAsk\\n        });\\n        englishAuctions[collectionAddress][_tokenId] = auction;\\n        userLatestAuctionNonce[msg.sender] = nonce + 1;\\n\\n        // Hold ERC721 token in escrow\\n        _collection.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit EnglishAuctionStart(\\n            auction.creator,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.startPrice,\\n            _startTime,\\n            auction.endTime,\\n            auction.minPercentageToAsk\\n        );\\n    }\\n\\n    /// @notice Place bid on a running English Auction\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _amount amount of currency to bid\\n    function placeEnglishAuctionBid(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external whenNotPaused nonReentrant {\\n        EnglishAuction memory auction = englishAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        address currency = auction.currency;\\n        if (currency == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n\\n        IERC20(currency).safeTransferFrom(msg.sender, address(this), _amount);\\n        _placeEnglishAuctionBid(_collection, _tokenId, _amount, auction);\\n    }\\n\\n    /// @notice Place bid on a running English Auction using AVAX and/or WAVAX\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _wavaxAmount amount of WAVAX to bid\\n    function placeEnglishAuctionBidWithAVAXAndWAVAX(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        uint256 _wavaxAmount\\n    ) external payable whenNotPaused nonReentrant {\\n        EnglishAuction memory auction = englishAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        address currency = auction.currency;\\n        if (currency != WAVAX) {\\n            revert JoepegAuctionHouse__CurrencyMismatch();\\n        }\\n\\n        if (msg.value > 0) {\\n            // Wrap AVAX into WAVAX\\n            IWAVAX(WAVAX).deposit{value: msg.value}();\\n        }\\n        if (_wavaxAmount > 0) {\\n            IERC20(WAVAX).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _wavaxAmount\\n            );\\n        }\\n        _placeEnglishAuctionBid(\\n            _collection,\\n            _tokenId,\\n            msg.value + _wavaxAmount,\\n            auction\\n        );\\n    }\\n\\n    /// @notice Settles an English Auction\\n    /// @dev Note:\\n    /// - Can be called by creator at any time (including before the auction's end time to accept the\\n    ///   current latest bid)\\n    /// - Can be called by anyone after the auction ends\\n    /// - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient\\n    /// - Transfers ERC721 token to last highest bidder\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function settleEnglishAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address collectionAddress = address(_collection);\\n        EnglishAuction memory auction = englishAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n        if (auction.lastBidPrice == 0) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotSettleWithoutBid();\\n        }\\n        if (block.timestamp < auction.startTime) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotSettleUnstartedAuction();\\n        }\\n        if (\\n            msg.sender != auction.creator && block.timestamp < auction.endTime\\n        ) {\\n            revert JoepegAuctionHouse__EnglishAuctionOnlyCreatorCanSettleBeforeEndTime();\\n        }\\n\\n        delete englishAuctions[collectionAddress][_tokenId];\\n\\n        // Settle auction using latest bid\\n        _transferFeesAndFunds(\\n            collectionAddress,\\n            _tokenId,\\n            IERC20(auction.currency),\\n            address(this),\\n            auction.creator,\\n            auction.lastBidPrice,\\n            auction.minPercentageToAsk\\n        );\\n\\n        _collection.safeTransferFrom(\\n            address(this),\\n            auction.lastBidder,\\n            _tokenId\\n        );\\n\\n        emit EnglishAuctionSettle(\\n            auction.creator,\\n            auction.lastBidder,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.lastBidPrice\\n        );\\n    }\\n\\n    /// @notice Cancels an English Auction\\n    /// @dev Note:\\n    /// - Can only be called by auction creator\\n    /// - Can only be cancelled if no bids have been placed\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function cancelEnglishAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address collectionAddress = address(_collection);\\n        EnglishAuction memory auction = englishAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (msg.sender != auction.creator) {\\n            revert JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\n        }\\n        if (auction.lastBidder != address(0)) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotCancelWithExistingBid();\\n        }\\n\\n        delete englishAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        emit EnglishAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Only owner function to cancel an English Auction in case of emergencies\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function emergencyCancelEnglishAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId\\n    ) external nonReentrant onlyOwner {\\n        address collectionAddress = address(_collection);\\n        EnglishAuction memory auction = englishAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n\\n        address lastBidder = auction.lastBidder;\\n        uint256 lastBidPrice = auction.lastBidPrice;\\n\\n        delete englishAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        if (lastBidPrice > 0) {\\n            IERC20(auction.currency).safeTransfer(lastBidder, lastBidPrice);\\n        }\\n\\n        emit EnglishAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Starts a Dutch Auction for an ERC721 token\\n    /// @dev Note:\\n    /// - Requires the auction house to hold the ERC721 token in escrow\\n    /// - Drops in price every `dutchAuctionDropInterval` seconds in equal\\n    ///   amounts\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of currency to sell ERC721 token for\\n    /// @param _duration number of seconds for Dutch Auction to run\\n    /// @param _dropInterval number of seconds between each drop in price\\n    /// @param _startPrice starting sell price\\n    /// @param _endPrice ending sell price\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function startDutchAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _duration,\\n        uint256 _dropInterval,\\n        uint256 _startPrice,\\n        uint256 _endPrice,\\n        uint256 _minPercentageToAsk\\n    )\\n        external\\n        whenNotPaused\\n        isSupportedCurrency(_currency)\\n        isValidMinPercentageToAsk(_minPercentageToAsk)\\n        nonReentrant\\n    {\\n        _addDutchAuction(\\n            _collection,\\n            _tokenId,\\n            _currency,\\n            block.timestamp.toUint96(),\\n            _duration,\\n            _dropInterval,\\n            _startPrice,\\n            _endPrice,\\n            _minPercentageToAsk\\n        );\\n    }\\n\\n    /// @notice Schedules a Dutch Auction for an ERC721 token\\n    /// @dev Note:\\n    /// - Requires the auction house to hold the ERC721 token in escrow\\n    /// - Drops in price every `dutchAuctionDropInterval` seconds in equal\\n    ///   amounts\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of currency to sell ERC721 token for\\n    /// @param _startTime time to start the auction\\n    /// @param _duration number of seconds for Dutch Auction to run\\n    /// @param _dropInterval number of seconds between each drop in price\\n    /// @param _startPrice starting sell price\\n    /// @param _endPrice ending sell price\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function scheduleDutchAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _startTime,\\n        uint96 _duration,\\n        uint256 _dropInterval,\\n        uint256 _startPrice,\\n        uint256 _endPrice,\\n        uint256 _minPercentageToAsk\\n    )\\n        external\\n        whenNotPaused\\n        isSupportedCurrency(_currency)\\n        isValidStartTime(_startTime)\\n        isValidMinPercentageToAsk(_minPercentageToAsk)\\n        nonReentrant\\n    {\\n        _addDutchAuction(\\n            _collection,\\n            _tokenId,\\n            _currency,\\n            _startTime,\\n            _duration,\\n            _dropInterval,\\n            _startPrice,\\n            _endPrice,\\n            _minPercentageToAsk\\n        );\\n    }\\n\\n    function _addDutchAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        uint96 _startTime,\\n        uint96 _duration,\\n        uint256 _dropInterval,\\n        uint256 _startPrice,\\n        uint256 _endPrice,\\n        uint256 _minPercentageToAsk\\n    ) internal {\\n        if (_duration == 0 || _duration < _dropInterval) {\\n            revert JoepegAuctionHouse__InvalidDuration();\\n        }\\n        if (_dropInterval == 0) {\\n            revert JoepegAuctionHouse__InvalidDropInterval();\\n        }\\n        address collectionAddress = address(_collection);\\n        if (dutchAuctions[collectionAddress][_tokenId].creator != address(0)) {\\n            revert JoepegAuctionHouse__AuctionAlreadyExists();\\n        }\\n        if (_startPrice <= _endPrice || _endPrice == 0) {\\n            revert JoepegAuctionHouse__DutchAuctionInvalidStartEndPrice();\\n        }\\n\\n        DutchAuction memory auction = DutchAuction({\\n            creator: msg.sender,\\n            nonce: userLatestAuctionNonce[msg.sender],\\n            currency: address(_currency),\\n            startPrice: _startPrice,\\n            endPrice: _endPrice,\\n            startTime: _startTime,\\n            endTime: _startTime + _duration,\\n            dropInterval: _dropInterval,\\n            minPercentageToAsk: _minPercentageToAsk\\n        });\\n        dutchAuctions[collectionAddress][_tokenId] = auction;\\n        userLatestAuctionNonce[msg.sender] += 1;\\n\\n        _collection.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit DutchAuctionStart(\\n            auction.creator,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.startPrice,\\n            auction.endPrice,\\n            auction.startTime,\\n            auction.endTime,\\n            auction.dropInterval,\\n            auction.minPercentageToAsk\\n        );\\n    }\\n\\n    /// @notice Settles a Dutch Auction\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function settleDutchAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        DutchAuction memory auction = dutchAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        _settleDutchAuction(_collection, _tokenId, auction);\\n    }\\n\\n    /// @notice Settles a Dutch Auction with AVAX and/or WAVAX\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function settleDutchAuctionWithAVAXAndWAVAX(\\n        IERC721 _collection,\\n        uint256 _tokenId\\n    ) external payable whenNotPaused nonReentrant {\\n        DutchAuction memory auction = dutchAuctions[address(_collection)][\\n            _tokenId\\n        ];\\n        address currency = auction.currency;\\n        if (currency != WAVAX) {\\n            revert JoepegAuctionHouse__CurrencyMismatch();\\n        }\\n\\n        _settleDutchAuction(_collection, _tokenId, auction);\\n    }\\n\\n    /// @notice Calculates current Dutch Auction sale price for an ERC721 token.\\n    /// Returns 0 if the auction hasn't started yet.\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @return current Dutch Auction sale price for specified ERC721 token\\n    function getDutchAuctionSalePrice(address _collection, uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        DutchAuction memory auction = dutchAuctions[_collection][_tokenId];\\n        if (block.timestamp < auction.startTime) {\\n            return 0;\\n        }\\n        if (block.timestamp >= auction.endTime) {\\n            return auction.endPrice;\\n        }\\n        uint256 timeElapsed = block.timestamp - auction.startTime;\\n        uint256 elapsedSteps = timeElapsed / auction.dropInterval;\\n        uint256 totalPossibleSteps = (auction.endTime - auction.startTime) /\\n            auction.dropInterval;\\n\\n        uint256 priceDifference = auction.startPrice - auction.endPrice;\\n\\n        return\\n            auction.startPrice -\\n            (elapsedSteps * priceDifference) /\\n            totalPossibleSteps;\\n    }\\n\\n    /// @notice Cancels a running Dutch Auction\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function cancelDutchAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address collectionAddress = address(_collection);\\n        DutchAuction memory auction = dutchAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (msg.sender != auction.creator) {\\n            revert JoepegAuctionHouse__OnlyAuctionCreatorCanCancel();\\n        }\\n\\n        delete dutchAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        emit DutchAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Only owner function to cancel a Dutch Auction in case of emergencies\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function emergencyCancelDutchAuction(IERC721 _collection, uint256 _tokenId)\\n        external\\n        nonReentrant\\n        onlyOwner\\n    {\\n        address collectionAddress = address(_collection);\\n        DutchAuction memory auction = dutchAuctions[collectionAddress][\\n            _tokenId\\n        ];\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n\\n        delete dutchAuctions[collectionAddress][_tokenId];\\n\\n        _collection.safeTransferFrom(address(this), auction.creator, _tokenId);\\n\\n        emit DutchAuctionCancel(\\n            msg.sender,\\n            auction.creator,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce\\n        );\\n    }\\n\\n    /// @notice Update `englishAuctionMinBidIncrementPct`\\n    /// @param _englishAuctionMinBidIncrementPct new minimum bid increment percetange for English auctions\\n    function updateEnglishAuctionMinBidIncrementPct(\\n        uint256 _englishAuctionMinBidIncrementPct\\n    ) external onlyOwner {\\n        _updateEnglishAuctionMinBidIncrementPct(\\n            _englishAuctionMinBidIncrementPct\\n        );\\n    }\\n\\n    /// @notice Update `englishAuctionMinBidIncrementPct`\\n    /// @param _englishAuctionMinBidIncrementPct new minimum bid increment percetange for English auctions\\n    function _updateEnglishAuctionMinBidIncrementPct(\\n        uint256 _englishAuctionMinBidIncrementPct\\n    ) internal {\\n        if (\\n            _englishAuctionMinBidIncrementPct == 0 ||\\n            _englishAuctionMinBidIncrementPct > PERCENTAGE_PRECISION\\n        ) {\\n            revert JoepegAuctionHouse__EnglishAuctionInvalidMinBidIncrementPct();\\n        }\\n\\n        uint256 oldEnglishAuctionMinBidIncrementPct = englishAuctionMinBidIncrementPct;\\n        englishAuctionMinBidIncrementPct = _englishAuctionMinBidIncrementPct;\\n        emit EnglishAuctionMinBidIncrementPctSet(\\n            oldEnglishAuctionMinBidIncrementPct,\\n            _englishAuctionMinBidIncrementPct\\n        );\\n    }\\n\\n    /// @notice Update `englishAuctionRefreshTime`\\n    /// @param _englishAuctionRefreshTime new refresh time for English auctions\\n    function updateEnglishAuctionRefreshTime(uint96 _englishAuctionRefreshTime)\\n        external\\n        onlyOwner\\n    {\\n        _updateEnglishAuctionRefreshTime(_englishAuctionRefreshTime);\\n    }\\n\\n    /// @notice Update `englishAuctionRefreshTime`\\n    /// @param _englishAuctionRefreshTime new refresh time for English auctions\\n    function _updateEnglishAuctionRefreshTime(uint96 _englishAuctionRefreshTime)\\n        internal\\n    {\\n        if (_englishAuctionRefreshTime == 0) {\\n            revert JoepegAuctionHouse__EnglishAuctionInvalidRefreshTime();\\n        }\\n        uint96 oldEnglishAuctionRefreshTime = englishAuctionRefreshTime;\\n        englishAuctionRefreshTime = _englishAuctionRefreshTime;\\n        emit EnglishAuctionRefreshTimeSet(\\n            oldEnglishAuctionRefreshTime,\\n            englishAuctionRefreshTime\\n        );\\n    }\\n\\n    /// @notice Update currency manager\\n    /// @param _currencyManager new currency manager address\\n    function updateCurrencyManager(address _currencyManager)\\n        external\\n        onlyOwner\\n    {\\n        _updateCurrencyManager(_currencyManager);\\n    }\\n\\n    /// @notice Update currency manager\\n    /// @param _currencyManager new currency manager address\\n    function _updateCurrencyManager(address _currencyManager) internal {\\n        if (_currencyManager == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldCurrencyManagerAddress = address(currencyManager);\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        emit CurrencyManagerSet(oldCurrencyManagerAddress, _currencyManager);\\n    }\\n\\n    /// @notice Update protocol fee manager\\n    /// @param _protocolFeeManager new protocol fee manager address\\n    function updateProtocolFeeManager(address _protocolFeeManager)\\n        external\\n        onlyOwner\\n    {\\n        _updateProtocolFeeManager(_protocolFeeManager);\\n    }\\n\\n    /// @notice Update protocol fee manager\\n    /// @param _protocolFeeManager new protocol fee manager address\\n    function _updateProtocolFeeManager(address _protocolFeeManager) internal {\\n        if (_protocolFeeManager == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldProtocolFeeManagerAddress = address(protocolFeeManager);\\n        protocolFeeManager = IProtocolFeeManager(_protocolFeeManager);\\n        emit ProtocolFeeManagerSet(\\n            oldProtocolFeeManagerAddress,\\n            _protocolFeeManager\\n        );\\n    }\\n\\n    /// @notice Update protocol fee recipient\\n    /// @param _protocolFeeRecipient new recipient for protocol fees\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient)\\n        external\\n        onlyOwner\\n    {\\n        _updateProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /// @notice Update protocol fee recipient\\n    /// @param _protocolFeeRecipient new recipient for protocol fees\\n    function _updateProtocolFeeRecipient(address _protocolFeeRecipient)\\n        internal\\n    {\\n        if (_protocolFeeRecipient == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldProtocolFeeRecipient = protocolFeeRecipient;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit ProtocolFeeRecipientSet(\\n            oldProtocolFeeRecipient,\\n            _protocolFeeRecipient\\n        );\\n    }\\n\\n    /// @notice Update royalty fee manager\\n    /// @param _royaltyFeeManager new fee manager address\\n    function updateRoyaltyFeeManager(address _royaltyFeeManager)\\n        external\\n        onlyOwner\\n    {\\n        _updateRoyaltyFeeManager(_royaltyFeeManager);\\n    }\\n\\n    /// @notice Update royalty fee manager\\n    /// @param _royaltyFeeManager new fee manager address\\n    function _updateRoyaltyFeeManager(address _royaltyFeeManager) internal {\\n        if (_royaltyFeeManager == address(0)) {\\n            revert JoepegAuctionHouse__ExpectedNonNullAddress();\\n        }\\n        address oldRoyaltyFeeManagerAddress = address(royaltyFeeManager);\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        emit RoyaltyFeeManagerSet(\\n            oldRoyaltyFeeManagerAddress,\\n            _royaltyFeeManager\\n        );\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these ids are created.\\n    /// This function call must use less than 30 000 gas.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Place bid on a running English Auction\\n    /// @dev Note:\\n    /// - Requires holding the bid in escrow until either a higher bid is placed\\n    ///   or the auction is settled\\n    /// - If a bid already exists, only bids at least `englishAuctionMinBidIncrementPct`\\n    ///   percent higher can be placed\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _bidAmount amount of currency to bid\\n    function _placeEnglishAuctionBid(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        uint256 _bidAmount,\\n        EnglishAuction memory auction\\n    ) internal {\\n        if (auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n        if (_bidAmount == 0) {\\n            revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n        }\\n        if (msg.sender == auction.creator) {\\n            revert JoepegAuctionHouse__EnglishAuctionCreatorCannotPlaceBid();\\n        }\\n        if (block.timestamp < auction.startTime) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotBidOnUnstartedAuction();\\n        }\\n        if (block.timestamp >= auction.endTime) {\\n            revert JoepegAuctionHouse__EnglishAuctionCannotBidOnEndedAuction();\\n        }\\n\\n        uint96 endTimeExtension;\\n        if (auction.endTime - block.timestamp <= englishAuctionRefreshTime) {\\n            endTimeExtension = englishAuctionRefreshTime;\\n            auction.endTime += endTimeExtension;\\n        }\\n\\n        if (auction.lastBidPrice == 0) {\\n            if (_bidAmount < auction.startPrice) {\\n                revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n            }\\n            auction.lastBidder = msg.sender;\\n            auction.lastBidPrice = _bidAmount;\\n        } else {\\n            if (msg.sender == auction.lastBidder) {\\n                // If bidder is same as last bidder, ensure their bid is at least\\n                // `englishAuctionMinBidIncrementPct` percent of their previous bid\\n                if (\\n                    _bidAmount * PERCENTAGE_PRECISION <\\n                    auction.lastBidPrice * englishAuctionMinBidIncrementPct\\n                ) {\\n                    revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n                }\\n                auction.lastBidPrice += _bidAmount;\\n            } else {\\n                // Ensure bid is at least `englishAuctionMinBidIncrementPct` percent greater\\n                // than last bid\\n                if (\\n                    _bidAmount * PERCENTAGE_PRECISION <\\n                    auction.lastBidPrice *\\n                        (PERCENTAGE_PRECISION +\\n                            englishAuctionMinBidIncrementPct)\\n                ) {\\n                    revert JoepegAuctionHouse__EnglishAuctionInsufficientBidAmount();\\n                }\\n\\n                address previousBidder = auction.lastBidder;\\n                uint256 previousBidPrice = auction.lastBidPrice;\\n\\n                auction.lastBidder = msg.sender;\\n                auction.lastBidPrice = _bidAmount;\\n\\n                // Transfer previous bid back to bidder\\n                IERC20(auction.currency).safeTransfer(\\n                    previousBidder,\\n                    previousBidPrice\\n                );\\n            }\\n        }\\n\\n        address collectionAddress = address(_collection);\\n        englishAuctions[collectionAddress][_tokenId] = auction;\\n\\n        emit EnglishAuctionPlaceBid(\\n            auction.creator,\\n            auction.lastBidder,\\n            auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            auction.nonce,\\n            auction.lastBidPrice,\\n            endTimeExtension\\n        );\\n    }\\n\\n    /// @notice Settles a Dutch Auction\\n    /// @dev Note:\\n    /// - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient\\n    /// - Transfers ERC721 token to buyer\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    function _settleDutchAuction(\\n        IERC721 _collection,\\n        uint256 _tokenId,\\n        DutchAuction memory _auction\\n    ) internal {\\n        if (_auction.creator == address(0)) {\\n            revert JoepegAuctionHouse__NoAuctionExists();\\n        }\\n        if (msg.sender == _auction.creator) {\\n            revert JoepegAuctionHouse__DutchAuctionCreatorCannotSettle();\\n        }\\n        if (block.timestamp < _auction.startTime) {\\n            revert JoepegAuctionHouse__DutchAuctionCannotSettleUnstartedAuction();\\n        }\\n\\n        // Get auction sale price\\n        address collectionAddress = address(_collection);\\n        uint256 salePrice = getDutchAuctionSalePrice(\\n            collectionAddress,\\n            _tokenId\\n        );\\n\\n        delete dutchAuctions[collectionAddress][_tokenId];\\n\\n        if (_auction.currency == WAVAX) {\\n            // Transfer WAVAX if needed\\n            if (salePrice > msg.value) {\\n                IERC20(WAVAX).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    salePrice - msg.value\\n                );\\n            }\\n\\n            // Wrap AVAX if needed\\n            if (msg.value > 0) {\\n                IWAVAX(WAVAX).deposit{value: msg.value}();\\n            }\\n\\n            // Refund excess AVAX if needed\\n            if (salePrice < msg.value) {\\n                IERC20(WAVAX).safeTransfer(msg.sender, msg.value - salePrice);\\n            }\\n\\n            _transferFeesAndFunds(\\n                collectionAddress,\\n                _tokenId,\\n                IERC20(WAVAX),\\n                address(this),\\n                _auction.creator,\\n                salePrice,\\n                _auction.minPercentageToAsk\\n            );\\n        } else {\\n            _transferFeesAndFunds(\\n                collectionAddress,\\n                _tokenId,\\n                IERC20(_auction.currency),\\n                msg.sender,\\n                _auction.creator,\\n                salePrice,\\n                _auction.minPercentageToAsk\\n            );\\n        }\\n\\n        _collection.safeTransferFrom(address(this), msg.sender, _tokenId);\\n\\n        emit DutchAuctionSettle(\\n            _auction.creator,\\n            msg.sender,\\n            _auction.currency,\\n            collectionAddress,\\n            _tokenId,\\n            _auction.nonce,\\n            salePrice\\n        );\\n    }\\n\\n    /// @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n    /// @param _collection address of ERC721 token\\n    /// @param _tokenId token id of ERC721 token\\n    /// @param _currency address of token being used for the purchase (e.g. USDC)\\n    /// @param _from sender of the funds\\n    /// @param _to seller's recipient\\n    /// @param _amount amount being transferred (in currency)\\n    /// @param _minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n    function _transferFeesAndFunds(\\n        address _collection,\\n        uint256 _tokenId,\\n        IERC20 _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = _amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(\\n                _collection,\\n                _amount\\n            );\\n            address _protocolFeeRecipient = protocolFeeRecipient;\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if (\\n                (_protocolFeeRecipient != address(0)) &&\\n                (protocolFeeAmount != 0)\\n            ) {\\n                _currency.safeTransferFrom(\\n                    _from,\\n                    _protocolFeeRecipient,\\n                    protocolFeeAmount\\n                );\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    _collection,\\n                    _tokenId,\\n                    _amount\\n                );\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if (\\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\\n            ) {\\n                _currency.safeTransferFrom(\\n                    _from,\\n                    royaltyFeeRecipient,\\n                    royaltyFeeAmount\\n                );\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(\\n                    _collection,\\n                    _tokenId,\\n                    royaltyFeeRecipient,\\n                    address(_currency),\\n                    royaltyFeeAmount\\n                );\\n            }\\n        }\\n\\n        // Ensure seller gets minimum expected fees\\n        if (\\n            finalSellerAmount * PERCENTAGE_PRECISION <\\n            _minPercentageToAsk * _amount\\n        ) {\\n            revert JoepegAuctionHouse__FeesHigherThanExpected();\\n        }\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            _currency.safeTransferFrom(_from, _to, finalSellerAmount);\\n        }\\n    }\\n\\n    /// @notice Calculate protocol fee for a given collection\\n    /// @param _collection address of collection\\n    /// @param _amount amount to transfer\\n    function _calculateProtocolFee(address _collection, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 protocolFee = protocolFeeManager.protocolFeeForCollection(\\n            _collection\\n        );\\n        return (protocolFee * _amount) / PERCENTAGE_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xb02653975e6bfcbc9180d005b426e33b29eed73133871a1e24ca0400a4dd1066\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency)\\n        external\\n        view\\n        returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\\n        external\\n        view\\n        returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20cec00e38bd01cc6c3db2e3cf623db82912098013591492bae24c6546ba962f\",\"license\":\"MIT\"},\"contracts/interfaces/IPausableAdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPausableAdminUpgradeable {\\n    event PauseAdminAdded(address newAdmin);\\n    event PauseAdminRemoved(address sender, address removedAdmin);\\n\\n    function getPauseAdminAt(uint256 _index) external view returns (address);\\n\\n    function isPauseAdmin(address _user) external view returns (bool);\\n\\n    function getNumberOfPauseAdmin() external view returns (uint256);\\n\\n    function addPauseAdmin(address _newAdmin) external;\\n\\n    function removePauseAdmin(address _admin) external;\\n\\n    function renouncePauseAdmin() external;\\n}\\n\",\"keccak256\":\"0x67a2ca6ba54633304da700e36dd1568906f550dc434734636685575f10f09b8d\",\"license\":\"MIT\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPendingOwnableUpgradeable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xa2635c93df8d838efbecaad409b1f5a5f61de333dfb25c2c2a1862bacb0cc85a\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProtocolFeeManager {\\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee) external;\\n\\n    function setProtocolFeeForCollection(\\n        address _collection,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    function unsetProtocolFeeForCollection(address _collection) external;\\n\\n    function protocolFeeForCollection(address _collection)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function defaultProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c23934d4de891c89d2d799459704750c5d02970ab2476878bf7c5f459941f6a\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe91c4fa5c0ae8f35521d0853efcb9e617299909032bce6e98981d11c06088bc6\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9c9ad99546d3d740022129afd27de11e95216edf9cbf2197e11f50cea6814d21\",\"license\":\"GNU\"},\"contracts/utils/PausableAdminErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nerror PausableAdmin__AlreadyPaused();\\nerror PausableAdmin__AlreadyUnpaused();\\nerror PausableAdmin__OnlyRenounceForSelf(address sender);\\nerror PausableAdmin__OnlyPauseAdmin(address sender);\\nerror PausableAdmin__AddressIsNotPauseAdmin(address sender);\\nerror PausableAdmin__AddressIsAlreadyPauseAdmin(address sender);\\n\",\"keccak256\":\"0x4e348df19bdb35a87004bfcd93da54d1519942eedaecfaf0a19a279696f44c56\",\"license\":\"MIT\"},\"contracts/utils/PausableAdminUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPausableAdminUpgradeable.sol\\\";\\nimport \\\"./PausableAdminErrors.sol\\\";\\nimport \\\"./PendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract PausableAdminUpgradeable is\\n    PendingOwnableUpgradeable,\\n    PausableUpgradeable,\\n    IPausableAdminUpgradeable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _pauseAdmins;\\n\\n    modifier onlyPauseAdmin() {\\n        if (!_pauseAdmins.contains(msg.sender))\\n            revert PausableAdmin__OnlyPauseAdmin(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract adding `msg.sender` as a pause admin\\n     */\\n    function __PausableAdmin_init() internal onlyInitializing {\\n        __PendingOwnable_init();\\n        __Pausable_init();\\n        __PausableAdmin_init_unchained();\\n    }\\n\\n    function __PausableAdmin_init_unchained() internal onlyInitializing {\\n        _addPauseAdmin(msg.sender);\\n    }\\n\\n    /**\\n     * @notice View function to return the pause admin at index `_index`\\n     * @param _index The index in the array\\n     * @return The address of the admin at index `_index`\\n     */\\n    function getPauseAdminAt(uint256 _index)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _pauseAdmins.at(_index);\\n    }\\n\\n    /**\\n     * @notice View function to return the number of pause admins\\n     * @return The number of pause admins\\n     */\\n    function getNumberOfPauseAdmin() external view override returns (uint256) {\\n        return _pauseAdmins.length();\\n    }\\n\\n    /**\\n     * @notice View function to check whether a user is an admin (true) or not (false)\\n     * @param _user The address of the user\\n     * @return Whether the user is an admin (true) or not (false)\\n     */\\n    function isPauseAdmin(address _user) external view override returns (bool) {\\n        return _pauseAdmins.contains(_user);\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPausableAdminUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * This will also remove the previousOwner of PauseAdmin and add the new owner.\\n     * Can only be called by the pending owner (checked within the `super.becomeOwner()`)\\n     */\\n    function becomeOwner() public virtual override {\\n        address _previousOwner = owner();\\n\\n        if (!_pauseAdmins.contains(msg.sender)) {\\n            _addPauseAdmin(msg.sender);\\n        }\\n        if (_pauseAdmins.contains(_previousOwner)) {\\n            _removePauseAdmin(_previousOwner);\\n        }\\n        super.becomeOwner();\\n    }\\n\\n    /**\\n     * @notice Function to add a pause admin\\n     * @dev Only callable by the owner\\n     * @param _newAdmin The address of the new admin to add\\n     */\\n    function addPauseAdmin(address _newAdmin) external override onlyOwner {\\n        _addPauseAdmin(_newAdmin);\\n    }\\n\\n    /**\\n     * @notice Function to remove a pause admin\\n     * @dev Only callable by the owner\\n     * @param _admin The address of the admin to remove\\n     */\\n    function removePauseAdmin(address _admin) external override onlyOwner {\\n        _removePauseAdmin(_admin);\\n    }\\n\\n    /**\\n     * @notice Function callable by any admin to renounce their role\\n     * @dev Only callable by the admin himself\\n     */\\n    function renouncePauseAdmin() external override {\\n        _removePauseAdmin(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Function to pause the contract\\n     * @dev Only callable by any pause admin\\n     */\\n    function pause() external onlyPauseAdmin {\\n        if (paused()) revert PausableAdmin__AlreadyPaused();\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Function to unpause the contract\\n     * @dev Only callable by the owner\\n     */\\n    function unpause() external onlyOwner {\\n        if (!paused()) revert PausableAdmin__AlreadyUnpaused();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Internal function to add a pause admin\\n     * @param _newAdmin The address of the new admin to add\\n     */\\n    function _addPauseAdmin(address _newAdmin) internal {\\n        if (!_pauseAdmins.add(_newAdmin))\\n            revert PausableAdmin__AddressIsAlreadyPauseAdmin(_newAdmin);\\n        emit PauseAdminAdded(_newAdmin);\\n    }\\n\\n    /**\\n     * @notice Internal function to remove a pause admin\\n     * @param _admin The address of the admin to remove\\n     */\\n    function _removePauseAdmin(address _admin) internal {\\n        if (!_pauseAdmins.remove(_admin))\\n            revert PausableAdmin__AddressIsNotPauseAdmin(_admin);\\n        emit PauseAdminRemoved(msg.sender, _admin);\\n    }\\n}\\n\",\"keccak256\":\"0xdb894d8a0664b5d828f055ef03ad204adf7a8a23c30a970294ac497a204748fc\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nerror PendingOwnable__NotOwner();\\nerror PendingOwnable__NotPendingOwner();\\nerror PendingOwnable__PendingOwnerAlreadySet();\\nerror PendingOwnable__NoPendingOwner();\\n\",\"keccak256\":\"0x0bb1a9a9b7d85877b3794f16c6d87807734c6bad37d0cc590f45ead831d84f60\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"./PendingOwnableErrors.sol\\\";\\n\\n/**\\n * @title Pending Ownable\\n * @author Trader Joe\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions. The ownership of this contract is transferred using the\\n * push and pull pattern, the current owner set a `pendingOwner` using\\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\\n * Ownable contract.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {setPendingOwner} and {becomeOwner}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner\\n */\\nabstract contract PendingOwnableUpgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert PendingOwnable__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the pending owner.\\n     */\\n    modifier onlyPendingOwner() {\\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\\n            revert PendingOwnable__NotPendingOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\\n     */\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __ERC165_init();\\n        __PendingOwnable_init_unchained();\\n    }\\n\\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @return The address of the current owner\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current pending owner\\n     * @return The address of the current pending owner\\n     */\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets the pending owner address. This address will be able to become\\n     * the owner of this contract by calling {becomeOwner}\\n     */\\n    function setPendingOwner(address pendingOwner_)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (_pendingOwner != address(0))\\n            revert PendingOwnable__PendingOwnerAlreadySet();\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    /**\\n     * @notice Revoke the pending owner address. This address will not be able to\\n     * call {becomeOwner} to become the owner anymore.\\n     * Can only be called by the owner\\n     */\\n    function revokePendingOwner() public virtual override onlyOwner {\\n        if (_pendingOwner == address(0))\\n            revert PendingOwnable__NoPendingOwner();\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * Can only be called by the pending owner\\n     */\\n    function becomeOwner() public virtual override onlyPendingOwner {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Push the new owner, it needs to be pulled to be effective.\\n     * Internal function without access restriction.\\n     * @param pendingOwner_ The address of the new pending owner\\n     */\\n    function _setPendingOwner(address pendingOwner_) internal virtual {\\n        _pendingOwner = pendingOwner_;\\n        emit PendingOwnerSet(pendingOwner_);\\n    }\\n}\\n\",\"keccak256\":\"0xf57f1c1ff1457960c7fb73664a264a842486360db03c575b84fc37a98b0caef7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102ae5760003560e01c806373c3259711610175578063c19e11ee116100dc578063dabbe09111610095578063ed66ec7d1161006f578063ed66ec7d146109fd578063eeb360b714610a1d578063f080e0bf14610a3d578063f9dca98914610a5d57600080fd5b8063dabbe091146109a9578063e256888f146109c9578063e30c3978146109df57600080fd5b8063c19e11ee1461090c578063c42069ec14610921578063c549876914610941578063c70f852d14610961578063d163a90614610974578063d28cf5261461099457600080fd5b8063955b25381161012e578063955b25381461084c578063a1fd34e01461086c578063a70dbaeb1461088c578063ad354df8146108ac578063b6028c65146108cc578063ba038505146108ec57600080fd5b806373c325971461078c5780638456cb59146107ac578063874b5d0d146107c157806387e4401f146107ee5780638da5cb5b1461080e57806390bdc0871461082c57600080fd5b8063516971a81161021957806367ab8a4e116101d257806367ab8a4e146105f05780636e41d47d146106055780636fc4cde114610625578063715018a61461065d57806373918a1c1461067257806373b295c21461075857600080fd5b8063516971a8146105455780635c975abb146105655780635ce052d71461057d5780635d28be2e1461059d57806364df049e146105b057806367a54889146105d057600080fd5b8063150b7a021161026b578063150b7a021461046b5780631cd36796146104b05780631df47f80146104d057806327370809146104f05780633f4ba83a146105105780634e07ad3c1461052557600080fd5b806301ffc9a7146102b35780630d299e6f146102e85780630f747d741461030a5780631082eea214610342578063127d71f71461042757806312e64f0314610447575b600080fd5b3480156102bf57600080fd5b506102d36102ce3660046142fd565b610a72565b60405190151581526020015b60405180910390f35b3480156102f457600080fd5b50610308610303366004614358565b610a9d565b005b34801561031657600080fd5b5060cd5461032a906001600160a01b031681565b6040516001600160a01b0390911681526020016102df565b34801561034e57600080fd5b506103c961035d3660046143df565b60d260209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b03808716976001600160601b03600160a01b9889900481169892881697929092049091169493929189565b604080516001600160a01b039a8b1681526001600160601b03998a1660208201529990971696890196909652959093166060870152608086019190915260a085015260c084015260e0830191909152610100820152610120016102df565b34801561043357600080fd5b5061030861044236600461440b565b610bf7565b34801561045357600080fd5b5061045d60d45481565b6040519081526020016102df565b34801561047757600080fd5b50610497610486366004614428565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102df565b3480156104bc57600080fd5b506103086104cb36600461440b565b610c2e565b3480156104dc57600080fd5b506103086104eb36600461440b565b610c62565b3480156104fc57600080fd5b5061030861050b3660046143df565b610c96565b34801561051c57600080fd5b50610308610ef5565b34801561053157600080fd5b5061032a6105403660046144c7565b610f4d565b34801561055157600080fd5b506103086105603660046143df565b610f5a565b34801561057157600080fd5b5060675460ff166102d3565b34801561058957600080fd5b5061030861059836600461440b565b6111b3565b6103086105ab3660046143df565b6111e7565b3480156105bc57600080fd5b5060d05461032a906001600160a01b031681565b3480156105dc57600080fd5b506103086105eb3660046144e0565b611325565b3480156105fc57600080fd5b5061030861142a565b34801561061157600080fd5b506103086106203660046143df565b611488565b34801561063157600080fd5b5060d554610645906001600160601b031681565b6040516001600160601b0390911681526020016102df565b34801561066957600080fd5b5061030861178b565b34801561067e57600080fd5b506106fa61068d3660046143df565b60d360209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696858716966001600160601b03600160a01b9788900481169791871696919091041693929189565b604080516001600160a01b039a8b168152988a1660208a01526001600160601b039788169089015297909416606087015293909116608085015260a084015260c083019190915260e0820152610100810191909152610120016102df565b34801561076457600080fd5b5061032a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561079857600080fd5b506103086107a7366004614557565b6117c0565b3480156107b857600080fd5b506103086118ec565b3480156107cd57600080fd5b5061045d6107dc36600461440b565b60d16020526000908152604090205481565b3480156107fa57600080fd5b5060cf5461032a906001600160a01b031681565b34801561081a57600080fd5b506033546001600160a01b031661032a565b34801561083857600080fd5b506103086108473660046144c7565b611942565b34801561085857600080fd5b506103086108673660046145cc565b611976565b34801561087857600080fd5b5061045d6108873660046143df565b611aac565b34801561089857600080fd5b5060ce5461032a906001600160a01b031681565b3480156108b857600080fd5b506103086108c73660046143df565b611c21565b3480156108d857600080fd5b506102d36108e736600461440b565b611d1c565b3480156108f857600080fd5b50610308610907366004614601565b611d29565b34801561091857600080fd5b5061045d611e52565b34801561092d57600080fd5b5061030861093c36600461440b565b611e63565b34801561094d57600080fd5b5061030861095c36600461440b565b611ec1565b61030861096f3660046145cc565b611ef5565b34801561098057600080fd5b5061030861098f366004614664565b6120ed565b3480156109a057600080fd5b50610308612121565b3480156109b557600080fd5b506103086109c436600461440b565b61212a565b3480156109d557600080fd5b5061045d61271081565b3480156109eb57600080fd5b506034546001600160a01b031661032a565b348015610a0957600080fd5b50610308610a1836600461467f565b61215e565b348015610a2957600080fd5b50610308610a383660046143df565b61229a565b348015610a4957600080fd5b50610308610a583660046143df565b6124b0565b348015610a6957600080fd5b506103086125bb565b60006001600160e01b03198216630a85bd0160e11b1480610a975750610a978261260a565b92915050565b60675460ff1615610ac95760405162461bcd60e51b8152600401610ac0906146f4565b60405180910390fd5b60cd546040516343b938c560e01b81526001600160a01b03808a166004830152899216906343b938c590602401602060405180830381865afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b37919061471e565b610b5357604051625bbd3f60e51b815260040160405180910390fd5b866001600160601b031642811015610b7e5760405163d13ab50760e01b815260040160405180910390fd5b82801580610b8d575061271081115b15610bab5760405163d317635f60e01b815260040160405180910390fd5b6002609b541415610bce5760405162461bcd60e51b8152600401610ac090614740565b6002609b55610be48c8c8c8c8c8c8c8c8c61262f565b6001609b55505050505050505050505050565b6033546001600160a01b03163314610c2257604051639f216c1360e01b815260040160405180910390fd5b610c2b81612a24565b50565b6033546001600160a01b03163314610c5957604051639f216c1360e01b815260040160405180910390fd5b610c2b81612a9d565b6033546001600160a01b03163314610c8d57604051639f216c1360e01b815260040160405180910390fd5b610c2b81612b10565b60675460ff1615610cb95760405162461bcd60e51b8152600401610ac0906146f4565b6002609b541415610cdc5760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808416600090815260d360209081526040808320868452825291829020825161012081018452815485168082526001830154808716948301949094526001600160601b03600160a01b94859004811695830195909552958201549485166060820152919093049091166080820152600382015460a0820152600482015460c0820152600582015460e082015260069091015461010082015283913314610da45760405163642a6a5360e01b815260040160405180910390fd5b60608101516001600160a01b031615610dd05760405163088207f160e11b815260040160405180910390fd5b6001600160a01b03808316600090815260d36020908152604080832087845290915280822080546001600160a01b031916815560018101839055600281018390556003810183905560048082018490556005820184905560069091019290925583519051632142170760e11b8152928716926342842e0e92610e589230929091899101614777565b600060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b5050825160a08401516040518794506001600160a01b038716935033927f9b2b3a11685c55784f4d3819a5bbaa39baa4be3732cd6d9514970ea6e3ac065c92610ee2926001600160a01b03929092168252602082015260400190565b60405180910390a450506001609b555050565b6033546001600160a01b03163314610f2057604051639f216c1360e01b815260040160405180910390fd5b60675460ff16610f43576040516324f6d9a360e11b815260040160405180910390fd5b610f4b612b89565b565b6000610a97609983612c1c565b6002609b541415610f7d5760405162461bcd60e51b8152600401610ac090614740565b6002609b556033546001600160a01b03163314610fad57604051639f216c1360e01b815260040160405180910390fd5b6001600160a01b03808316600090815260d360209081526040808320858452825291829020825161012081018452815485168082526001830154808716948301949094526001600160601b03600160a01b9485900481169583019590955260028301549586166060830152929094049092166080840152600382015460a0840152600482015460c0840152600582015460e084015260069091015461010083015283919061106e57604051636cf011bd60e11b815260040160405180910390fd5b606081015160c08201516001600160a01b03808516600090815260d36020908152604080832089845290915280822080546001600160a01b031916815560018101839055600281018390556003810183905560048082018490556005820184905560069091019290925585519051632142170760e11b8152928916926342842e0e9261110092309290918b9101614777565b600060405180830381600087803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b505050506000811115611154576020830151611154906001600160a01b03168383612c2f565b825160a0840151604080516001600160a01b0393841681526020810192909252879287169133917f9b2b3a11685c55784f4d3819a5bbaa39baa4be3732cd6d9514970ea6e3ac065c910160405180910390a450506001609b5550505050565b6033546001600160a01b031633146111de57604051639f216c1360e01b815260040160405180910390fd5b610c2b81612c97565b60675460ff161561120a5760405162461bcd60e51b8152600401610ac0906146f4565b6002609b54141561122d5760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808416600090815260d260209081526040808320868452825291829020825161012081018452815480861682526001600160601b03600160a01b918290048116948301949094526001830154808716958301869052049092166060830152938401546080820152600384015460a0820152600484015460c0820152600584015460e0820152600690930154610100840152907f000000000000000000000000000000000000000000000000000000000000000016811461130f5760405163026bd50160e51b815260040160405180910390fd5b61131a848484612d10565b50506001609b555050565b600054610100900460ff166113405760005460ff1615611344565b303b155b6113a75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac0565b600054610100900460ff161580156113c9576000805461ffff19166101011790555b6113d1613050565b6113d961308f565b6113e2876130be565b6113eb86613123565b6113f485612c97565b6113fd84612a24565b611406836131a1565b61140f82612b10565b8015611421576000805461ff00191690555b50505050505050565b6033546001600160a01b0316331461145557604051639f216c1360e01b815260040160405180910390fd5b6034546001600160a01b031661147e5760405163ecfad6bf60e01b815260040160405180910390fd5b610f4b600061321a565b60675460ff16156114ab5760405162461bcd60e51b8152600401610ac0906146f4565b6002609b5414156114ce5760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808416600090815260d360209081526040808320868452825291829020825161012081018452815485168082526001830154808716948301949094526001600160601b03600160a01b94859004811695830195909552958201549485166060820152919093049091166080820152600382015460a0820152600482015460c0820152600582015460e0820152600690910154610100820152839161159457604051636cf011bd60e11b815260040160405180910390fd5b60c08101516115b657604051638041ccb360e01b815260040160405180910390fd5b80604001516001600160601b03164210156115e45760405163554eda4360e01b815260040160405180910390fd5b80516001600160a01b0316331480159061160a575080608001516001600160601b031642105b15611628576040516310b13ed760e11b815260040160405180910390fd5b6001600160a01b038216600090815260d3602090815260408083208684528252822080546001600160a01b0319168155600181018390556002810183905560038101839055600481018390556005810183905560060191909155810151815160c08301516101008401516116a493869388939192309290613264565b6060810151604051632142170760e11b81526001600160a01b038616916342842e0e916116d79130918890600401614777565b600060405180830381600087803b1580156116f157600080fd5b505af1158015611705573d6000803e3d6000fd5b5050505082826001600160a01b031682600001516001600160a01b03167f5a1800c8b3fb615959d2545c3516c92c95a323c12a305acfe2bd3e88ef8b7d1c846060015185602001518660a001518760c00151604051610ee294939291906001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6033546001600160a01b031633146117b657604051639f216c1360e01b815260040160405180910390fd5b610f4b6000613428565b60675460ff16156117e35760405162461bcd60e51b8152600401610ac0906146f4565b60cd546040516343b938c560e01b81526001600160a01b038089166004830152889216906343b938c590602401602060405180830381865afa15801561182d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611851919061471e565b61186d57604051625bbd3f60e51b815260040160405180910390fd5b8180158061187c575061271081115b1561189a5760405163d317635f60e01b815260040160405180910390fd5b6002609b5414156118bd5760405162461bcd60e51b8152600401610ac090614740565b6002609b556118db8a8a8a6118d142613485565b8b8b8b8b8b61262f565b6001609b5550505050505050505050565b6118f76099336134f1565b6119165760405163450b91b360e11b8152336004820152602401610ac0565b60675460ff161561193a5760405163fa18e8a360e01b815260040160405180910390fd5b610f4b613513565b6033546001600160a01b0316331461196d57604051639f216c1360e01b815260040160405180910390fd5b610c2b816130be565b60675460ff16156119995760405162461bcd60e51b8152600401610ac0906146f4565b6002609b5414156119bc5760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808516600090815260d36020908152604080832087845282529182902082516101208101845281548516815260018201548086169382018490526001600160601b03600160a01b91829004811695830195909552958201549485166060820152949093049091166080840152600382015460a0840152600482015460c0840152600582015460e084015260069091015461010083015280611a7f57604051636cf011bd60e11b815260040160405180910390fd5b611a946001600160a01b03821633308661356b565b611aa085858585613592565b50506001609b55505050565b6001600160a01b03808316600090815260d2602090815260408083208584528252808320815161012081018352815480871682526001600160601b03600160a01b918290048116958301869052600184015497881694830194909452909504909116606085015260028101546080850152600381015460a0850152600481015460c0850152600581015460e085015260060154610100840152909190421015611b59576000915050610a97565b80606001516001600160601b03164210611b785760c001519050610a97565b600081602001516001600160601b031642611b9391906147b1565b905060008260e0015182611ba791906147c8565b905060008360e0015184602001518560600151611bc491906147ea565b6001600160601b0316611bd791906147c8565b905060008460c001518560a00151611bef91906147b1565b905081611bfc8285614812565b611c0691906147c8565b8560a00151611c1591906147b1565b98975050505050505050565b60675460ff1615611c445760405162461bcd60e51b8152600401610ac0906146f4565b6002609b541415611c675760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808416600090815260d260209081526040808320868452825291829020825161012081018452815480861682526001600160601b03600160a01b9182900481169483019490945260018301549586169482019490945292909304166060820152918101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152611d12838383612d10565b50506001609b5550565b6000610a976099836134f1565b60675460ff1615611d4c5760405162461bcd60e51b8152600401610ac0906146f4565b60cd546040516343b938c560e01b81526001600160a01b038087166004830152869216906343b938c590602401602060405180830381865afa158015611d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dba919061471e565b611dd657604051625bbd3f60e51b815260040160405180910390fd5b81801580611de5575061271081115b15611e035760405163d317635f60e01b815260040160405180910390fd5b6002609b541415611e265760405162461bcd60e51b8152600401610ac090614740565b6002609b55611e42888888611e3a42613485565b8989896138f3565b6001609b555b5050505050505050565b6000611e5e6099613c56565b905090565b6033546001600160a01b03163314611e8e57604051639f216c1360e01b815260040160405180910390fd5b6034546001600160a01b031615611eb85760405163716b1fbf60e01b815260040160405180910390fd5b610c2b8161321a565b6033546001600160a01b03163314611eec57604051639f216c1360e01b815260040160405180910390fd5b610c2b816131a1565b60675460ff1615611f185760405162461bcd60e51b8152600401610ac0906146f4565b6002609b541415611f3b5760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808516600090815260d36020908152604080832087845282529182902082516101208101845281548516815260018201548086169382018490526001600160601b03600160a01b91829004811695830195909552958201548086166060830152959095049092166080850152600382015460a0850152600482015460c0850152600582015460e0850152600690910154610100840152907f00000000000000000000000000000000000000000000000000000000000000001681146120225760405163026bd50160e51b815260040160405180910390fd5b341561209d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561208357600080fd5b505af1158015612097573d6000803e3d6000fd5b50505050505b82156120d8576120d86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661356b565b611aa085856120e78634614831565b85613592565b6033546001600160a01b0316331461211857604051639f216c1360e01b815260040160405180910390fd5b610c2b81613123565b610f4b33613c60565b6033546001600160a01b0316331461215557604051639f216c1360e01b815260040160405180910390fd5b610c2b81613c60565b60675460ff16156121815760405162461bcd60e51b8152600401610ac0906146f4565b60cd546040516343b938c560e01b81526001600160a01b038088166004830152879216906343b938c590602401602060405180830381865afa1580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ef919061471e565b61220b57604051625bbd3f60e51b815260040160405180910390fd5b846001600160601b0316428110156122365760405163d13ab50760e01b815260040160405180910390fd5b82801580612245575061271081115b156122635760405163d317635f60e01b815260040160405180910390fd5b6002609b5414156122865760405162461bcd60e51b8152600401610ac090614740565b6002609b556118db8a8a8a8a8a8a8a6138f3565b6002609b5414156122bd5760405162461bcd60e51b8152600401610ac090614740565b6002609b556033546001600160a01b031633146122ed57604051639f216c1360e01b815260040160405180910390fd5b6001600160a01b03808316600090815260d26020908152604080832085845282529182902082516101208101845281548086168083526001600160601b03600160a01b92839004811695840195909552600184015496871695830195909552909404909116606084015260028101546080840152600381015460a0840152600481015460c0840152600581015460e0840152600601546101008301528391906123a957604051636cf011bd60e11b815260040160405180910390fd5b6001600160a01b03808316600090815260d26020908152604080832087845290915280822082815560018101839055600281018390556003810183905560048082018490556005820184905560069091019290925583519051632142170760e11b8152928716926342842e0e926124269230929091899101614777565b600060405180830381600087803b15801561244057600080fd5b505af1158015612454573d6000803e3d6000fd5b5050825160808401516040518794506001600160a01b038716935033927f2d0945d65614801fbf38298de475b2eda962f669c2e6cbbbc04a7faab17522dd92610ee2926001600160a01b03929092168252602082015260400190565b60675460ff16156124d35760405162461bcd60e51b8152600401610ac0906146f4565b6002609b5414156124f65760405162461bcd60e51b8152600401610ac090614740565b6002609b8190556001600160a01b03808416600090815260d26020908152604080832086845282529182902082516101208101845281548086168083526001600160601b03600160a01b928390048116958401959095526001840154968716958301959095529094049091166060840152928301546080830152600383015460a0830152600483015460c0830152600583015460e0830152600690920154610100820152839133146123a95760405163642a6a5360e01b815260040160405180910390fd5b60006125cf6033546001600160a01b031690565b90506125dc6099336134f1565b6125e9576125e933612a9d565b6125f46099826134f1565b156126025761260281613c60565b610c2b613cd1565b60006001600160e01b031982166316bfa14b60e11b1480610a975750610a9782613d10565b6001600160601b038516158061264d575083856001600160601b0316105b1561266b57604051634981972160e01b815260040160405180910390fd5b836126895760405163bb634ef160e01b815260040160405180910390fd5b6001600160a01b03808a16600090815260d2602090815260408083208c84529091529020548a9116156126cf5760405163eee0b01b60e01b815260040160405180910390fd5b82841115806126dc575082155b156126fa5760405163ef57fc2960e01b815260040160405180910390fd5b6000604051806101200160405280336001600160a01b03168152602001896001600160601b031681526020018a6001600160a01b03168152602001888a6127419190614849565b6001600160601b0316815260200160d16000336001600160a01b03166001600160a01b031681526020019081526020016000205481526020018681526020018581526020018781526020018481525090508060d26000846001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160601b0302191690836001600160601b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a8154816001600160601b0302191690836001600160601b031602179055506080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050600160d16000336001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128e99190614831565b9091555050604051632142170760e11b81526001600160a01b038c16906342842e0e9061291e90339030908f90600401614777565b600060405180830381600087803b15801561293857600080fd5b505af115801561294c573d6000803e3d6000fd5b5050505089826001600160a01b031682600001516001600160a01b03167f809f5467134c450196fed70af0db862a1c49d62a7cedd561d76c48a03e5ebc0a846040015185608001518660a001518760c00151886020015189606001518a60e001518b6101000151604051612a0f9897969594939291906001600160a01b039890981688526020880196909652604087019490945260608601929092526001600160601b0390811660808601521660a084015260c083015260e08201526101000190565b60405180910390a45050505050505050505050565b6001600160a01b038116612a4b57604051632bf5c20360e11b815260040160405180910390fd5b60ce80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7d4ddfec890ae302bc76c6c540dbeea692c14045ecfebcc29a666bf9dc279c8f90600090a35050565b612aa8609982613d45565b612ad057604051630abf5ec960e41b81526001600160a01b0382166004820152602401610ac0565b6040516001600160a01b03821681527feab9d6a70f5f6ff36fb4e7d7c5fd6fd92619a212353eaab70320dffa41e5792d906020015b60405180910390a150565b6001600160a01b038116612b3757604051632bf5c20360e11b815260040160405180910390fd5b60d080546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f77fe0152e8e354becca126c2d9ddc9e3372c8aa414ef8185aceb7934d6a716cc90600090a35050565b60675460ff16612bd25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ac0565b6067805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000612c288383613d5a565b9392505050565b6040516001600160a01b038316602482015260448101829052612c9290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d84565b505050565b6001600160a01b038116612cbe57604051632bf5c20360e11b815260040160405180910390fd5b60cd80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f41e87b8a10446f910ac9ba7a85dd3c9ad02a2705e02ebee6237611a62cde306e90600090a35050565b80516001600160a01b0316612d3857604051636cf011bd60e11b815260040160405180910390fd5b80516001600160a01b0316331415612d6357604051631709f0f960e31b815260040160405180910390fd5b80602001516001600160601b0316421015612d915760405163c2244f3f60e01b815260040160405180910390fd5b826000612d9e8285611aac565b6001600160a01b03838116600090815260d2602090815260408083208984529091528082208281556001810183905560028101839055600381018390556004810183905560058101839055600601919091558501519192507f0000000000000000000000000000000000000000000000000000000000000000811691161415612f695734811115612e6a57612e6a3330612e3834856147b1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061356b565b3415612ee5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612ecb57600080fd5b505af1158015612edf573d6000803e3d6000fd5b50505050505b34811015612f2c57612f2c33612efb83346147b1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612c2f565b612f6482857f000000000000000000000000000000000000000000000000000000000000000030876000015186896101000151613264565b612f85565b612f858285856040015133876000015186896101000151613264565b604051632142170760e11b81526001600160a01b038616906342842e0e90612fb590309033908990600401614777565b600060405180830381600087803b158015612fcf57600080fd5b505af1158015612fe3573d6000803e3d6000fd5b5050845160408087015160808089015183513381526001600160a01b039384166020820152938401526060830187905289955081881694509216917fcc3d803077d108e00cb796b4d6569ca5f5cb0bfc25cb5fb755efd1ffc80d9eff910160405180910390a45050505050565b600054610100900460ff166130775760405162461bcd60e51b8152600401610ac090614874565b61307f613e56565b613087613e8d565b610f4b613ebc565b600054610100900460ff166130b65760405162461bcd60e51b8152600401610ac090614874565b610f4b613eec565b8015806130cc575061271081115b156130ea5760405163983613f960e01b815260040160405180910390fd5b60d4805490829055604051829082907fa3f285ff50dde91866d9d4e5d73ebdf424ebb3a7fcedc49b4c5fc0b66e15642c90600090a35050565b6001600160601b03811661314a57604051630b68507960e31b815260040160405180910390fd5b60d580546001600160601b038381166bffffffffffffffffffffffff19831681179093556040519116919082907fc0da53cc906ae35e2c2afe765eb38598227dda23551dfa44bf89e14592ecd95490600090a35050565b6001600160a01b0381166131c857604051632bf5c20360e11b815260040160405180910390fd5b60cf80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f3572f53d6b1fa254aff5642a655e44ac0e39825c4cedc188cacdb3330857acda90600090a35050565b603480546001600160a01b0319166001600160a01b0383169081179091556040517f68f49b346b94582a8b5f9d10e3fe3365318fe8f191ff8dce7c59c6cad06b02f590600090a250565b8160006132718983613f1a565b60d0549091506001600160a01b0316801580159061328e57508115155b156132b5576132a86001600160a01b03891688838561356b565b6132b282846147b1565b92505b505060cf54604051637a7b1afd60e11b81526001600160a01b038a81166004830152602482018a905260448201869052600092839291169063f4f635fa906064016040805180830381865afa158015613312573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333691906148bf565b90925090506001600160a01b0382161580159061335257508015155b156133db5761336c6001600160a01b03891688848461356b565b61337681846147b1565b9250816001600160a01b0316898b6001600160a01b03167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d8b856040516133d29291906001600160a01b03929092168252602082015260400190565b60405180910390a45b506133e890508383614812565b6133f461271083614812565b1015613413576040516321f5097160e11b815260040160405180910390fd5b611e486001600160a01b03871686868461356b565b603380546001600160a01b038381166001600160a01b03198084168217909455603480549094169093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160601b038211156134ed5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b6064820152608401610ac0565b5090565b6001600160a01b03811660009081526001830160205260408120541515612c28565b60675460ff16156135365760405162461bcd60e51b8152600401610ac0906146f4565b6067805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612bff3390565b61358c846323b872dd60e01b858585604051602401612c5b93929190614777565b50505050565b80516001600160a01b03166135ba57604051636cf011bd60e11b815260040160405180910390fd5b816135d857604051638409122f60e01b815260040160405180910390fd5b80516001600160a01b031633141561360357604051636db0fafd60e11b815260040160405180910390fd5b80604001516001600160601b031642101561363157604051632a8bccbb60e21b815260040160405180910390fd5b80608001516001600160601b0316421061365e57604051637d9c9b7b60e11b815260040160405180910390fd5b60d55460808201516000916001600160601b0390811691613681914291166147b1565b116136b7575060d5546080820180516001600160601b03909216918291906136aa908390614849565b6001600160601b03169052505b60c08201516136f7578160e001518310156136e557604051638409122f60e01b815260040160405180910390fd5b33606083015260c082018390526137e7565b81606001516001600160a01b0316336001600160a01b0316141561376c5760d4548260c001516137279190614812565b61373361271085614812565b101561375257604051638409122f60e01b815260040160405180910390fd5b828260c0018181516137649190614831565b9052506137e7565b60d45461377b90612710614831565b8260c0015161378a9190614812565b61379661271085614812565b10156137b557604051638409122f60e01b815260040160405180910390fd5b60608201805160c0840180513390935285905260208401519091906137e4906001600160a01b03168383612c2f565b50505b6001600160a01b03858116600081815260d360209081526040808320898452825291829020865181546001600160a01b03191690861690811782558783015188850151908716600160a01b6001600160601b039283168102821760018601556060808c01516080808e015191909b169085169092028217600287015560a0808d01516003880181905560c08e01516004890181905560e08f015160058a01556101008f0151600690990198909855895193845297830193909352968101959095529484019290925290861694820194909452889388939290917f84ec3a468ca2097ed308ae9b8a51622f04c0f01ed00388da9167849bd918c201910160405180910390a4505050505050565b6001600160601b03831661391a57604051634981972160e01b815260040160405180910390fd5b6001600160a01b03808816600090815260d3602090815260408083208a8452909152902054889116156139605760405163eee0b01b60e01b815260040160405180910390fd5b33600081815260d160209081526040808320548151610120810183529485526001600160a01b038b16928501929092526001600160601b038916908401526060830182905291608081016139b4888a614849565b6001600160601b03168152602001838152602001600081526020018681526020018581525090508060d36000856001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a8154816001600160601b0302191690836001600160601b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160146101000a8154816001600160601b0302191690836001600160601b0316021790555060a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050816001613b2c9190614831565b33600081815260d1602052604090819020929092559051632142170760e11b81526001600160a01b038c16916342842e0e91613b6f919030908e90600401614777565b600060405180830381600087803b158015613b8957600080fd5b505af1158015613b9d573d6000803e3d6000fd5b5050505088836001600160a01b031682600001516001600160a01b03167f547a357be03f8b8c991541b3cc2d0e1647a44b7f10e8cb85c576366a00f5118184602001518560a001518660e001518d8860800151896101000151604051613c42969594939291906001600160a01b03969096168652602086019490945260408501929092526001600160601b03908116606085015216608083015260a082015260c00190565b60405180910390a450505050505050505050565b6000610a97825490565b613c6b609982613fac565b613c93576040516357b2ba3b60e01b81526001600160a01b0382166004820152602401610ac0565b604080513381526001600160a01b03831660208201527f6882c6d99f00a0bb4f85b5c1829bca3a8ef01af6a4268c223dc71626f44407799101612b05565b6034546001600160a01b031633141580613ce9575033155b15613d0757604051633982680960e11b815260040160405180910390fd5b610f4b33613428565b60006001600160e01b031982166322d7505760e11b1480610a9757506301ffc9a760e01b6001600160e01b0319831614610a97565b6000612c28836001600160a01b038416613fc1565b6000826000018281548110613d7157613d716148ed565b9060005260206000200154905092915050565b6000613dd9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140109092919063ffffffff16565b805190915015612c925780806020019051810190613df7919061471e565b612c925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ac0565b600054610100900460ff16613e7d5760405162461bcd60e51b8152600401610ac090614874565b613e8561401f565b610f4b614046565b600054610100900460ff16613eb45760405162461bcd60e51b8152600401610ac090614874565b610f4b61406d565b600054610100900460ff16613ee35760405162461bcd60e51b8152600401610ac090614874565b610f4b33612a9d565b600054610100900460ff16613f135760405162461bcd60e51b8152600401610ac090614874565b6001609b55565b60ce546040516238062960e91b81526001600160a01b038481166004830152600092839291169063700c520090602401602060405180830381865afa158015613f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8b9190614903565b9050612710613f9a8483614812565b613fa491906147c8565b949350505050565b6000612c28836001600160a01b0384166140a0565b600081815260018301602052604081205461400857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a97565b506000610a97565b6060613fa48484600085614193565b600054610100900460ff16610f4b5760405162461bcd60e51b8152600401610ac090614874565b600054610100900460ff16613d075760405162461bcd60e51b8152600401610ac090614874565b600054610100900460ff166140945760405162461bcd60e51b8152600401610ac090614874565b6067805460ff19169055565b600081815260018301602052604081205480156141895760006140c46001836147b1565b85549091506000906140d8906001906147b1565b905081811461413d5760008660000182815481106140f8576140f86148ed565b906000526020600020015490508087600001848154811061411b5761411b6148ed565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061414e5761414e61491c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a97565b6000915050610a97565b6060824710156141f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ac0565b6001600160a01b0385163b61424b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ac0565b600080866001600160a01b03168587604051614267919061495e565b60006040518083038185875af1925050503d80600081146142a4576040519150601f19603f3d011682016040523d82523d6000602084013e6142a9565b606091505b50915091506142b98282866142c4565b979650505050505050565b606083156142d3575081612c28565b8251156142e35782518084602001fd5b8160405162461bcd60e51b8152600401610ac0919061497a565b60006020828403121561430f57600080fd5b81356001600160e01b031981168114612c2857600080fd5b6001600160a01b0381168114610c2b57600080fd5b80356001600160601b038116811461435357600080fd5b919050565b60008060008060008060008060006101208a8c03121561437757600080fd5b893561438281614327565b985060208a0135975060408a013561439981614327565b96506143a760608b0161433c565b95506143b560808b0161433c565b989b979a50959894979660a0860135965060c08601359560e0810135955061010001359350915050565b600080604083850312156143f257600080fd5b82356143fd81614327565b946020939093013593505050565b60006020828403121561441d57600080fd5b8135612c2881614327565b60008060008060006080868803121561444057600080fd5b853561444b81614327565b9450602086013561445b81614327565b935060408601359250606086013567ffffffffffffffff8082111561447f57600080fd5b818801915088601f83011261449357600080fd5b8135818111156144a257600080fd5b8960208285010111156144b457600080fd5b9699959850939650602001949392505050565b6000602082840312156144d957600080fd5b5035919050565b60008060008060008060c087890312156144f957600080fd5b863595506145096020880161433c565b9450604087013561451981614327565b9350606087013561452981614327565b9250608087013561453981614327565b915060a087013561454981614327565b809150509295509295509295565b600080600080600080600080610100898b03121561457457600080fd5b883561457f81614327565b975060208901359650604089013561459681614327565b95506145a460608a0161433c565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806000606084860312156145e157600080fd5b83356145ec81614327565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561461a57600080fd5b863561462581614327565b955060208701359450604087013561463c81614327565b935061464a6060880161433c565b92506080870135915060a087013590509295509295509295565b60006020828403121561467657600080fd5b612c288261433c565b600080600080600080600060e0888a03121561469a57600080fd5b87356146a581614327565b96506020880135955060408801356146bc81614327565b94506146ca6060890161433c565b93506146d86080890161433c565b925060a0880135915060c0880135905092959891949750929550565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60006020828403121561473057600080fd5b81518015158114612c2857600080fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156147c3576147c361479b565b500390565b6000826147e557634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160601b038381169083168181101561480a5761480a61479b565b039392505050565b600081600019048311821515161561482c5761482c61479b565b500290565b600082198211156148445761484461479b565b500190565b60006001600160601b0380831681851680830382111561486b5761486b61479b565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600080604083850312156148d257600080fd5b82516148dd81614327565b6020939093015192949293505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561491557600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b60005b8381101561494d578181015183820152602001614935565b8381111561358c5750506000910152565b60008251614970818460208701614932565b9190910192915050565b6020815260008251806020840152614999816040850160208701614932565b601f01601f1916919091016040019291505056fea26469706673582212206f9ae0d3e70f4a30cd48ac3114aeefdcc4133d4f64c19544b48c46a8cb44edcf64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPauseAdmin(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_newAdmin": "The address of the new admin to add"
        }
      },
      "cancelDutchAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "cancelEnglishAuction(address,uint256)": {
        "details": "Note: - Can only be called by auction creator - Can only be cancelled if no bids have been placed",
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "constructor": {
        "params": {
          "_wavax": "address of WAVAX"
        }
      },
      "emergencyCancelDutchAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "emergencyCancelEnglishAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "getDutchAuctionSalePrice(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        },
        "returns": {
          "_0": "current Dutch Auction sale price for specified ERC721 token"
        }
      },
      "getNumberOfPauseAdmin()": {
        "returns": {
          "_0": "The number of pause admins"
        }
      },
      "getPauseAdminAt(uint256)": {
        "params": {
          "_index": "The index in the array"
        },
        "returns": {
          "_0": "The address of the admin at index `_index`"
        }
      },
      "initialize(uint256,uint96,address,address,address,address)": {
        "params": {
          "_currencyManager": "currency manager address",
          "_englishAuctionMinBidIncrementPct": "minimum bid increment percentage for English Auctions",
          "_englishAuctionRefreshTime": "refresh time for English auctions",
          "_protocolFeeManager": "protocol fee manager address",
          "_protocolFeeRecipient": "protocol fee recipient",
          "_royaltyFeeManager": "royalty fee manager address"
        }
      },
      "isPauseAdmin(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "Whether the user is an admin (true) or not (false)"
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the current owner"
        }
      },
      "pause()": {
        "details": "Only callable by any pause admin"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "returns": {
          "_0": "The address of the current pending owner"
        }
      },
      "placeEnglishAuctionBid(address,uint256,uint256)": {
        "params": {
          "_amount": "amount of currency to bid",
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token",
          "_wavaxAmount": "amount of WAVAX to bid"
        }
      },
      "removePauseAdmin(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_admin": "The address of the admin to remove"
        }
      },
      "renouncePauseAdmin()": {
        "details": "Only callable by the admin himself"
      },
      "scheduleDutchAuction(address,uint256,address,uint96,uint96,uint256,uint256,uint256,uint256)": {
        "details": "Note: - Requires the auction house to hold the ERC721 token in escrow - Drops in price every `dutchAuctionDropInterval` seconds in equal   amounts",
        "params": {
          "_collection": "address of ERC721 token",
          "_currency": "address of currency to sell ERC721 token for",
          "_dropInterval": "number of seconds between each drop in price",
          "_duration": "number of seconds for Dutch Auction to run",
          "_endPrice": "ending sell price",
          "_minPercentageToAsk": "minimum percentage of the gross amount that goes to ask",
          "_startPrice": "starting sell price",
          "_startTime": "time to start the auction",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "scheduleEnglishAuction(address,uint256,address,uint96,uint96,uint256,uint256)": {
        "details": "Note this requires the auction house to hold the ERC721 token in escrow",
        "params": {
          "_collection": "address of ERC721 token",
          "_currency": "address of currency to sell ERC721 token for",
          "_duration": "number of seconds for English Auction to run",
          "_minPercentageToAsk": "minimum percentage of the gross amount that goes to ask",
          "_startPrice": "minimum starting bid price",
          "_startTime": "time to start the auction",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "settleDutchAuction(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "settleDutchAuctionWithAVAXAndWAVAX(address,uint256)": {
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "settleEnglishAuction(address,uint256)": {
        "details": "Note: - Can be called by creator at any time (including before the auction's end time to accept the   current latest bid) - Can be called by anyone after the auction ends - Transfers funds and fees appropriately to seller, royalty receiver, and protocol fee recipient - Transfers ERC721 token to last highest bidder",
        "params": {
          "_collection": "address of ERC721 token",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)": {
        "details": "Note: - Requires the auction house to hold the ERC721 token in escrow - Drops in price every `dutchAuctionDropInterval` seconds in equal   amounts",
        "params": {
          "_collection": "address of ERC721 token",
          "_currency": "address of currency to sell ERC721 token for",
          "_dropInterval": "number of seconds between each drop in price",
          "_duration": "number of seconds for Dutch Auction to run",
          "_endPrice": "ending sell price",
          "_minPercentageToAsk": "minimum percentage of the gross amount that goes to ask",
          "_startPrice": "starting sell price",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "startEnglishAuction(address,uint256,address,uint96,uint256,uint256)": {
        "details": "Note this requires the auction house to hold the ERC721 token in escrow",
        "params": {
          "_collection": "address of ERC721 token",
          "_currency": "address of currency to sell ERC721 token for",
          "_duration": "number of seconds for English Auction to run",
          "_minPercentageToAsk": "minimum percentage of the gross amount that goes to ask",
          "_startPrice": "minimum starting bid price",
          "_tokenId": "token id of ERC721 token"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "unpause()": {
        "details": "Only callable by the owner"
      },
      "updateCurrencyManager(address)": {
        "params": {
          "_currencyManager": "new currency manager address"
        }
      },
      "updateEnglishAuctionMinBidIncrementPct(uint256)": {
        "params": {
          "_englishAuctionMinBidIncrementPct": "new minimum bid increment percetange for English auctions"
        }
      },
      "updateEnglishAuctionRefreshTime(uint96)": {
        "params": {
          "_englishAuctionRefreshTime": "new refresh time for English auctions"
        }
      },
      "updateProtocolFeeManager(address)": {
        "params": {
          "_protocolFeeManager": "new protocol fee manager address"
        }
      },
      "updateProtocolFeeRecipient(address)": {
        "params": {
          "_protocolFeeRecipient": "new recipient for protocol fees"
        }
      },
      "updateRoyaltyFeeManager(address)": {
        "params": {
          "_royaltyFeeManager": "new fee manager address"
        }
      }
    },
    "stateVariables": {
      "dutchAuctions": {
        "details": "(collection address => token id => dutch auction)"
      },
      "englishAuctions": {
        "details": "(collection address => token id => english auction)"
      },
      "userLatestAuctionNonce": {
        "details": "(user address => latest nonce)"
      }
    },
    "title": "JoepegAuctionHouse",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPauseAdmin(address)": {
        "notice": "Function to add a pause admin"
      },
      "becomeOwner()": {
        "notice": "Transfers the ownership to the new owner (`pendingOwner`). This will also remove the previousOwner of PauseAdmin and add the new owner. Can only be called by the pending owner (checked within the `super.becomeOwner()`)"
      },
      "cancelDutchAuction(address,uint256)": {
        "notice": "Cancels a running Dutch Auction"
      },
      "cancelEnglishAuction(address,uint256)": {
        "notice": "Cancels an English Auction"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "dutchAuctions(address,uint256)": {
        "notice": "Stores Dutch Auction data for NFTs"
      },
      "emergencyCancelDutchAuction(address,uint256)": {
        "notice": "Only owner function to cancel a Dutch Auction in case of emergencies"
      },
      "emergencyCancelEnglishAuction(address,uint256)": {
        "notice": "Only owner function to cancel an English Auction in case of emergencies"
      },
      "englishAuctionMinBidIncrementPct()": {
        "notice": "Required minimum percent increase from last bid in order to place a new bid on an English Auction"
      },
      "englishAuctionRefreshTime()": {
        "notice": "Represents both: - Number of seconds before an English Auction ends where any new   bid will extend the auction's end time - Number of seconds to extend an English Auction's end time by"
      },
      "englishAuctions(address,uint256)": {
        "notice": "Stores English Auction data for NFTs"
      },
      "getDutchAuctionSalePrice(address,uint256)": {
        "notice": "Calculates current Dutch Auction sale price for an ERC721 token. Returns 0 if the auction hasn't started yet."
      },
      "getNumberOfPauseAdmin()": {
        "notice": "View function to return the number of pause admins"
      },
      "getPauseAdminAt(uint256)": {
        "notice": "View function to return the pause admin at index `_index`"
      },
      "initialize(uint256,uint96,address,address,address,address)": {
        "notice": "Initializer"
      },
      "isPauseAdmin(address)": {
        "notice": "View function to check whether a user is an admin (true) or not (false)"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Required implementation for IERC721Receiver"
      },
      "owner()": {
        "notice": "Returns the address of the current owner"
      },
      "pause()": {
        "notice": "Function to pause the contract"
      },
      "pendingOwner()": {
        "notice": "Returns the address of the current pending owner"
      },
      "placeEnglishAuctionBid(address,uint256,uint256)": {
        "notice": "Place bid on a running English Auction"
      },
      "placeEnglishAuctionBidWithAVAXAndWAVAX(address,uint256,uint256)": {
        "notice": "Place bid on a running English Auction using AVAX and/or WAVAX"
      },
      "removePauseAdmin(address)": {
        "notice": "Function to remove a pause admin"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renouncePauseAdmin()": {
        "notice": "Function callable by any admin to renounce their role"
      },
      "revokePendingOwner()": {
        "notice": "Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner"
      },
      "scheduleDutchAuction(address,uint256,address,uint96,uint96,uint256,uint256,uint256,uint256)": {
        "notice": "Schedules a Dutch Auction for an ERC721 token"
      },
      "scheduleEnglishAuction(address,uint256,address,uint96,uint96,uint256,uint256)": {
        "notice": "Schedules an English Auction for an ERC721 token"
      },
      "setPendingOwner(address)": {
        "notice": "Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}"
      },
      "settleDutchAuction(address,uint256)": {
        "notice": "Settles a Dutch Auction"
      },
      "settleDutchAuctionWithAVAXAndWAVAX(address,uint256)": {
        "notice": "Settles a Dutch Auction with AVAX and/or WAVAX"
      },
      "settleEnglishAuction(address,uint256)": {
        "notice": "Settles an English Auction"
      },
      "startDutchAuction(address,uint256,address,uint96,uint256,uint256,uint256,uint256)": {
        "notice": "Starts a Dutch Auction for an ERC721 token"
      },
      "startEnglishAuction(address,uint256,address,uint96,uint256,uint256)": {
        "notice": "Starts an English Auction for an ERC721 token"
      },
      "unpause()": {
        "notice": "Function to unpause the contract"
      },
      "updateCurrencyManager(address)": {
        "notice": "Update currency manager"
      },
      "updateEnglishAuctionMinBidIncrementPct(uint256)": {
        "notice": "Update `englishAuctionMinBidIncrementPct`"
      },
      "updateEnglishAuctionRefreshTime(uint96)": {
        "notice": "Update `englishAuctionRefreshTime`"
      },
      "updateProtocolFeeManager(address)": {
        "notice": "Update protocol fee manager"
      },
      "updateProtocolFeeRecipient(address)": {
        "notice": "Update protocol fee recipient"
      },
      "updateRoyaltyFeeManager(address)": {
        "notice": "Update royalty fee manager"
      },
      "userLatestAuctionNonce(address)": {
        "notice": "Stores latest auction nonce per user"
      }
    },
    "notice": "An auction house that supports running English and Dutch auctions on ERC721 tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 695,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13107,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 13109,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 651,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "103",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12598,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_pauseAdmins",
        "offset": 0,
        "slot": "153",
        "type": "t_struct(AddressSet)4879_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "_status",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5719,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "currencyManager",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(ICurrencyManager)11214"
      },
      {
        "astId": 5722,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "protocolFeeManager",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IProtocolFeeManager)11553"
      },
      {
        "astId": 5725,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "royaltyFeeManager",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IRoyaltyFeeManager)11569"
      },
      {
        "astId": 5727,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "protocolFeeRecipient",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 5732,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "userLatestAuctionNonce",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5740,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "dutchAuctions",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DutchAuction)5692_storage))"
      },
      {
        "astId": 5748,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "englishAuctions",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(EnglishAuction)5711_storage))"
      },
      {
        "astId": 5751,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "englishAuctionMinBidIncrementPct",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 5754,
        "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
        "label": "englishAuctionRefreshTime",
        "offset": 0,
        "slot": "213",
        "type": "t_uint96"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICurrencyManager)11214": {
        "encoding": "inplace",
        "label": "contract ICurrencyManager",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocolFeeManager)11553": {
        "encoding": "inplace",
        "label": "contract IProtocolFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyFeeManager)11569": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DutchAuction)5692_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct JoepegAuctionHouse.DutchAuction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DutchAuction)5692_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(EnglishAuction)5711_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct JoepegAuctionHouse.EnglishAuction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(EnglishAuction)5711_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DutchAuction)5692_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JoepegAuctionHouse.DutchAuction)",
        "numberOfBytes": "32",
        "value": "t_struct(DutchAuction)5692_storage"
      },
      "t_mapping(t_uint256,t_struct(EnglishAuction)5711_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JoepegAuctionHouse.EnglishAuction)",
        "numberOfBytes": "32",
        "value": "t_struct(EnglishAuction)5711_storage"
      },
      "t_struct(AddressSet)4879_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4878,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4578_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DutchAuction)5692_storage": {
        "encoding": "inplace",
        "label": "struct JoepegAuctionHouse.DutchAuction",
        "members": [
          {
            "astId": 5675,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5677,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 5679,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5681,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "endTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 5683,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5685,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5687,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "endPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5689,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "dropInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5691,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "minPercentageToAsk",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(EnglishAuction)5711_storage": {
        "encoding": "inplace",
        "label": "struct JoepegAuctionHouse.EnglishAuction",
        "members": [
          {
            "astId": 5694,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5696,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5698,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 5700,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "lastBidder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5702,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "endTime",
            "offset": 20,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 5704,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "nonce",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5706,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "lastBidPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5708,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "startPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5710,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "minPercentageToAsk",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)4578_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4573,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4577,
            "contract": "contracts/JoepegAuctionHouse.sol:JoepegAuctionHouse",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}