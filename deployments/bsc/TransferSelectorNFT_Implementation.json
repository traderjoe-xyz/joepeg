{
  "address": "0x326193b84FAaF337d1a0b33807cc598C23EA63f2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferManager",
          "type": "address"
        }
      ],
      "name": "CollectionTransferManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "CollectionTransferManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "transferManager",
          "type": "address"
        }
      ],
      "name": "addCollectionTransferManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "checkTransferManagerForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "transferManager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferManagerERC721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_transferManagerERC1155",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "removeCollectionTransferManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferManagerERC1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferManagerERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transferManagerSelectorForCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a75ab38e59fd653837129369286786d914dbbebede1361b9c84530ad1094090",
  "receipt": {
    "to": null,
    "from": "0x597E2587eCA945fB001BAdF1adF878CcB8e368b6",
    "contractAddress": "0x326193b84FAaF337d1a0b33807cc598C23EA63f2",
    "transactionIndex": 35,
    "gasUsed": "586218",
    "logsBloom": "0x
    "blockHash": "0xf0fe883cd8a6da155523962617038774c26515828513be0a58e1e0851fc44b78",
    "transactionHash": "0x0a75ab38e59fd653837129369286786d914dbbebede1361b9c84530ad1094090",
    "logs": [],
    "blockNumber": 24843945,
    "cumulativeGasUsed": "3854488",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e27c224c09507bb41163b96c985afc0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferManager\",\"type\":\"address\"}],\"name\":\"CollectionTransferManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionTransferManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferManager\",\"type\":\"address\"}],\"name\":\"addCollectionTransferManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"checkTransferManagerForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"transferManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferManagerERC721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferManagerERC1155\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"removeCollectionTransferManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferManagerERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferManagerERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferManagerSelectorForCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCollectionTransferManager(address,address)\":{\"details\":\"It is meant to be used for exceptions only (e.g., CryptoKitties)\",\"params\":{\"collection\":\"collection address to add specific transfer rule\"}},\"checkTransferManagerForToken(address)\":{\"details\":\"Support for ERC165 interface is checked AFTER custom implementation\",\"params\":{\"collection\":\"collection address\"},\"returns\":{\"transferManager\":\"address of transfer manager to use\"}},\"initialize(address,address)\":{\"params\":{\"_transferManagerERC1155\":\"address of the ERC1155 transfer manager\",\"_transferManagerERC721\":\"address of the ERC721 transfer manager\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCollectionTransferManager(address)\":{\"params\":{\"collection\":\"collection address to remove exception\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TransferSelectorNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollectionTransferManager(address,address)\":{\"notice\":\"Add a transfer manager for a collection\"},\"checkTransferManagerForToken(address)\":{\"notice\":\"Check the transfer manager for a token\"},\"initialize(address,address)\":{\"notice\":\"Initializer\"},\"removeCollectionTransferManager(address)\":{\"notice\":\"Remove a transfer manager for a collection\"}},\"notice\":\"It selects the NFT transfer manager based on a collection address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferSelectorNFT.sol\":\"TransferSelectorNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TransferSelectorNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {ITransferSelectorNFT} from \\\"./interfaces/ITransferSelectorNFT.sol\\\";\\n\\n/**\\n * @title TransferSelectorNFT\\n * @notice It selects the NFT transfer manager based on a collection address.\\n */\\ncontract TransferSelectorNFT is\\n    ITransferSelectorNFT,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    // Address of the transfer manager contract for ERC721 tokens\\n    address public transferManagerERC721;\\n\\n    // Address of the transfer manager contract for ERC1155 tokens\\n    address public transferManagerERC1155;\\n\\n    // Map collection address to transfer manager address\\n    mapping(address => address) public transferManagerSelectorForCollection;\\n\\n    event CollectionTransferManagerAdded(\\n        address indexed collection,\\n        address indexed transferManager\\n    );\\n    event CollectionTransferManagerRemoved(address indexed collection);\\n\\n    /**\\n     * @notice Initializer\\n     * @param _transferManagerERC721 address of the ERC721 transfer manager\\n     * @param _transferManagerERC1155 address of the ERC1155 transfer manager\\n     */\\n    function initialize(\\n        address _transferManagerERC721,\\n        address _transferManagerERC1155\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        transferManagerERC721 = _transferManagerERC721;\\n        transferManagerERC1155 = _transferManagerERC1155;\\n    }\\n\\n    /**\\n     * @notice Add a transfer manager for a collection\\n     * @param collection collection address to add specific transfer rule\\n     * @dev It is meant to be used for exceptions only (e.g., CryptoKitties)\\n     */\\n    function addCollectionTransferManager(\\n        address collection,\\n        address transferManager\\n    ) external onlyOwner {\\n        require(\\n            collection != address(0),\\n            \\\"TransferSelectorNFT: Collection cannot be null address\\\"\\n        );\\n        require(\\n            transferManager != address(0),\\n            \\\"TransferSelectorNFT: TransferManager cannot be null address\\\"\\n        );\\n\\n        transferManagerSelectorForCollection[collection] = transferManager;\\n\\n        emit CollectionTransferManagerAdded(collection, transferManager);\\n    }\\n\\n    /**\\n     * @notice Remove a transfer manager for a collection\\n     * @param collection collection address to remove exception\\n     */\\n    function removeCollectionTransferManager(address collection)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            transferManagerSelectorForCollection[collection] != address(0),\\n            \\\"TransferSelectorNFT: Collection has no transfer manager\\\"\\n        );\\n\\n        // Set it to the address(0)\\n        transferManagerSelectorForCollection[collection] = address(0);\\n\\n        emit CollectionTransferManagerRemoved(collection);\\n    }\\n\\n    /**\\n     * @notice Check the transfer manager for a token\\n     * @dev Support for ERC165 interface is checked AFTER custom implementation\\n     * @param collection collection address\\n     * @return transferManager address of transfer manager to use\\n     */\\n    function checkTransferManagerForToken(address collection)\\n        external\\n        view\\n        override\\n        returns (address transferManager)\\n    {\\n        // Assign transfer manager (if any)\\n        transferManager = transferManagerSelectorForCollection[collection];\\n\\n        if (transferManager == address(0)) {\\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n                transferManager = transferManagerERC721;\\n            } else if (\\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)\\n            ) {\\n                transferManager = transferManagerERC1155;\\n            } else {\\n                revert(\\n                    \\\"TransferSelectorNFT: No NFT transfer manager available\\\"\\n                );\\n            }\\n        }\\n\\n        return transferManager;\\n    }\\n}\\n\",\"keccak256\":\"0x2f720e44c097c839c8c066d4944c8d0d31fb64c719e5749ce62b1c746162018f\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferSelectorNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferSelectorNFT {\\n    function checkTransferManagerForToken(address collection)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xcd8aae57d85dccef39ab3e2480993e4ba4f752605bf512ae5855a5978ccbf816\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109a4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101745780638da5cb5b1461017c578063bc6bc0cd1461018d578063cc1594931461019b578063f048d320146101ae578063f2fde38b146101c157600080fd5b806325c6a895146100b9578063283b00e1146100ce57806333bf6156146100fe5780634216a75314610125578063485cc9551461014e5780637053fb7914610161575b600080fd5b6100cc6100c7366004610877565b6101d4565b005b6065546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c636cdb3d1360e11b81565b6040516001600160e01b031990911681526020016100f5565b6100e16101333660046108aa565b6067602052600090815260409020546001600160a01b031681565b6100cc61015c366004610877565b61034f565b6100cc61016f3660046108aa565b610442565b6100cc610548565b6033546001600160a01b03166100e1565b61010c6380ac58cd60e01b81565b6100e16101a93660046108aa565b61057e565b6066546100e1906001600160a01b031681565b6100cc6101cf3660046108aa565b610714565b6033546001600160a01b031633146102075760405162461bcd60e51b81526004016101fe906108cc565b60405180910390fd5b6001600160a01b03821661027c5760405162461bcd60e51b815260206004820152603660248201527f5472616e7366657253656c6563746f724e46543a20436f6c6c656374696f6e2060448201527563616e6e6f74206265206e756c6c206164647265737360501b60648201526084016101fe565b6001600160a01b0381166102f85760405162461bcd60e51b815260206004820152603b60248201527f5472616e7366657253656c6563746f724e46543a205472616e736665724d616e60448201527f616765722063616e6e6f74206265206e756c6c2061646472657373000000000060648201526084016101fe565b6001600160a01b0382811660008181526067602052604080822080546001600160a01b0319169486169485179055517fda166be6ba0ebb71be3f83e7d669765de552ea08978bfe3e3e42d54174111b629190a35050565b600054610100900460ff1661036a5760005460ff161561036e565b303b155b6103d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101fe565b600054610100900460ff161580156103f3576000805461ffff19166101011790555b6103fb6107af565b606580546001600160a01b038086166001600160a01b0319928316179092556066805492851692909116919091179055801561043d576000805461ff00191690555b505050565b6033546001600160a01b0316331461046c5760405162461bcd60e51b81526004016101fe906108cc565b6001600160a01b03818116600090815260676020526040902054166104f95760405162461bcd60e51b815260206004820152603760248201527f5472616e7366657253656c6563746f724e46543a20436f6c6c656374696f6e2060448201527f686173206e6f207472616e73666572206d616e6167657200000000000000000060648201526084016101fe565b6001600160a01b03811660008181526067602052604080822080546001600160a01b0319169055517f8c3bf4babc197f3db0e7ec65aaf23fc0efb0e689436aeea8514c3f01fd97841f9190a250565b6033546001600160a01b031633146105725760405162461bcd60e51b81526004016101fe906108cc565b61057c60006107de565b565b6001600160a01b03808216600090815260676020526040902054168061070f576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610901565b156106235750506065546001600160a01b031690565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190610901565b156106a85750506066546001600160a01b031690565b60405162461bcd60e51b815260206004820152603660248201527f5472616e7366657253656c6563746f724e46543a204e6f204e4654207472616e60448201527573666572206d616e6167657220617661696c61626c6560501b60648201526084016101fe565b919050565b6033546001600160a01b0316331461073e5760405162461bcd60e51b81526004016101fe906108cc565b6001600160a01b0381166107a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101fe565b6107ac816107de565b50565b600054610100900460ff166107d65760405162461bcd60e51b81526004016101fe90610923565b61057c610830565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166108575760405162461bcd60e51b81526004016101fe90610923565b61057c336107de565b80356001600160a01b038116811461070f57600080fd5b6000806040838503121561088a57600080fd5b61089383610860565b91506108a160208401610860565b90509250929050565b6000602082840312156108bc57600080fd5b6108c582610860565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561091357600080fd5b815180151581146108c557600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220fe6f1f3f639097dfa9437e94d25f77d0fbbd10da0e8d4bd7f4cbcf986395f80464736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101745780638da5cb5b1461017c578063bc6bc0cd1461018d578063cc1594931461019b578063f048d320146101ae578063f2fde38b146101c157600080fd5b806325c6a895146100b9578063283b00e1146100ce57806333bf6156146100fe5780634216a75314610125578063485cc9551461014e5780637053fb7914610161575b600080fd5b6100cc6100c7366004610877565b6101d4565b005b6065546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c636cdb3d1360e11b81565b6040516001600160e01b031990911681526020016100f5565b6100e16101333660046108aa565b6067602052600090815260409020546001600160a01b031681565b6100cc61015c366004610877565b61034f565b6100cc61016f3660046108aa565b610442565b6100cc610548565b6033546001600160a01b03166100e1565b61010c6380ac58cd60e01b81565b6100e16101a93660046108aa565b61057e565b6066546100e1906001600160a01b031681565b6100cc6101cf3660046108aa565b610714565b6033546001600160a01b031633146102075760405162461bcd60e51b81526004016101fe906108cc565b60405180910390fd5b6001600160a01b03821661027c5760405162461bcd60e51b815260206004820152603660248201527f5472616e7366657253656c6563746f724e46543a20436f6c6c656374696f6e2060448201527563616e6e6f74206265206e756c6c206164647265737360501b60648201526084016101fe565b6001600160a01b0381166102f85760405162461bcd60e51b815260206004820152603b60248201527f5472616e7366657253656c6563746f724e46543a205472616e736665724d616e60448201527f616765722063616e6e6f74206265206e756c6c2061646472657373000000000060648201526084016101fe565b6001600160a01b0382811660008181526067602052604080822080546001600160a01b0319169486169485179055517fda166be6ba0ebb71be3f83e7d669765de552ea08978bfe3e3e42d54174111b629190a35050565b600054610100900460ff1661036a5760005460ff161561036e565b303b155b6103d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101fe565b600054610100900460ff161580156103f3576000805461ffff19166101011790555b6103fb6107af565b606580546001600160a01b038086166001600160a01b0319928316179092556066805492851692909116919091179055801561043d576000805461ff00191690555b505050565b6033546001600160a01b0316331461046c5760405162461bcd60e51b81526004016101fe906108cc565b6001600160a01b03818116600090815260676020526040902054166104f95760405162461bcd60e51b815260206004820152603760248201527f5472616e7366657253656c6563746f724e46543a20436f6c6c656374696f6e2060448201527f686173206e6f207472616e73666572206d616e6167657200000000000000000060648201526084016101fe565b6001600160a01b03811660008181526067602052604080822080546001600160a01b0319169055517f8c3bf4babc197f3db0e7ec65aaf23fc0efb0e689436aeea8514c3f01fd97841f9190a250565b6033546001600160a01b031633146105725760405162461bcd60e51b81526004016101fe906108cc565b61057c60006107de565b565b6001600160a01b03808216600090815260676020526040902054168061070f576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610901565b156106235750506065546001600160a01b031690565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190610901565b156106a85750506066546001600160a01b031690565b60405162461bcd60e51b815260206004820152603660248201527f5472616e7366657253656c6563746f724e46543a204e6f204e4654207472616e60448201527573666572206d616e6167657220617661696c61626c6560501b60648201526084016101fe565b919050565b6033546001600160a01b0316331461073e5760405162461bcd60e51b81526004016101fe906108cc565b6001600160a01b0381166107a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101fe565b6107ac816107de565b50565b600054610100900460ff166107d65760405162461bcd60e51b81526004016101fe90610923565b61057c610830565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166108575760405162461bcd60e51b81526004016101fe90610923565b61057c336107de565b80356001600160a01b038116811461070f57600080fd5b6000806040838503121561088a57600080fd5b61089383610860565b91506108a160208401610860565b90509250929050565b6000602082840312156108bc57600080fd5b6108c582610860565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561091357600080fd5b815180151581146108c557600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220fe6f1f3f639097dfa9437e94d25f77d0fbbd10da0e8d4bd7f4cbcf986395f80464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCollectionTransferManager(address,address)": {
        "details": "It is meant to be used for exceptions only (e.g., CryptoKitties)",
        "params": {
          "collection": "collection address to add specific transfer rule"
        }
      },
      "checkTransferManagerForToken(address)": {
        "details": "Support for ERC165 interface is checked AFTER custom implementation",
        "params": {
          "collection": "collection address"
        },
        "returns": {
          "transferManager": "address of transfer manager to use"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_transferManagerERC1155": "address of the ERC1155 transfer manager",
          "_transferManagerERC721": "address of the ERC721 transfer manager"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCollectionTransferManager(address)": {
        "params": {
          "collection": "collection address to remove exception"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TransferSelectorNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollectionTransferManager(address,address)": {
        "notice": "Add a transfer manager for a collection"
      },
      "checkTransferManagerForToken(address)": {
        "notice": "Check the transfer manager for a token"
      },
      "initialize(address,address)": {
        "notice": "Initializer"
      },
      "removeCollectionTransferManager(address)": {
        "notice": "Remove a transfer manager for a collection"
      }
    },
    "notice": "It selects the NFT transfer manager based on a collection address.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1223,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 582,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14130,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "transferManagerERC721",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 14132,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "transferManagerERC1155",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 14136,
        "contract": "contracts/TransferSelectorNFT.sol:TransferSelectorNFT",
        "label": "transferManagerSelectorForCollection",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}