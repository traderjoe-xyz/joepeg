{
  "address": "0x52e1c895631Ac4A173CF87a1191B1Ab373681851",
  "abi": [
    {
      "inputs": [],
      "name": "ProtocolFeeManager__InvalidProtocolFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFeeForCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "UnsetProtocolFeeForCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defaultProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateDefaultProtocolFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionProtocolFeeOverrides",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOverridden",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "protocolFeeForCollection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "setDefaultProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeeForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "unsetProtocolFeeForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf483e657638beac425e63c03c61d1d05e9e36a5cdd137b9d81fd9e38399c1d70",
  "receipt": {
    "to": null,
    "from": "0x597E2587eCA945fB001BAdF1adF878CcB8e368b6",
    "contractAddress": "0x52e1c895631Ac4A173CF87a1191B1Ab373681851",
    "transactionIndex": 87,
    "gasUsed": "467774",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbe4e33e14551f8b4f3cbb8777ceee7ee11231f0c777c71df40ccbe06bf7e3651",
    "transactionHash": "0xf483e657638beac425e63c03c61d1d05e9e36a5cdd137b9d81fd9e38399c1d70",
    "logs": [],
    "blockNumber": 24843698,
    "cumulativeGasUsed": "8873433",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e27c224c09507bb41163b96c985afc0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ProtocolFeeManager__InvalidProtocolFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFeeForCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"UnsetProtocolFeeForCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultProtocolFee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultProtocolFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionProtocolFeeOverrides\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverridden\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultProtocolFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"protocolFeeForCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"unsetProtocolFeeForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(uint256)\":{\"params\":{\"_defaultProtocolFee\":\"default protocol fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"protocolFeeForCollection(address)\":{\"params\":{\"_collection\":\"address of collection to look up protocol fee for\"},\"returns\":{\"_0\":\"protocol fee for `_collection`\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDefaultProtocolFee(uint256)\":{\"params\":{\"_defaultProtocolFee\":\"new default protocol fee\"}},\"setProtocolFeeForCollection(address,uint256)\":{\"params\":{\"_collection\":\"address of collection to set custom protocol fee for\",\"_protocolFee\":\"custom protocol fee\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unsetProtocolFeeForCollection(address)\":{\"params\":{\"_collection\":\"address of collection to unset custom protocol fee for\"}}},\"title\":\"ProtocolFeeManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectionProtocolFeeOverrides(address)\":{\"notice\":\"Mapping of collections to custom protocol fee overrides\"},\"defaultProtocolFee()\":{\"notice\":\"Default protocol fee, with precision 100 (e.g. 200 -> 2%)\"},\"initialize(uint256)\":{\"notice\":\"Initializer\"},\"protocolFeeForCollection(address)\":{\"notice\":\"Get protocol fee for a given `_collection`, falling back to `defaultProtocolFee` if there is no custom protocol fee set\"},\"setDefaultProtocolFee(uint256)\":{\"notice\":\"Updates `defaultProtocolFee`\"},\"setProtocolFeeForCollection(address,uint256)\":{\"notice\":\"Sets custom protocol fee for `_collection`\"},\"unsetProtocolFeeForCollection(address)\":{\"notice\":\"Unsets custom protocol fee for `_collection`\"}},\"notice\":\"Tracks and manages protocol fees for collections in the Joepeg Exchange\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeeManager.sol\":\"ProtocolFeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/ProtocolFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProtocolFeeManager} from \\\"./interfaces/IProtocolFeeManager.sol\\\";\\n\\nerror ProtocolFeeManager__InvalidProtocolFee();\\n\\n/**\\n * @title ProtocolFeeManager\\n * @notice Tracks and manages protocol fees for collections in the Joepeg Exchange\\n */\\ncontract ProtocolFeeManager is\\n    IProtocolFeeManager,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    struct ProtocolFeeOverride {\\n        bool isOverridden;\\n        uint256 protocolFee;\\n    }\\n\\n    /// @notice Default protocol fee, with precision 100 (e.g. 200 -> 2%)\\n    uint256 public override defaultProtocolFee;\\n\\n    /// @notice Mapping of collections to custom protocol fee overrides\\n    mapping(address => ProtocolFeeOverride)\\n        public collectionProtocolFeeOverrides;\\n\\n    event UpdateDefaultProtocolFee(\\n        address indexed user,\\n        uint256 defaultProtocolFee\\n    );\\n    event SetProtocolFeeForCollection(\\n        address indexed user,\\n        address indexed collection,\\n        uint256 protocolFee\\n    );\\n    event UnsetProtocolFeeForCollection(\\n        address indexed user,\\n        address indexed collection\\n    );\\n\\n    modifier isValidProtocolFee(uint256 _protocolFee) {\\n        if (_protocolFee > 10000) {\\n            revert ProtocolFeeManager__InvalidProtocolFee();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializer\\n     * @param _defaultProtocolFee default protocol fee\\n     */\\n    function initialize(uint256 _defaultProtocolFee)\\n        public\\n        initializer\\n        isValidProtocolFee(_defaultProtocolFee)\\n    {\\n        __Ownable_init();\\n\\n        defaultProtocolFee = _defaultProtocolFee;\\n    }\\n\\n    /**\\n     * @notice Updates `defaultProtocolFee`\\n     * @param _defaultProtocolFee new default protocol fee\\n     */\\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee)\\n        external\\n        override\\n        onlyOwner\\n        isValidProtocolFee(_defaultProtocolFee)\\n    {\\n        defaultProtocolFee = _defaultProtocolFee;\\n        emit UpdateDefaultProtocolFee(msg.sender, _defaultProtocolFee);\\n    }\\n\\n    /**\\n     * @notice Sets custom protocol fee for `_collection`\\n     * @param _collection address of collection to set custom protocol fee for\\n     * @param _protocolFee custom protocol fee\\n     */\\n    function setProtocolFeeForCollection(\\n        address _collection,\\n        uint256 _protocolFee\\n    ) external override onlyOwner isValidProtocolFee(_protocolFee) {\\n        collectionProtocolFeeOverrides[_collection] = ProtocolFeeOverride({\\n            isOverridden: true,\\n            protocolFee: _protocolFee\\n        });\\n        emit SetProtocolFeeForCollection(msg.sender, _collection, _protocolFee);\\n    }\\n\\n    /**\\n     * @notice Unsets custom protocol fee for `_collection`\\n     * @param _collection address of collection to unset custom protocol fee for\\n     */\\n    function unsetProtocolFeeForCollection(address _collection)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        collectionProtocolFeeOverrides[_collection] = ProtocolFeeOverride({\\n            isOverridden: false,\\n            protocolFee: 0\\n        });\\n        emit UnsetProtocolFeeForCollection(msg.sender, _collection);\\n    }\\n\\n    /**\\n     * @notice Get protocol fee for a given `_collection`, falling back to\\n     * `defaultProtocolFee` if there is no custom protocol fee set\\n     * @param _collection address of collection to look up protocol fee for\\n     * @return protocol fee for `_collection`\\n     */\\n    function protocolFeeForCollection(address _collection)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        ProtocolFeeOverride\\n            memory protocolFeeOverride = collectionProtocolFeeOverrides[\\n                _collection\\n            ];\\n        return\\n            protocolFeeOverride.isOverridden\\n                ? protocolFeeOverride.protocolFee\\n                : defaultProtocolFee;\\n    }\\n}\\n\",\"keccak256\":\"0x957f7eeac704c60aad4f12640362151709d9ad1ce215bbeaf310121443cee10b\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProtocolFeeManager {\\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee) external;\\n\\n    function setProtocolFeeForCollection(\\n        address _collection,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    function unsetProtocolFeeForCollection(address _collection) external;\\n\\n    function protocolFeeForCollection(address _collection)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function defaultProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c23934d4de891c89d2d799459704750c5d02970ab2476878bf7c5f459941f6a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061077f806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063700c520011610066578063700c52001461013e578063715018a6146101515780638da5cb5b14610159578063f2fde38b14610174578063fe4b84df1461018757600080fd5b806305e0a2f2146100a357806325225ef8146100ec578063421bcbdf1461010157806352214927146101185780636034b5101461012b575b600080fd5b6100d06100b136600461066b565b6066602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152015b60405180910390f35b6100ff6100fa36600461066b565b61019a565b005b61010a60655481565b6040519081526020016100e3565b6100ff610126366004610686565b61023d565b6100ff6101393660046106b0565b610306565b61010a61014c36600461066b565b610392565b6100ff6103e6565b6033546040516001600160a01b0390911681526020016100e3565b6100ff61018236600461066b565b61041c565b6100ff6101953660046106b0565b6104b7565b6033546001600160a01b031633146101cd5760405162461bcd60e51b81526004016101c4906106c9565b60405180910390fd5b604080518082018252600080825260208083018281526001600160a01b03861680845260669092528483209351845460ff1916901515178455516001909301929092559151909133917f27b148c625962b0d7ecf0f1aa108a6b63e023bbdd0e3554b2cbac6278943915a9190a350565b6033546001600160a01b031633146102675760405162461bcd60e51b81526004016101c4906106c9565b8061271081111561028b5760405163609ef09960e11b815260040160405180910390fd5b604080518082018252600180825260208083018681526001600160a01b0388166000818152606684528690209451855460ff191690151517855590519390920192909255915184815233917f832cc6ea2b93d7a764c02dfb77f93369b48a94f8aab340fb378a6c8d59f74832910160405180910390a3505050565b6033546001600160a01b031633146103305760405162461bcd60e51b81526004016101c4906106c9565b806127108111156103545760405163609ef09960e11b815260040160405180910390fd5b606582905560405182815233907f1aa18d703acdc8b2dc948c207bc30c6933aeed9c6fbd96f19c5a8e07f1eeb3359060200160405180910390a25050565b6001600160a01b03811660009081526066602090815260408083208151808301909252805460ff16151580835260019091015492820192909252906103d9576065546103df565b80602001515b9392505050565b6033546001600160a01b031633146104105760405162461bcd60e51b81526004016101c4906106c9565b61041a60006105a3565b565b6033546001600160a01b031633146104465760405162461bcd60e51b81526004016101c4906106c9565b6001600160a01b0381166104ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c4565b6104b4816105a3565b50565b600054610100900460ff166104d25760005460ff16156104d6565b303b155b6105395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101c4565b600054610100900460ff1615801561055b576000805461ffff19166101011790555b8161271081111561057f5760405163609ef09960e11b815260040160405180910390fd5b6105876105f5565b506065829055801561059f576000805461ff00191690555b5050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661061c5760405162461bcd60e51b81526004016101c4906106fe565b61041a600054610100900460ff166106465760405162461bcd60e51b81526004016101c4906106fe565b61041a336105a3565b80356001600160a01b038116811461066657600080fd5b919050565b60006020828403121561067d57600080fd5b6103df8261064f565b6000806040838503121561069957600080fd5b6106a28361064f565b946020939093013593505050565b6000602082840312156106c257600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220204fc5e32a61d591a41185c2b7e7d645ff51ac6807988f9296a21b07a4735d1264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063700c520011610066578063700c52001461013e578063715018a6146101515780638da5cb5b14610159578063f2fde38b14610174578063fe4b84df1461018757600080fd5b806305e0a2f2146100a357806325225ef8146100ec578063421bcbdf1461010157806352214927146101185780636034b5101461012b575b600080fd5b6100d06100b136600461066b565b6066602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152015b60405180910390f35b6100ff6100fa36600461066b565b61019a565b005b61010a60655481565b6040519081526020016100e3565b6100ff610126366004610686565b61023d565b6100ff6101393660046106b0565b610306565b61010a61014c36600461066b565b610392565b6100ff6103e6565b6033546040516001600160a01b0390911681526020016100e3565b6100ff61018236600461066b565b61041c565b6100ff6101953660046106b0565b6104b7565b6033546001600160a01b031633146101cd5760405162461bcd60e51b81526004016101c4906106c9565b60405180910390fd5b604080518082018252600080825260208083018281526001600160a01b03861680845260669092528483209351845460ff1916901515178455516001909301929092559151909133917f27b148c625962b0d7ecf0f1aa108a6b63e023bbdd0e3554b2cbac6278943915a9190a350565b6033546001600160a01b031633146102675760405162461bcd60e51b81526004016101c4906106c9565b8061271081111561028b5760405163609ef09960e11b815260040160405180910390fd5b604080518082018252600180825260208083018681526001600160a01b0388166000818152606684528690209451855460ff191690151517855590519390920192909255915184815233917f832cc6ea2b93d7a764c02dfb77f93369b48a94f8aab340fb378a6c8d59f74832910160405180910390a3505050565b6033546001600160a01b031633146103305760405162461bcd60e51b81526004016101c4906106c9565b806127108111156103545760405163609ef09960e11b815260040160405180910390fd5b606582905560405182815233907f1aa18d703acdc8b2dc948c207bc30c6933aeed9c6fbd96f19c5a8e07f1eeb3359060200160405180910390a25050565b6001600160a01b03811660009081526066602090815260408083208151808301909252805460ff16151580835260019091015492820192909252906103d9576065546103df565b80602001515b9392505050565b6033546001600160a01b031633146104105760405162461bcd60e51b81526004016101c4906106c9565b61041a60006105a3565b565b6033546001600160a01b031633146104465760405162461bcd60e51b81526004016101c4906106c9565b6001600160a01b0381166104ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c4565b6104b4816105a3565b50565b600054610100900460ff166104d25760005460ff16156104d6565b303b155b6105395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101c4565b600054610100900460ff1615801561055b576000805461ffff19166101011790555b8161271081111561057f5760405163609ef09960e11b815260040160405180910390fd5b6105876105f5565b506065829055801561059f576000805461ff00191690555b5050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661061c5760405162461bcd60e51b81526004016101c4906106fe565b61041a600054610100900460ff166106465760405162461bcd60e51b81526004016101c4906106fe565b61041a336105a3565b80356001600160a01b038116811461066657600080fd5b919050565b60006020828403121561067d57600080fd5b6103df8261064f565b6000806040838503121561069957600080fd5b6106a28361064f565b946020939093013593505050565b6000602082840312156106c257600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220204fc5e32a61d591a41185c2b7e7d645ff51ac6807988f9296a21b07a4735d1264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(uint256)": {
        "params": {
          "_defaultProtocolFee": "default protocol fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "protocolFeeForCollection(address)": {
        "params": {
          "_collection": "address of collection to look up protocol fee for"
        },
        "returns": {
          "_0": "protocol fee for `_collection`"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDefaultProtocolFee(uint256)": {
        "params": {
          "_defaultProtocolFee": "new default protocol fee"
        }
      },
      "setProtocolFeeForCollection(address,uint256)": {
        "params": {
          "_collection": "address of collection to set custom protocol fee for",
          "_protocolFee": "custom protocol fee"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unsetProtocolFeeForCollection(address)": {
        "params": {
          "_collection": "address of collection to unset custom protocol fee for"
        }
      }
    },
    "title": "ProtocolFeeManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectionProtocolFeeOverrides(address)": {
        "notice": "Mapping of collections to custom protocol fee overrides"
      },
      "defaultProtocolFee()": {
        "notice": "Default protocol fee, with precision 100 (e.g. 200 -> 2%)"
      },
      "initialize(uint256)": {
        "notice": "Initializer"
      },
      "protocolFeeForCollection(address)": {
        "notice": "Get protocol fee for a given `_collection`, falling back to `defaultProtocolFee` if there is no custom protocol fee set"
      },
      "setDefaultProtocolFee(uint256)": {
        "notice": "Updates `defaultProtocolFee`"
      },
      "setProtocolFeeForCollection(address,uint256)": {
        "notice": "Sets custom protocol fee for `_collection`"
      },
      "unsetProtocolFeeForCollection(address)": {
        "notice": "Unsets custom protocol fee for `_collection`"
      }
    },
    "notice": "Tracks and manages protocol fees for collections in the Joepeg Exchange",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1223,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 582,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11874,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "defaultProtocolFee",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 11880,
        "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
        "label": "collectionProtocolFeeOverrides",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(ProtocolFeeOverride)11870_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ProtocolFeeOverride)11870_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ProtocolFeeManager.ProtocolFeeOverride)",
        "numberOfBytes": "32",
        "value": "t_struct(ProtocolFeeOverride)11870_storage"
      },
      "t_struct(ProtocolFeeOverride)11870_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolFeeManager.ProtocolFeeOverride",
        "members": [
          {
            "astId": 11867,
            "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
            "label": "isOverridden",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11869,
            "contract": "contracts/ProtocolFeeManager.sol:ProtocolFeeManager",
            "label": "protocolFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}