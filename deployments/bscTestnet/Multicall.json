{
  "address": "0x291d8Bdd25Eb89F1c2B465377d6453d9c38Ad8b6",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xab75dbdcec3b5b384cfcac7f558737fe089c7e62af900dabab9141dea93440c1",
  "receipt": {
    "to": null,
    "from": "0x597E2587eCA945fB001BAdF1adF878CcB8e368b6",
    "contractAddress": "0x291d8Bdd25Eb89F1c2B465377d6453d9c38Ad8b6",
    "transactionIndex": 0,
    "gasUsed": "314445",
    "logsBloom": "0x
    "blockHash": "0x36e985a921b4077104847c6b23cf8db4f4e3025d134117cac680fde636c78acb",
    "transactionHash": "0xab75dbdcec3b5b384cfcac7f558737fe089c7e62af900dabab9141dea93440c1",
    "logs": [],
    "blockNumber": 26311485,
    "cumulativeGasUsed": "314445",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2594396d0dface407344f8699f3322d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregate((address,bytes)[])\":{\"params\":{\"calls\":\"an array of calls : each call has a target and calldata\"}}},\"title\":\"Multicall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregate((address,bytes)[])\":{\"notice\":\"Aggregates multiple transactions in a single call\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Multicall\\n * @notice Enables calling multiple methods in a single call to the contract.\\n */\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    /**\\n     * @notice Aggregates multiple transactions in a single call\\n     * @param calls an array of calls : each call has a target and calldata\\n     */\\n    function aggregate(Call[] memory calls)\\n        public\\n        returns (uint256 blockNumber, bytes[] memory returnData)\\n    {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(\\n                calls[i].callData\\n            );\\n            require(success);\\n            returnData[i] = ret;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb54b7513ef87fc90dd023bf49eabab115e7936d227bc85934841258db2df42f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506104ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063252dba4214610030575b600080fd5b61004361003e36600461020a565b61005a565b6040516100519291906103a7565b60405180910390f35b8051439060609067ffffffffffffffff8111156100795761007961019a565b6040519080825280602002602001820160405280156100ac57816020015b60608152602001906001900390816100975790505b50905060005b8351811015610194576000808583815181106100d0576100d0610429565b6020026020010151600001516001600160a01b03168684815181106100f7576100f7610429565b602002602001015160200151604051610110919061043f565b6000604051808303816000865af19150503d806000811461014d576040519150601f19603f3d011682016040523d82523d6000602084013e610152565b606091505b50915091508161016157600080fd5b8084848151811061017457610174610429565b60200260200101819052505050808061018c9061045b565b9150506100b2565b50915091565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156101d3576101d361019a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156102025761020261019a565b604052919050565b6000602080838503121561021d57600080fd5b823567ffffffffffffffff8082111561023557600080fd5b818501915085601f83011261024957600080fd5b81358181111561025b5761025b61019a565b8060051b61026a8582016101d9565b918252838101850191858101908984111561028457600080fd5b86860192505b8383101561036a578235858111156102a25760008081fd5b86016040601f19828d0381018213156102bb5760008081fd5b6102c36101b0565b838b01356001600160a01b03811681146102dd5760008081fd5b815283830135898111156102f15760008081fd5b8085019450508d603f8501126103075760008081fd5b8a8401358981111561031b5761031b61019a565b61032b8c84601f840116016101d9565b92508083528e848287010111156103425760008081fd5b808486018d85013760009083018c0152808b019190915284525050918601919086019061028a565b9998505050505050505050565b60005b8381101561039257818101518382015260200161037a565b838111156103a1576000848401525b50505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b8281101561041b57878603605f19018452815180518088526103fc81888a01898501610377565b601f01601f1916969096018501955092840192908401906001016103d5565b509398975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610451818460208701610377565b9190910192915050565b600060001982141561047d57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212209d9c126a6c9d557e3c3bf0378ffec79b0ced8a5d37fa3af20b25fc458880d69364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063252dba4214610030575b600080fd5b61004361003e36600461020a565b61005a565b6040516100519291906103a7565b60405180910390f35b8051439060609067ffffffffffffffff8111156100795761007961019a565b6040519080825280602002602001820160405280156100ac57816020015b60608152602001906001900390816100975790505b50905060005b8351811015610194576000808583815181106100d0576100d0610429565b6020026020010151600001516001600160a01b03168684815181106100f7576100f7610429565b602002602001015160200151604051610110919061043f565b6000604051808303816000865af19150503d806000811461014d576040519150601f19603f3d011682016040523d82523d6000602084013e610152565b606091505b50915091508161016157600080fd5b8084848151811061017457610174610429565b60200260200101819052505050808061018c9061045b565b9150506100b2565b50915091565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156101d3576101d361019a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156102025761020261019a565b604052919050565b6000602080838503121561021d57600080fd5b823567ffffffffffffffff8082111561023557600080fd5b818501915085601f83011261024957600080fd5b81358181111561025b5761025b61019a565b8060051b61026a8582016101d9565b918252838101850191858101908984111561028457600080fd5b86860192505b8383101561036a578235858111156102a25760008081fd5b86016040601f19828d0381018213156102bb5760008081fd5b6102c36101b0565b838b01356001600160a01b03811681146102dd5760008081fd5b815283830135898111156102f15760008081fd5b8085019450508d603f8501126103075760008081fd5b8a8401358981111561031b5761031b61019a565b61032b8c84601f840116016101d9565b92508083528e848287010111156103425760008081fd5b808486018d85013760009083018c0152808b019190915284525050918601919086019061028a565b9998505050505050505050565b60005b8381101561039257818101518382015260200161037a565b838111156103a1576000848401525b50505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b8281101561041b57878603605f19018452815180518088526103fc81888a01898501610377565b601f01601f1916969096018501955092840192908401906001016103d5565b509398975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610451818460208701610377565b9190910192915050565b600060001982141561047d57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212209d9c126a6c9d557e3c3bf0378ffec79b0ced8a5d37fa3af20b25fc458880d69364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "aggregate((address,bytes)[])": {
        "params": {
          "calls": "an array of calls : each call has a target and calldata"
        }
      }
    },
    "title": "Multicall",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregate((address,bytes)[])": {
        "notice": "Aggregates multiple transactions in a single call"
      }
    },
    "notice": "Enables calling multiple methods in a single call to the contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}