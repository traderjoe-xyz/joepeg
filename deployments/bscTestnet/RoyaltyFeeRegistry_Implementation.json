{
  "address": "0x98c9935E9c653F3445DA977Ee9d6739B950d6C41",
  "abi": [
    {
      "inputs": [],
      "name": "RoyaltyFeeRegistry__RoyaltyFeeLimitTooHigh",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "NewRoyaltyFeeLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyFeeUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "royaltyFeeInfoCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa96c8076883b2327b535be064ec0120f0d333067ffac40cb0c9bd8a99ea0d11b",
  "receipt": {
    "to": null,
    "from": "0x597E2587eCA945fB001BAdF1adF878CcB8e368b6",
    "contractAddress": "0x98c9935E9c653F3445DA977Ee9d6739B950d6C41",
    "transactionIndex": 0,
    "gasUsed": "494223",
    "logsBloom": "0x
    "blockHash": "0x46597cc45a0eda050e44e111957418a91fbb7e7a75d306b44fa4c9a6545b2a83",
    "transactionHash": "0xa96c8076883b2327b535be064ec0120f0d333067ffac40cb0c9bd8a99ea0d11b",
    "logs": [],
    "blockNumber": 26311433,
    "cumulativeGasUsed": "494223",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e27c224c09507bb41163b96c985afc0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"RoyaltyFeeRegistry__RoyaltyFeeLimitTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"NewRoyaltyFeeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"royaltyFeeInfoCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyFeeInfoCollection(address)\":{\"params\":{\"collection\":\"collection address\"}},\"royaltyInfo(address,uint256)\":{\"params\":{\"amount\":\"amount\",\"collection\":\"collection address\"},\"returns\":{\"_0\":\"receiver address and amount received by royalty recipient\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}}},\"title\":\"RoyaltyFeeRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(uint256)\":{\"notice\":\"Initializer\"},\"royaltyFeeInfoCollection(address)\":{\"notice\":\"View royalty info for a collection address\"},\"royaltyInfo(address,uint256)\":{\"notice\":\"Calculate royalty info for a collection address and a sale gross amount\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"It is a royalty fee registry for the Joepeg exchange.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeRegistry.sol\":\"RoyaltyFeeRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\n\\nerror RoyaltyFeeRegistry__RoyaltyFeeLimitTooHigh();\\n\\n/**\\n * @title RoyaltyFeeRegistry\\n * @notice It is a royalty fee registry for the Joepeg exchange.\\n */\\ncontract RoyaltyFeeRegistry is\\n    IRoyaltyFeeRegistry,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    struct FeeInfo {\\n        address setter;\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\\n    uint256 public royaltyFeeLimit;\\n\\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\\n\\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\\n    event RoyaltyFeeUpdate(\\n        address indexed collection,\\n        address indexed setter,\\n        address indexed receiver,\\n        uint256 fee\\n    );\\n\\n    modifier isValidRoyaltyFeeLimit(uint256 _royaltyFeeLimit) {\\n        if (_royaltyFeeLimit > 9500) {\\n            revert RoyaltyFeeRegistry__RoyaltyFeeLimitTooHigh();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializer\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function initialize(uint256 _royaltyFeeLimit)\\n        public\\n        initializer\\n        isValidRoyaltyFeeLimit(_royaltyFeeLimit)\\n    {\\n        __Ownable_init();\\n\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        override\\n        isValidRoyaltyFeeLimit(_royaltyFeeLimit)\\n        onlyOwner\\n    {\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n\\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external override onlyOwner {\\n        require(fee <= royaltyFeeLimit, \\\"Registry: Royalty fee too high\\\");\\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\\n            setter: setter,\\n            receiver: receiver,\\n            fee: fee\\n        });\\n\\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty info for a collection address and a sale gross amount\\n     * @param collection collection address\\n     * @param amount amount\\n     * @return receiver address and amount received by royalty recipient\\n     */\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\\n        );\\n    }\\n\\n    /**\\n     * @notice View royalty info for a collection address\\n     * @param collection collection address\\n     */\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].setter,\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            _royaltyFeeInfoCollection[collection].fee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa29c128e0e6998078e73d40df6d949d172586a041c9d02a4a5c85ce11c3e4f8f\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x26ee0d6a50c317b22494ad09ff62d8469b24a51252be563dfb63512ff377c41d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b9223c9d11610066578063b9223c9d1461010b578063bbdf9b681461011e578063e31ef91c14610131578063f2fde38b14610197578063fe4b84df146101aa57600080fd5b80632782d6c7146100985780634fb7d3f9146100cf578063715018a6146100e65780638da5cb5b146100f0575b600080fd5b6100ab6100a6366004610645565b6101bd565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100d860655481565b6040519081526020016100c6565b6100ee61020b565b005b6033546040516001600160a01b0390911681526020016100c6565b6100ee61011936600461066f565b61024a565b6100ee61012c366004610688565b6102d4565b61017161013f3660046106d3565b6001600160a01b0390811660009081526066602052604090208054600182015460029092015490831693919092169190565b604080516001600160a01b039485168152939092166020840152908201526060016100c6565b6100ee6101a53660046106d3565b6103f6565b6100ee6101b836600461066f565b610491565b6001600160a01b038083166000908152606660205260408120600181015460029091015491928392911690612710906101f690866106f5565b6102009190610722565b915091509250929050565b6033546001600160a01b0316331461023e5760405162461bcd60e51b815260040161023590610744565b60405180910390fd5b610248600061057d565b565b8061251c81111561026e57604051636e0d9f6360e11b815260040160405180910390fd5b6033546001600160a01b031633146102985760405162461bcd60e51b815260040161023590610744565b60658290556040518281527f2da7166c72ef3860ef4fb2571105533c40615269a6dbc38ce0b264910df1c2569060200160405180910390a15050565b6033546001600160a01b031633146102fe5760405162461bcd60e51b815260040161023590610744565b6065548111156103505760405162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f206869676800006044820152606401610235565b604080516060810182526001600160a01b0385811680835285821660208085018281528587018881528b8616600081815260668552899020975188549088166001600160a01b03199182161789559251600189018054919098169316929092179095559351600290950194909455935185815290927fd01984afa6e37420452e575e7d99dd7e632b3ec8ea2adec998475b76ca494d64910160405180910390a450505050565b6033546001600160a01b031633146104205760405162461bcd60e51b815260040161023590610744565b6001600160a01b0381166104855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610235565b61048e8161057d565b50565b600054610100900460ff166104ac5760005460ff16156104b0565b303b155b6105135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610235565b600054610100900460ff16158015610535576000805461ffff19166101011790555b8161251c81111561055957604051636e0d9f6360e11b815260040160405180910390fd5b6105616105cf565b5060658290558015610579576000805461ff00191690555b5050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166105f65760405162461bcd60e51b815260040161023590610779565b610248600054610100900460ff166106205760405162461bcd60e51b815260040161023590610779565b6102483361057d565b80356001600160a01b038116811461064057600080fd5b919050565b6000806040838503121561065857600080fd5b61066183610629565b946020939093013593505050565b60006020828403121561068157600080fd5b5035919050565b6000806000806080858703121561069e57600080fd5b6106a785610629565b93506106b560208601610629565b92506106c360408601610629565b9396929550929360600135925050565b6000602082840312156106e557600080fd5b6106ee82610629565b9392505050565b600081600019048311821515161561071d57634e487b7160e01b600052601160045260246000fd5b500290565b60008261073f57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212204b75491baf1655c5183f658eba7b8cc9776065b5dc3b32df946d8386baa60b6664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b9223c9d11610066578063b9223c9d1461010b578063bbdf9b681461011e578063e31ef91c14610131578063f2fde38b14610197578063fe4b84df146101aa57600080fd5b80632782d6c7146100985780634fb7d3f9146100cf578063715018a6146100e65780638da5cb5b146100f0575b600080fd5b6100ab6100a6366004610645565b6101bd565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100d860655481565b6040519081526020016100c6565b6100ee61020b565b005b6033546040516001600160a01b0390911681526020016100c6565b6100ee61011936600461066f565b61024a565b6100ee61012c366004610688565b6102d4565b61017161013f3660046106d3565b6001600160a01b0390811660009081526066602052604090208054600182015460029092015490831693919092169190565b604080516001600160a01b039485168152939092166020840152908201526060016100c6565b6100ee6101a53660046106d3565b6103f6565b6100ee6101b836600461066f565b610491565b6001600160a01b038083166000908152606660205260408120600181015460029091015491928392911690612710906101f690866106f5565b6102009190610722565b915091509250929050565b6033546001600160a01b0316331461023e5760405162461bcd60e51b815260040161023590610744565b60405180910390fd5b610248600061057d565b565b8061251c81111561026e57604051636e0d9f6360e11b815260040160405180910390fd5b6033546001600160a01b031633146102985760405162461bcd60e51b815260040161023590610744565b60658290556040518281527f2da7166c72ef3860ef4fb2571105533c40615269a6dbc38ce0b264910df1c2569060200160405180910390a15050565b6033546001600160a01b031633146102fe5760405162461bcd60e51b815260040161023590610744565b6065548111156103505760405162461bcd60e51b815260206004820152601e60248201527f52656769737472793a20526f79616c74792066656520746f6f206869676800006044820152606401610235565b604080516060810182526001600160a01b0385811680835285821660208085018281528587018881528b8616600081815260668552899020975188549088166001600160a01b03199182161789559251600189018054919098169316929092179095559351600290950194909455935185815290927fd01984afa6e37420452e575e7d99dd7e632b3ec8ea2adec998475b76ca494d64910160405180910390a450505050565b6033546001600160a01b031633146104205760405162461bcd60e51b815260040161023590610744565b6001600160a01b0381166104855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610235565b61048e8161057d565b50565b600054610100900460ff166104ac5760005460ff16156104b0565b303b155b6105135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610235565b600054610100900460ff16158015610535576000805461ffff19166101011790555b8161251c81111561055957604051636e0d9f6360e11b815260040160405180910390fd5b6105616105cf565b5060658290558015610579576000805461ff00191690555b5050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166105f65760405162461bcd60e51b815260040161023590610779565b610248600054610100900460ff166106205760405162461bcd60e51b815260040161023590610779565b6102483361057d565b80356001600160a01b038116811461064057600080fd5b919050565b6000806040838503121561065857600080fd5b61066183610629565b946020939093013593505050565b60006020828403121561068157600080fd5b5035919050565b6000806000806080858703121561069e57600080fd5b6106a785610629565b93506106b560208601610629565b92506106c360408601610629565b9396929550929360600135925050565b6000602082840312156106e557600080fd5b6106ee82610629565b9392505050565b600081600019048311821515161561071d57634e487b7160e01b600052601160045260246000fd5b500290565b60008261073f57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212204b75491baf1655c5183f658eba7b8cc9776065b5dc3b32df946d8386baa60b6664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyFeeInfoCollection(address)": {
        "params": {
          "collection": "collection address"
        }
      },
      "royaltyInfo(address,uint256)": {
        "params": {
          "amount": "amount",
          "collection": "collection address"
        },
        "returns": {
          "_0": "receiver address and amount received by royalty recipient"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      }
    },
    "title": "RoyaltyFeeRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(uint256)": {
        "notice": "Initializer"
      },
      "royaltyFeeInfoCollection(address)": {
        "notice": "View royalty info for a collection address"
      },
      "royaltyInfo(address,uint256)": {
        "notice": "Calculate royalty info for a collection address and a sale gross amount"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "It is a royalty fee registry for the Joepeg exchange.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 702,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 705,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1223,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 582,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12371,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "royaltyFeeLimit",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 12376,
        "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
        "label": "_royaltyFeeInfoCollection",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(FeeInfo)12369_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FeeInfo)12369_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltyFeeRegistry.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)12369_storage"
      },
      "t_struct(FeeInfo)12369_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyFeeRegistry.FeeInfo",
        "members": [
          {
            "astId": 12364,
            "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "setter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12366,
            "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12368,
            "contract": "contracts/RoyaltyFeeRegistry.sol:RoyaltyFeeRegistry",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}